GAS LISTING /tmp/ccBqgni8.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv11setUserModeEv
   9              	_ZN5Riscv11setUserModeEv:
  10              	.LFB29:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 10/7/25.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** 
   7:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   8:src/Riscv.cpp **** #include "../h/KThread.hpp"
   9:src/Riscv.cpp **** #include "../h/KSemaphore.hpp"
  10:src/Riscv.cpp **** #include "../lib/hw.h"
  11:src/Riscv.cpp **** #include "../lib/console.h"
  12:src/Riscv.cpp **** #include "../test/printing.hpp"
  13:src/Riscv.cpp **** 
  14:src/Riscv.cpp **** constexpr uint64 MEM_ALLOC = 0x01;
  15:src/Riscv.cpp **** constexpr uint64 MEM_FREE = 0x02;
  16:src/Riscv.cpp **** constexpr uint64 MEM_GET_FREE_SPACE = 0x03;
  17:src/Riscv.cpp **** constexpr uint64 MEM_GET_LARGEST_FREE_BLOCK = 0x04;
  18:src/Riscv.cpp **** 
  19:src/Riscv.cpp **** constexpr uint64 USER_MODE = 0x08;
  20:src/Riscv.cpp **** constexpr uint64 KERNEL_MODE = 0x09;
  21:src/Riscv.cpp **** 
  22:src/Riscv.cpp **** constexpr uint64 THREAD_CREATE = 0x11;
  23:src/Riscv.cpp **** constexpr uint64 THREAD_EXIT = 0x12;
  24:src/Riscv.cpp **** constexpr uint64 THREAD_DISPATCH = 0x13;
  25:src/Riscv.cpp **** 
  26:src/Riscv.cpp **** constexpr uint64 SEM_OPEN = 0x21;
  27:src/Riscv.cpp **** constexpr uint64 SEM_CLOSE = 0x22;
  28:src/Riscv.cpp **** constexpr uint64 SEM_WAIT = 0x23;
  29:src/Riscv.cpp **** constexpr uint64 SEM_SIGNAL = 0x24;
  30:src/Riscv.cpp **** 
  31:src/Riscv.cpp **** constexpr uint64 GETC = 0x41;
  32:src/Riscv.cpp **** constexpr uint64 PUTC = 0x42;
  33:src/Riscv.cpp **** 
  34:src/Riscv.cpp **** void Riscv::setUserMode() {
  12              		.loc 1 34 27
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  35:src/Riscv.cpp ****     // Oƒçisti SPP bit (previous privilege = User mode)
  36:src/Riscv.cpp ****     mc_sstatus(SSTATUS_SPP);
  20              		.loc 1 36 5
  21              	.LVL0:
  22              	.LBB45:
GAS LISTING /tmp/ccBqgni8.s 			page 2


  23              	.LBB46:
  24              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 10/7/25.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** extern uint64 framePointer;
  11:src/../h/Riscv.hpp **** extern "C" void trap_handler();
  12:src/../h/Riscv.hpp **** 
  13:src/../h/Riscv.hpp **** class Riscv {
  14:src/../h/Riscv.hpp **** public:
  15:src/../h/Riscv.hpp ****     static void setupTrapHandler();
  16:src/../h/Riscv.hpp ****     static void trapHandler();
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp ****     static void setUserMode();
  19:src/../h/Riscv.hpp ****     static void setKernelMode();
  20:src/../h/Riscv.hpp ****     static bool isUserMode();
  21:src/../h/Riscv.hpp ****     static void returnToUser();
  22:src/../h/Riscv.hpp **** 
  23:src/../h/Riscv.hpp ****     static void popSppSpie();
  24:src/../h/Riscv.hpp **** 
  25:src/../h/Riscv.hpp ****     static uint64 r_scause();
  26:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  27:src/../h/Riscv.hpp **** 
  28:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  29:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  30:src/../h/Riscv.hpp **** 
  31:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  32:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  33:src/../h/Riscv.hpp **** 
  34:src/../h/Riscv.hpp ****     static uint64 r_stval();
  35:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  36:src/../h/Riscv.hpp **** 
  37:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  38:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  39:src/../h/Riscv.hpp ****     static uint64 r_sip();
  40:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  41:src/../h/Riscv.hpp **** 
  42:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  43:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  44:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  45:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  46:src/../h/Riscv.hpp **** 
  47:src/../h/Riscv.hpp ****     enum BitMaskSip
  48:src/../h/Riscv.hpp ****     {
  49:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  50:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  51:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  52:src/../h/Riscv.hpp ****     };
  53:src/../h/Riscv.hpp **** 
  54:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  55:src/../h/Riscv.hpp ****     {
GAS LISTING /tmp/ccBqgni8.s 			page 3


  56:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  57:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  58:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  59:src/../h/Riscv.hpp ****     };
  60:src/../h/Riscv.hpp **** };
  61:src/../h/Riscv.hpp **** 
  62:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause() {
  63:src/../h/Riscv.hpp ****     uint64 volatile scause;
  64:src/../h/Riscv.hpp ****     asm volatile("csrr %0, scause" : "=r"(scause));
  65:src/../h/Riscv.hpp ****     return scause;
  66:src/../h/Riscv.hpp **** }
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
  69:src/../h/Riscv.hpp ****     asm volatile("csrw scause, %0" :: "r"(scause));
  70:src/../h/Riscv.hpp **** }
  71:src/../h/Riscv.hpp **** 
  72:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc() {
  73:src/../h/Riscv.hpp ****     uint64 volatile sepc;
  74:src/../h/Riscv.hpp ****     asm volatile("csrr %0, sepc" : "=r"(sepc));
  75:src/../h/Riscv.hpp ****     return sepc;
  76:src/../h/Riscv.hpp **** }
  77:src/../h/Riscv.hpp **** 
  78:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
  79:src/../h/Riscv.hpp ****     asm volatile("csrw sepc, %0" :: "r"(sepc));
  80:src/../h/Riscv.hpp **** }
  81:src/../h/Riscv.hpp **** 
  82:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec() {
  83:src/../h/Riscv.hpp ****     uint64 volatile stvec;
  84:src/../h/Riscv.hpp ****     asm volatile("csrr %0, stvec" : "=r"(stvec));
  85:src/../h/Riscv.hpp ****     return stvec;
  86:src/../h/Riscv.hpp **** }
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
  89:src/../h/Riscv.hpp ****     asm volatile("csrw stvec, %0" :: "r"(stvec));
  90:src/../h/Riscv.hpp **** }
  91:src/../h/Riscv.hpp **** 
  92:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval() {
  93:src/../h/Riscv.hpp ****     uint64 volatile stval;
  94:src/../h/Riscv.hpp ****     asm volatile("csrr %0, stval" : "=r"(stval));
  95:src/../h/Riscv.hpp ****     return stval;
  96:src/../h/Riscv.hpp **** }
  97:src/../h/Riscv.hpp **** 
  98:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval) {
  99:src/../h/Riscv.hpp ****     asm volatile("csrw stval, %0" :: "r"(stval));
 100:src/../h/Riscv.hpp **** }
 101:src/../h/Riscv.hpp **** 
 102:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 103:src/../h/Riscv.hpp ****     asm volatile("csrs sip, %0" :: "r"(mask));
 104:src/../h/Riscv.hpp **** }
 105:src/../h/Riscv.hpp **** 
 106:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 107:src/../h/Riscv.hpp ****     asm volatile("csrc sip, %0" :: "r"(mask));
 108:src/../h/Riscv.hpp **** }
 109:src/../h/Riscv.hpp **** 
 110:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip() {
 111:src/../h/Riscv.hpp ****     uint64 volatile sip;
 112:src/../h/Riscv.hpp ****     asm volatile("csrr %0, sip" : "=r"(sip));
GAS LISTING /tmp/ccBqgni8.s 			page 4


 113:src/../h/Riscv.hpp ****     return sip;
 114:src/../h/Riscv.hpp **** }
 115:src/../h/Riscv.hpp **** 
 116:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip) {
 117:src/../h/Riscv.hpp ****     asm volatile("csrw sip, %0" :: "r"(sip));
 118:src/../h/Riscv.hpp **** }
 119:src/../h/Riscv.hpp **** 
 120:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
 121:src/../h/Riscv.hpp ****     asm volatile("csrs sstatus, %0" :: "r"(mask));
 122:src/../h/Riscv.hpp **** }
 123:src/../h/Riscv.hpp **** 
 124:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
 125:src/../h/Riscv.hpp ****     asm volatile("csrc sstatus, %0" :: "r"(mask));
  25              		.loc 2 125 5
  26              		.loc 2 125 50 is_stmt 0
  27 000c 93070010 		li	a5,256
  28              	#APP
  29              	# 125 "src/../h/Riscv.hpp" 1
 126              	}
  30              		csrc sstatus, a5
  31              	# 0 "" 2
  32              	.LVL1:
  33              	#NO_APP
  34              	.LBE46:
  35              	.LBE45:
  37:src/Riscv.cpp **** }
  36              		.loc 1 37 1
  37 0014 03348100 		ld	s0,8(sp)
  38              		.cfi_restore 8
  39              		.cfi_def_cfa 2, 16
  40 0018 13010101 		addi	sp,sp,16
  41              		.cfi_def_cfa_offset 0
  42 001c 67800000 		jr	ra
  43              		.cfi_endproc
  44              	.LFE29:
  46              		.align	2
  47              		.globl	_ZN5Riscv13setKernelModeEv
  49              	_ZN5Riscv13setKernelModeEv:
  50              	.LFB30:
  38:src/Riscv.cpp **** 
  39:src/Riscv.cpp **** // ‚úÖ NOVO - Postavi kernel re≈æim
  40:src/Riscv.cpp **** void Riscv::setKernelMode() {
  51              		.loc 1 40 29 is_stmt 1
  52              		.cfi_startproc
  53 0020 130101FF 		addi	sp,sp,-16
  54              		.cfi_def_cfa_offset 16
  55 0024 23348100 		sd	s0,8(sp)
  56              		.cfi_offset 8, -8
  57 0028 13040101 		addi	s0,sp,16
  58              		.cfi_def_cfa 8, 0
  41:src/Riscv.cpp ****     // Postavi SPP bit (previous privilege = Supervisor mode)
  42:src/Riscv.cpp ****     ms_sstatus(SSTATUS_SPP);
  59              		.loc 1 42 5
  60              	.LVL2:
  61              	.LBB47:
  62              	.LBB48:
 121:src/../h/Riscv.hpp **** }
GAS LISTING /tmp/ccBqgni8.s 			page 5


  63              		.loc 2 121 5
 121:src/../h/Riscv.hpp **** }
  64              		.loc 2 121 50 is_stmt 0
  65 002c 93070010 		li	a5,256
  66              	#APP
  67              	# 121 "src/../h/Riscv.hpp" 1
  68              		csrs sstatus, a5
  69              	# 0 "" 2
  70              	.LVL3:
  71              	#NO_APP
  72              	.LBE48:
  73              	.LBE47:
  43:src/Riscv.cpp **** }
  74              		.loc 1 43 1
  75 0034 03348100 		ld	s0,8(sp)
  76              		.cfi_restore 8
  77              		.cfi_def_cfa 2, 16
  78 0038 13010101 		addi	sp,sp,16
  79              		.cfi_def_cfa_offset 0
  80 003c 67800000 		jr	ra
  81              		.cfi_endproc
  82              	.LFE30:
  84              		.align	2
  85              		.globl	_ZN5Riscv10isUserModeEv
  87              	_ZN5Riscv10isUserModeEv:
  88              	.LFB31:
  44:src/Riscv.cpp **** 
  45:src/Riscv.cpp **** // ‚úÖ NOVO - Proveri da li je korisniƒçki re≈æim
  46:src/Riscv.cpp **** bool Riscv::isUserMode() {
  89              		.loc 1 46 26 is_stmt 1
  90              		.cfi_startproc
  91 0040 130101FE 		addi	sp,sp,-32
  92              		.cfi_def_cfa_offset 32
  93 0044 233C8100 		sd	s0,24(sp)
  94              		.cfi_offset 8, -8
  95 0048 13040102 		addi	s0,sp,32
  96              		.cfi_def_cfa 8, 0
  47:src/Riscv.cpp ****     uint64 sstatus = r_sstatus();
  97              		.loc 1 47 5
  98              	.LBB49:
  99              	.LBB50:
 127:src/../h/Riscv.hpp **** 
 128:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus() {
 129:src/../h/Riscv.hpp ****     uint64 volatile sstatus;
 100              		.loc 2 129 5
 130:src/../h/Riscv.hpp ****     asm volatile("csrr %0, sstatus" : "=r"(sstatus));
 101              		.loc 2 130 5
 102              		.loc 2 130 53 is_stmt 0
 103              	#APP
 104              	# 130 "src/../h/Riscv.hpp" 1
 131              	    return sstatus;
 105              		csrr a5, sstatus
 106              	# 0 "" 2
 107              	#NO_APP
 108 0050 2334F4FE 		sd	a5,-24(s0)
 109              		.loc 2 131 5 is_stmt 1
 110              		.loc 2 131 12 is_stmt 0
GAS LISTING /tmp/ccBqgni8.s 			page 6


 111 0054 033584FE 		ld	a0,-24(s0)
 112              	.LVL4:
 113              	.LBE50:
 114              	.LBE49:
  48:src/Riscv.cpp ****     return (sstatus & SSTATUS_SPP) == 0;
 115              		.loc 1 48 5 is_stmt 1
 116              		.loc 1 48 21 is_stmt 0
 117 0058 13750510 		andi	a0,a0,256
 118              	.LVL5:
  49:src/Riscv.cpp **** }
 119              		.loc 1 49 1
 120 005c 13351500 		seqz	a0,a0
 121 0060 03348101 		ld	s0,24(sp)
 122              		.cfi_restore 8
 123              		.cfi_def_cfa 2, 32
 124 0064 13010102 		addi	sp,sp,32
 125              		.cfi_def_cfa_offset 0
 126 0068 67800000 		jr	ra
 127              		.cfi_endproc
 128              	.LFE31:
 130              		.align	2
 131              		.globl	_ZN5Riscv12returnToUserEv
 133              	_ZN5Riscv12returnToUserEv:
 134              	.LFB32:
  50:src/Riscv.cpp **** 
  51:src/Riscv.cpp **** // ‚úÖ NOVO - Vrati se u korisniƒçki re≈æim
  52:src/Riscv.cpp **** void Riscv::returnToUser() {
 135              		.loc 1 52 28 is_stmt 1
 136              		.cfi_startproc
 137 006c 130101FF 		addi	sp,sp,-16
 138              		.cfi_def_cfa_offset 16
 139 0070 23348100 		sd	s0,8(sp)
 140              		.cfi_offset 8, -8
 141 0074 13040101 		addi	s0,sp,16
 142              		.cfi_def_cfa 8, 0
  53:src/Riscv.cpp ****     // Postavi da sledeƒái sret ide u korisniƒçki re≈æim
  54:src/Riscv.cpp ****     mc_sstatus(SSTATUS_SPP);
 143              		.loc 1 54 5
 144              	.LVL6:
 145              	.LBB51:
 146              	.LBB52:
 125:src/../h/Riscv.hpp **** }
 147              		.loc 2 125 5
 125:src/../h/Riscv.hpp **** }
 148              		.loc 2 125 50 is_stmt 0
 149 0078 93070010 		li	a5,256
 150              	#APP
 151              	# 125 "src/../h/Riscv.hpp" 1
 152              		csrc sstatus, a5
 153              	# 0 "" 2
 154              	.LVL7:
 155              	#NO_APP
 156              	.LBE52:
 157              	.LBE51:
  55:src/Riscv.cpp **** 
  56:src/Riscv.cpp ****     // Omoguƒái prekide nakon povratka
  57:src/Riscv.cpp ****     ms_sstatus(SSTATUS_SPIE);
GAS LISTING /tmp/ccBqgni8.s 			page 7


 158              		.loc 1 57 5 is_stmt 1
 159              	.LBB53:
 160              	.LBB54:
 121:src/../h/Riscv.hpp **** }
 161              		.loc 2 121 5
 121:src/../h/Riscv.hpp **** }
 162              		.loc 2 121 50 is_stmt 0
 163 0080 93070002 		li	a5,32
 164              	#APP
 165              	# 121 "src/../h/Riscv.hpp" 1
 166              		csrs sstatus, a5
 167              	# 0 "" 2
 168              	.LVL8:
 169              	#NO_APP
 170              	.LBE54:
 171              	.LBE53:
  58:src/Riscv.cpp **** }
 172              		.loc 1 58 1
 173 0088 03348100 		ld	s0,8(sp)
 174              		.cfi_restore 8
 175              		.cfi_def_cfa 2, 16
 176 008c 13010101 		addi	sp,sp,16
 177              		.cfi_def_cfa_offset 0
 178 0090 67800000 		jr	ra
 179              		.cfi_endproc
 180              	.LFE32:
 182              		.align	2
 183              		.globl	_ZN5Riscv10popSppSpieEv
 185              	_ZN5Riscv10popSppSpieEv:
 186              	.LFB33:
  59:src/Riscv.cpp **** 
  60:src/Riscv.cpp **** void Riscv::popSppSpie()
  61:src/Riscv.cpp **** {
 187              		.loc 1 61 1 is_stmt 1
 188              		.cfi_startproc
 189 0094 130101FF 		addi	sp,sp,-16
 190              		.cfi_def_cfa_offset 16
 191 0098 23348100 		sd	s0,8(sp)
 192              		.cfi_offset 8, -8
 193 009c 13040101 		addi	s0,sp,16
 194              		.cfi_def_cfa 8, 0
  62:src/Riscv.cpp ****     mc_sstatus(SSTATUS_SPP);
 195              		.loc 1 62 5
 196              	.LVL9:
 197              	.LBB55:
 198              	.LBB56:
 125:src/../h/Riscv.hpp **** }
 199              		.loc 2 125 5
 125:src/../h/Riscv.hpp **** }
 200              		.loc 2 125 50 is_stmt 0
 201 00a0 93070010 		li	a5,256
 202              	#APP
 203              	# 125 "src/../h/Riscv.hpp" 1
 204              		csrc sstatus, a5
 205              	# 0 "" 2
 206              	.LVL10:
 207              	#NO_APP
GAS LISTING /tmp/ccBqgni8.s 			page 8


 208              	.LBE56:
 209              	.LBE55:
  63:src/Riscv.cpp ****     asm volatile("csrw sepc, ra");
 210              		.loc 1 63 5 is_stmt 1
 211              		.loc 1 63 34 is_stmt 0
 212              	#APP
 213              	# 63 "src/Riscv.cpp" 1
  64              	    asm volatile("sret");
 214              		csrw sepc, ra
 215              	# 0 "" 2
 216              		.loc 1 64 5 is_stmt 1
 217              		.loc 1 64 25 is_stmt 0
 218              	# 64 "src/Riscv.cpp" 1
  65              	}
 219              		sret
 220              	# 0 "" 2
 221              		.loc 1 65 1
 222              	#NO_APP
 223 00b0 03348100 		ld	s0,8(sp)
 224              		.cfi_restore 8
 225              		.cfi_def_cfa 2, 16
 226 00b4 13010101 		addi	sp,sp,16
 227              		.cfi_def_cfa_offset 0
 228 00b8 67800000 		jr	ra
 229              		.cfi_endproc
 230              	.LFE33:
 232              		.align	2
 233              		.globl	_ZN5Riscv16setupTrapHandlerEv
 235              	_ZN5Riscv16setupTrapHandlerEv:
 236              	.LFB34:
  66:src/Riscv.cpp **** 
  67:src/Riscv.cpp **** 
  68:src/Riscv.cpp **** void Riscv::setupTrapHandler() {
 237              		.loc 1 68 32 is_stmt 1
 238              		.cfi_startproc
 239 00bc 130101FF 		addi	sp,sp,-16
 240              		.cfi_def_cfa_offset 16
 241 00c0 23348100 		sd	s0,8(sp)
 242              		.cfi_offset 8, -8
 243 00c4 13040101 		addi	s0,sp,16
 244              		.cfi_def_cfa 8, 0
  69:src/Riscv.cpp ****     unsigned long addr = (unsigned long)&trap_handler;
 245              		.loc 1 69 5
 246              		.loc 1 69 19 is_stmt 0
 247 00c8 97070000 		la	a5,trap_handler
 247      83B70700 
 248              	.LVL11:
  70:src/Riscv.cpp ****     w_stvec(addr);
 249              		.loc 1 70 5 is_stmt 1
 250              	.LBB57:
 251              	.LBB58:
  89:src/../h/Riscv.hpp **** }
 252              		.loc 2 89 5
  89:src/../h/Riscv.hpp **** }
 253              		.loc 2 89 49 is_stmt 0
 254              	#APP
 255              	# 89 "src/../h/Riscv.hpp" 1
GAS LISTING /tmp/ccBqgni8.s 			page 9


 256              		csrw stvec, a5
 257              	# 0 "" 2
 258              	.LVL12:
 259              	#NO_APP
 260              	.LBE58:
 261              	.LBE57:
  71:src/Riscv.cpp **** }
 262              		.loc 1 71 1
 263 00d4 03348100 		ld	s0,8(sp)
 264              		.cfi_restore 8
 265              		.cfi_def_cfa 2, 16
 266 00d8 13010101 		addi	sp,sp,16
 267              		.cfi_def_cfa_offset 0
 268 00dc 67800000 		jr	ra
 269              		.cfi_endproc
 270              	.LFE34:
 272              		.align	2
 273              		.globl	_ZN5Riscv11trapHandlerEv
 275              	_ZN5Riscv11trapHandlerEv:
 276              	.LFB35:
  72:src/Riscv.cpp **** 
  73:src/Riscv.cpp **** void Riscv::trapHandler() {
 277              		.loc 1 73 27 is_stmt 1
 278              		.cfi_startproc
 279 00e0 130101FB 		addi	sp,sp,-80
 280              		.cfi_def_cfa_offset 80
 281 00e4 23341104 		sd	ra,72(sp)
 282 00e8 23308104 		sd	s0,64(sp)
 283 00ec 233C9102 		sd	s1,56(sp)
 284 00f0 23382103 		sd	s2,48(sp)
 285 00f4 23343103 		sd	s3,40(sp)
 286 00f8 23304103 		sd	s4,32(sp)
 287              		.cfi_offset 1, -8
 288              		.cfi_offset 8, -16
 289              		.cfi_offset 9, -24
 290              		.cfi_offset 18, -32
 291              		.cfi_offset 19, -40
 292              		.cfi_offset 20, -48
 293 00fc 13040105 		addi	s0,sp,80
 294              		.cfi_def_cfa 8, 0
  74:src/Riscv.cpp ****     uint64 scause = r_scause();
 295              		.loc 1 74 5
 296              	.LBB59:
 297              	.LBB60:
  63:src/../h/Riscv.hpp ****     asm volatile("csrr %0, scause" : "=r"(scause));
 298              		.loc 2 63 5
  64:src/../h/Riscv.hpp ****     return scause;
 299              		.loc 2 64 5
  64:src/../h/Riscv.hpp ****     return scause;
 300              		.loc 2 64 51 is_stmt 0
 301              	#APP
 302              	# 64 "src/../h/Riscv.hpp" 1
 303              		csrr a5, scause
 304              	# 0 "" 2
 305              	#NO_APP
 306 0104 2330F4FC 		sd	a5,-64(s0)
  65:src/../h/Riscv.hpp **** }
GAS LISTING /tmp/ccBqgni8.s 			page 10


 307              		.loc 2 65 5 is_stmt 1
  65:src/../h/Riscv.hpp **** }
 308              		.loc 2 65 12 is_stmt 0
 309 0108 833404FC 		ld	s1,-64(s0)
 310              	.LVL13:
 311              	.LBE60:
 312              	.LBE59:
  75:src/Riscv.cpp ****     uint64 sepc = r_sepc();
 313              		.loc 1 75 5 is_stmt 1
 314              	.LBB61:
 315              	.LBB62:
  73:src/../h/Riscv.hpp ****     asm volatile("csrr %0, sepc" : "=r"(sepc));
 316              		.loc 2 73 5
  74:src/../h/Riscv.hpp ****     return sepc;
 317              		.loc 2 74 5
  74:src/../h/Riscv.hpp ****     return sepc;
 318              		.loc 2 74 47 is_stmt 0
 319              	#APP
 320              	# 74 "src/../h/Riscv.hpp" 1
 321              		csrr a5, sepc
 322              	# 0 "" 2
 323              	#NO_APP
 324 0110 233CF4FA 		sd	a5,-72(s0)
  75:src/../h/Riscv.hpp **** }
 325              		.loc 2 75 5 is_stmt 1
  75:src/../h/Riscv.hpp **** }
 326              		.loc 2 75 12 is_stmt 0
 327 0114 833984FB 		ld	s3,-72(s0)
 328              	.LVL14:
 329              	.LBE62:
 330              	.LBE61:
  76:src/Riscv.cpp **** 
  77:src/Riscv.cpp ****     bool wasUserMode = !isUserMode();
 331              		.loc 1 77 5 is_stmt 1
 332              		.loc 1 77 35 is_stmt 0
 333 0118 97000000 		call	_ZN5Riscv10isUserModeEv
 333      E7800000 
 334              	.LVL15:
  78:src/Riscv.cpp **** 
  79:src/Riscv.cpp ****     uint64 interrupt = scause >> 63;
 335              		.loc 1 79 5 is_stmt 1
  80:src/Riscv.cpp ****     uint64 cause = scause & 0x7FFFFFFFFFFFFFFF;
 336              		.loc 1 80 5
 337              		.loc 1 80 12 is_stmt 0
 338 0120 9307F0FF 		li	a5,-1
 339 0124 93D71700 		srli	a5,a5,1
 340 0128 B3F7F400 		and	a5,s1,a5
 341              	.LVL16:
  81:src/Riscv.cpp **** 
  82:src/Riscv.cpp ****     if (interrupt == 0 && (cause == 8 || cause == 9)) {
 342              		.loc 1 82 5 is_stmt 1
 343              	.LBB63:
 344 012c 63CA0400 		bltz	s1,.L13
 345 0130 13090500 		mv	s2,a0
 346              		.loc 1 82 39 is_stmt 0 discriminator 1
 347 0134 938787FF 		addi	a5,a5,-8
 348              	.LVL17:
GAS LISTING /tmp/ccBqgni8.s 			page 11


 349              		.loc 1 82 24 discriminator 1
 350 0138 13071000 		li	a4,1
 351 013c 6372F702 		bleu	a5,a4,.L42
 352              	.LVL18:
 353              	.L13:
 354              	.LBE63:
  83:src/Riscv.cpp ****         uint64 sstatus = r_sstatus();
  84:src/Riscv.cpp ****         uint64 code;
  85:src/Riscv.cpp ****         asm volatile("mv %0, a0" : "=r"(code));
  86:src/Riscv.cpp **** 
  87:src/Riscv.cpp ****         switch (code) {
  88:src/Riscv.cpp ****             case MEM_ALLOC: {
  89:src/Riscv.cpp ****                 size_t size;
  90:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
  91:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(size));
  92:src/Riscv.cpp ****                 void* ptr = MemoryAllocator::mem_alloc(size);
  93:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(ptr));
  94:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
  95:src/Riscv.cpp ****                 break;
  96:src/Riscv.cpp ****             }
  97:src/Riscv.cpp ****             case MEM_FREE: {
  98:src/Riscv.cpp ****                 void* addr;
  99:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 100:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(addr));
 101:src/Riscv.cpp ****                 int status = MemoryAllocator::mem_free(addr);
 102:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(status));
 103:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 104:src/Riscv.cpp ****                 break;
 105:src/Riscv.cpp ****             }
 106:src/Riscv.cpp ****             case MEM_GET_FREE_SPACE: {
 107:src/Riscv.cpp ****                 size_t freeSpace = MemoryAllocator::mem_get_free_space();
 108:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(freeSpace));
 109:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 110:src/Riscv.cpp ****                 break;
 111:src/Riscv.cpp ****             }
 112:src/Riscv.cpp ****             case MEM_GET_LARGEST_FREE_BLOCK: {
 113:src/Riscv.cpp ****                 size_t largest = MemoryAllocator::mem_get_largest_free_block();
 114:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(largest));
 115:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 116:src/Riscv.cpp ****                 break;
 117:src/Riscv.cpp ****             }
 118:src/Riscv.cpp ****             case USER_MODE: {
 119:src/Riscv.cpp ****                 mc_sstatus(SSTATUS_SPP);
 120:src/Riscv.cpp ****                 break;
 121:src/Riscv.cpp ****            }
 122:src/Riscv.cpp ****             case KERNEL_MODE: {
 123:src/Riscv.cpp ****                 ms_sstatus(SSTATUS_SPP);
 124:src/Riscv.cpp ****                 break;
 125:src/Riscv.cpp ****             }
 126:src/Riscv.cpp ****             case THREAD_CREATE: {
 127:src/Riscv.cpp ****                 KThread** handle = nullptr;
 128:src/Riscv.cpp ****                 void (*start_routine)(void*) = nullptr;
 129:src/Riscv.cpp ****                 void* args = nullptr;
 130:src/Riscv.cpp ****                 void* stack = nullptr;
 131:src/Riscv.cpp **** 
 132:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 133:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
GAS LISTING /tmp/ccBqgni8.s 			page 12


 134:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 135:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(start_routine));
 136:src/Riscv.cpp ****                 asm volatile("ld a3, 13*8(%0)" :: "r"(framePointer));
 137:src/Riscv.cpp ****                 asm volatile("mv %0, a3" : "=r"(args));
 138:src/Riscv.cpp ****                 asm volatile("ld a4, 14*8(%0)" :: "r"(framePointer));
 139:src/Riscv.cpp ****                 asm volatile("mv %0, a4" : "=r"(stack));
 140:src/Riscv.cpp **** 
 141:src/Riscv.cpp ****                 *handle = KThread::createThread(start_routine, args, stack);
 142:src/Riscv.cpp **** 
 143:src/Riscv.cpp ****                 if (*handle != nullptr) {
 144:src/Riscv.cpp ****                     (*handle)->start();
 145:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 146:src/Riscv.cpp ****                 }
 147:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 148:src/Riscv.cpp **** 
 149:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 150:src/Riscv.cpp **** 
 151:src/Riscv.cpp ****                 break;
 152:src/Riscv.cpp ****             }
 153:src/Riscv.cpp ****             case THREAD_EXIT: {
 154:src/Riscv.cpp ****                 if (KThread::running) {
 155:src/Riscv.cpp ****                     KThread::running->exit();
 156:src/Riscv.cpp ****                 }
 157:src/Riscv.cpp **** 
 158:src/Riscv.cpp ****                 KThread::dispatch();
 159:src/Riscv.cpp **** 
 160:src/Riscv.cpp ****                 asm volatile("li a0, 0");
 161:src/Riscv.cpp **** 
 162:src/Riscv.cpp ****                 break;
 163:src/Riscv.cpp ****             }
 164:src/Riscv.cpp ****             case THREAD_DISPATCH: {
 165:src/Riscv.cpp ****                 KThread::dispatch();
 166:src/Riscv.cpp **** 
 167:src/Riscv.cpp ****                 break;
 168:src/Riscv.cpp ****             }
 169:src/Riscv.cpp ****             case SEM_OPEN: {
 170:src/Riscv.cpp ****                 KSemaphore** handle = nullptr;
 171:src/Riscv.cpp ****                 unsigned init;
 172:src/Riscv.cpp **** 
 173:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 174:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 175:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 176:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(init));
 177:src/Riscv.cpp **** 
 178:src/Riscv.cpp ****                 *handle = KSemaphore::createSemaphore(init);
 179:src/Riscv.cpp **** 
 180:src/Riscv.cpp ****                 if (*handle != nullptr) asm volatile("li a0, 0");
 181:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 182:src/Riscv.cpp **** 
 183:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 184:src/Riscv.cpp **** 
 185:src/Riscv.cpp ****                 break;
 186:src/Riscv.cpp ****             }
 187:src/Riscv.cpp ****             case SEM_CLOSE: {
 188:src/Riscv.cpp ****                 KSemaphore* handle = nullptr;
 189:src/Riscv.cpp **** 
 190:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
GAS LISTING /tmp/ccBqgni8.s 			page 13


 191:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 192:src/Riscv.cpp **** 
 193:src/Riscv.cpp ****                 if (handle) {
 194:src/Riscv.cpp ****                     handle->close();
 195:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 196:src/Riscv.cpp ****                 }
 197:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 198:src/Riscv.cpp **** 
 199:src/Riscv.cpp ****                 break;
 200:src/Riscv.cpp ****             }
 201:src/Riscv.cpp ****             case SEM_WAIT: {
 202:src/Riscv.cpp ****                 KSemaphore* handle = nullptr;
 203:src/Riscv.cpp **** 
 204:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 205:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 206:src/Riscv.cpp **** 
 207:src/Riscv.cpp ****                 if (handle) {
 208:src/Riscv.cpp ****                     handle->wait();
 209:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 210:src/Riscv.cpp ****                 }
 211:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 212:src/Riscv.cpp **** 
 213:src/Riscv.cpp ****                 break;
 214:src/Riscv.cpp ****             }
 215:src/Riscv.cpp ****             case SEM_SIGNAL: {
 216:src/Riscv.cpp ****                 KSemaphore* handle = nullptr;
 217:src/Riscv.cpp **** 
 218:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 219:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 220:src/Riscv.cpp **** 
 221:src/Riscv.cpp ****                 if (handle) {
 222:src/Riscv.cpp ****                     handle->signal();
 223:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 224:src/Riscv.cpp ****                 }
 225:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 226:src/Riscv.cpp **** 
 227:src/Riscv.cpp ****                 break;
 228:src/Riscv.cpp ****             }
 229:src/Riscv.cpp ****             case GETC: {
 230:src/Riscv.cpp ****                 char c = __getc();
 231:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(c));
 232:src/Riscv.cpp ****                 break;
 233:src/Riscv.cpp ****             }
 234:src/Riscv.cpp ****             case PUTC: {
 235:src/Riscv.cpp ****                 char c;
 236:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(c));
 237:src/Riscv.cpp ****                 __putc(c);
 238:src/Riscv.cpp ****                 break;
 239:src/Riscv.cpp ****             }
 240:src/Riscv.cpp ****             default:
 241:src/Riscv.cpp ****                 break;
 242:src/Riscv.cpp ****         }
 243:src/Riscv.cpp **** 
 244:src/Riscv.cpp ****         sepc += 4;
 245:src/Riscv.cpp ****         w_sepc(sepc);
 246:src/Riscv.cpp ****         if (wasUserMode) {
 247:src/Riscv.cpp ****             returnToUser();
GAS LISTING /tmp/ccBqgni8.s 			page 14


 248:src/Riscv.cpp ****         }
 249:src/Riscv.cpp ****         w_sstatus(sstatus);
 250:src/Riscv.cpp ****     }
 251:src/Riscv.cpp **** }...
 355              		.loc 1 251 1
 356 0140 83308104 		ld	ra,72(sp)
 357              		.cfi_remember_state
 358              		.cfi_restore 1
 359 0144 03340104 		ld	s0,64(sp)
 360              		.cfi_restore 8
 361              		.cfi_def_cfa 2, 80
 362 0148 83348103 		ld	s1,56(sp)
 363              		.cfi_restore 9
 364 014c 03390103 		ld	s2,48(sp)
 365              		.cfi_restore 18
 366 0150 83398102 		ld	s3,40(sp)
 367              		.cfi_restore 19
 368              	.LVL19:
 369 0154 033A0102 		ld	s4,32(sp)
 370              		.cfi_restore 20
 371 0158 13010105 		addi	sp,sp,80
 372              		.cfi_def_cfa_offset 0
 373 015c 67800000 		jr	ra
 374              	.LVL20:
 375              	.L42:
 376              		.cfi_restore_state
 377              	.LBB89:
 378              	.LBB64:
  83:src/Riscv.cpp ****         uint64 sstatus = r_sstatus();
 379              		.loc 1 83 9 is_stmt 1
 380              	.LBB65:
 381              	.LBB66:
 129:src/../h/Riscv.hpp ****     asm volatile("csrr %0, sstatus" : "=r"(sstatus));
 382              		.loc 2 129 5
 130:src/../h/Riscv.hpp ****     return sstatus;
 383              		.loc 2 130 5
 130:src/../h/Riscv.hpp ****     return sstatus;
 384              		.loc 2 130 53 is_stmt 0
 385              	#APP
 386              	# 130 "src/../h/Riscv.hpp" 1
 387              		csrr a5, sstatus
 388              	# 0 "" 2
 389              	.LVL21:
 390              	#NO_APP
 391 0164 2334F4FC 		sd	a5,-56(s0)
 392              		.loc 2 131 5 is_stmt 1
 393              		.loc 2 131 12 is_stmt 0
 394 0168 833484FC 		ld	s1,-56(s0)
 395              	.LVL22:
 396              	.LBE66:
 397              	.LBE65:
  84:src/Riscv.cpp ****         uint64 code;
 398              		.loc 1 84 9 is_stmt 1
  85:src/Riscv.cpp ****         asm volatile("mv %0, a0" : "=r"(code));
 399              		.loc 1 85 9
  85:src/Riscv.cpp ****         asm volatile("mv %0, a0" : "=r"(code));
 400              		.loc 1 85 47 is_stmt 0
GAS LISTING /tmp/ccBqgni8.s 			page 15


 401              	#APP
 402              	# 85 "src/Riscv.cpp" 1
 403              		mv a5, a0
 404              	# 0 "" 2
 405              	.LVL23:
  87:src/Riscv.cpp ****         switch (code) {
 406              		.loc 1 87 9 is_stmt 1
 407              	#NO_APP
 408 0170 13072004 		li	a4,66
 409 0174 6364F704 		bgtu	a5,a4,.L15
 410 0178 93972700 		slli	a5,a5,2
 411              	.LVL24:
 412 017c 17070000 		lla	a4,.L17
 412      13070700 
 413 0184 B387E700 		add	a5,a5,a4
 414 0188 83A70700 		lw	a5,0(a5)
 415 018c B387E700 		add	a5,a5,a4
 416 0190 67800700 		jr	a5
 417              		.section	.rodata
 418              		.align	2
 419              		.align	2
 420              	.L17:
 421 0000 00000000 		.word	.L15-.L17
 422 0004 00000000 		.word	.L31-.L17
 423 0008 00000000 		.word	.L30-.L17
 424 000c 00000000 		.word	.L29-.L17
 425 0010 00000000 		.word	.L28-.L17
 426 0014 00000000 		.word	.L15-.L17
 427 0018 00000000 		.word	.L15-.L17
 428 001c 00000000 		.word	.L15-.L17
 429 0020 00000000 		.word	.L27-.L17
 430 0024 00000000 		.word	.L26-.L17
 431 0028 00000000 		.word	.L15-.L17
 432 002c 00000000 		.word	.L15-.L17
 433 0030 00000000 		.word	.L15-.L17
 434 0034 00000000 		.word	.L15-.L17
 435 0038 00000000 		.word	.L15-.L17
 436 003c 00000000 		.word	.L15-.L17
 437 0040 00000000 		.word	.L15-.L17
 438 0044 00000000 		.word	.L25-.L17
 439 0048 00000000 		.word	.L24-.L17
 440 004c 00000000 		.word	.L23-.L17
 441 0050 00000000 		.word	.L15-.L17
 442 0054 00000000 		.word	.L15-.L17
 443 0058 00000000 		.word	.L15-.L17
 444 005c 00000000 		.word	.L15-.L17
 445 0060 00000000 		.word	.L15-.L17
 446 0064 00000000 		.word	.L15-.L17
 447 0068 00000000 		.word	.L15-.L17
 448 006c 00000000 		.word	.L15-.L17
 449 0070 00000000 		.word	.L15-.L17
 450 0074 00000000 		.word	.L15-.L17
 451 0078 00000000 		.word	.L15-.L17
 452 007c 00000000 		.word	.L15-.L17
 453 0080 00000000 		.word	.L15-.L17
 454 0084 00000000 		.word	.L22-.L17
 455 0088 00000000 		.word	.L21-.L17
GAS LISTING /tmp/ccBqgni8.s 			page 16


 456 008c 00000000 		.word	.L20-.L17
 457 0090 00000000 		.word	.L19-.L17
 458 0094 00000000 		.word	.L15-.L17
 459 0098 00000000 		.word	.L15-.L17
 460 009c 00000000 		.word	.L15-.L17
 461 00a0 00000000 		.word	.L15-.L17
 462 00a4 00000000 		.word	.L15-.L17
 463 00a8 00000000 		.word	.L15-.L17
 464 00ac 00000000 		.word	.L15-.L17
 465 00b0 00000000 		.word	.L15-.L17
 466 00b4 00000000 		.word	.L15-.L17
 467 00b8 00000000 		.word	.L15-.L17
 468 00bc 00000000 		.word	.L15-.L17
 469 00c0 00000000 		.word	.L15-.L17
 470 00c4 00000000 		.word	.L15-.L17
 471 00c8 00000000 		.word	.L15-.L17
 472 00cc 00000000 		.word	.L15-.L17
 473 00d0 00000000 		.word	.L15-.L17
 474 00d4 00000000 		.word	.L15-.L17
 475 00d8 00000000 		.word	.L15-.L17
 476 00dc 00000000 		.word	.L15-.L17
 477 00e0 00000000 		.word	.L15-.L17
 478 00e4 00000000 		.word	.L15-.L17
 479 00e8 00000000 		.word	.L15-.L17
 480 00ec 00000000 		.word	.L15-.L17
 481 00f0 00000000 		.word	.L15-.L17
 482 00f4 00000000 		.word	.L15-.L17
 483 00f8 00000000 		.word	.L15-.L17
 484 00fc 00000000 		.word	.L15-.L17
 485 0100 00000000 		.word	.L15-.L17
 486 0104 00000000 		.word	.L18-.L17
 487 0108 00000000 		.word	.L16-.L17
 488              		.text
 489              	.L31:
 490              	.LBB67:
  88:src/Riscv.cpp ****             case MEM_ALLOC: {
 491              		.loc 1 88 13
  88:src/Riscv.cpp ****             case MEM_ALLOC: {
 492              		.loc 1 88 29
 493              	.LBB68:
  89:src/Riscv.cpp ****                 size_t size;
 494              		.loc 1 89 17
  90:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 495              		.loc 1 90 17
  90:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 496              		.loc 1 90 69 is_stmt 0
 497 0194 170A0000 		la	s4,framePointer
 497      033A0A00 
 498 019c 83370A00 		ld	a5,0(s4)
 499              	#APP
 500              	# 90 "src/Riscv.cpp" 1
  91:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(size));
 501              		ld a1, 11*8(a5)
 502              	# 0 "" 2
 503              		.loc 1 91 17 is_stmt 1
  91:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(size));
 504              		.loc 1 91 55 is_stmt 0
GAS LISTING /tmp/ccBqgni8.s 			page 17


 505              	# 91 "src/Riscv.cpp" 1
 506              		mv a0, a1
 507              	# 0 "" 2
 508              	.LVL25:
  92:src/Riscv.cpp ****                 void* ptr = MemoryAllocator::mem_alloc(size);
 509              		.loc 1 92 17 is_stmt 1
  92:src/Riscv.cpp ****                 void* ptr = MemoryAllocator::mem_alloc(size);
 510              		.loc 1 92 55 is_stmt 0
 511              	#NO_APP
 512 01a8 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 512      E7800000 
 513              	.LVL26:
  93:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(ptr));
 514              		.loc 1 93 17 is_stmt 1
  93:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(ptr));
 515              		.loc 1 93 54 is_stmt 0
 516              	#APP
 517              	# 93 "src/Riscv.cpp" 1
  94:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 518              		mv a0, a0
 519              	# 0 "" 2
 520              		.loc 1 94 17 is_stmt 1
  94:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 521              		.loc 1 94 69 is_stmt 0
 522              	#NO_APP
 523 01b4 83370A00 		ld	a5,0(s4)
 524              	#APP
 525              	# 94 "src/Riscv.cpp" 1
  95:src/Riscv.cpp ****                 break;
 526              		sd a0, 10*8(a5)
 527              	# 0 "" 2
 528              		.loc 1 95 17 is_stmt 1
 529              	.LVL27:
 530              	#NO_APP
 531              	.L15:
 532              	.LBE68:
 533              	.LBE67:
 244:src/Riscv.cpp ****         sepc += 4;
 534              		.loc 1 244 9
 244:src/Riscv.cpp ****         sepc += 4;
 535              		.loc 1 244 14 is_stmt 0
 536 01bc 93894900 		addi	s3,s3,4
 537              	.LVL28:
 245:src/Riscv.cpp ****         w_sepc(sepc);
 538              		.loc 1 245 9 is_stmt 1
 539              	.LBB83:
 540              	.LBB84:
  79:src/../h/Riscv.hpp **** }
 541              		.loc 2 79 5
  79:src/../h/Riscv.hpp **** }
 542              		.loc 2 79 47 is_stmt 0
 543              	#APP
 544              	# 79 "src/../h/Riscv.hpp" 1
 545              		csrw sepc, s3
 546              	# 0 "" 2
 547              	.LVL29:
 548              	#NO_APP
GAS LISTING /tmp/ccBqgni8.s 			page 18


 549              	.LBE84:
 550              	.LBE83:
 246:src/Riscv.cpp ****         if (wasUserMode) {
 551              		.loc 1 246 9 is_stmt 1
 552 01c4 63080922 		beqz	s2,.L43
 553              	.L40:
 249:src/Riscv.cpp ****         w_sstatus(sstatus);
 554              		.loc 1 249 9
 555              	.LVL30:
 556              	.LBB85:
 557              	.LBB86:
 132:src/../h/Riscv.hpp **** }
 133:src/../h/Riscv.hpp **** 
 134:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus) {
 135:src/../h/Riscv.hpp ****     asm volatile("csrw sstatus, %0" :: "r"(sstatus));
 558              		.loc 2 135 5
 559              		.loc 2 135 53 is_stmt 0
 560              	#APP
 561              	# 135 "src/../h/Riscv.hpp" 1
 136              	}
 562              		csrw sstatus, s1
 563              	# 0 "" 2
 564              	.LVL31:
 565              	#NO_APP
 566              	.LBE86:
 567              	.LBE85:
 568              	.LBE64:
 569              	.LBE89:
 570              		.loc 1 251 1
 571 01cc 6FF05FF7 		j	.L13
 572              	.LVL32:
 573              	.L30:
 574              	.LBB90:
 575              	.LBB88:
 576              	.LBB87:
  97:src/Riscv.cpp ****             case MEM_FREE: {
 577              		.loc 1 97 13 is_stmt 1
  97:src/Riscv.cpp ****             case MEM_FREE: {
 578              		.loc 1 97 28
 579              	.LBB69:
  98:src/Riscv.cpp ****                 void* addr;
 580              		.loc 1 98 17
  99:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 581              		.loc 1 99 17
  99:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 582              		.loc 1 99 69 is_stmt 0
 583 01d0 170A0000 		la	s4,framePointer
 583      033A0A00 
 584 01d8 83370A00 		ld	a5,0(s4)
 585              	#APP
 586              	# 99 "src/Riscv.cpp" 1
 100:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(addr));
 587              		ld a1, 11*8(a5)
 588              	# 0 "" 2
 589              		.loc 1 100 17 is_stmt 1
 100:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(addr));
 590              		.loc 1 100 55 is_stmt 0
GAS LISTING /tmp/ccBqgni8.s 			page 19


 591              	# 100 "src/Riscv.cpp" 1
 592              		mv a0, a1
 593              	# 0 "" 2
 594              	.LVL33:
 101:src/Riscv.cpp ****                 int status = MemoryAllocator::mem_free(addr);
 595              		.loc 1 101 17 is_stmt 1
 101:src/Riscv.cpp ****                 int status = MemoryAllocator::mem_free(addr);
 596              		.loc 1 101 55 is_stmt 0
 597              	#NO_APP
 598 01e4 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 598      E7800000 
 599              	.LVL34:
 102:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(status));
 600              		.loc 1 102 17 is_stmt 1
 102:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(status));
 601              		.loc 1 102 57 is_stmt 0
 602              	#APP
 603              	# 102 "src/Riscv.cpp" 1
 103:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 604              		mv a0, a0
 605              	# 0 "" 2
 606              		.loc 1 103 17 is_stmt 1
 103:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 607              		.loc 1 103 69 is_stmt 0
 608              	#NO_APP
 609 01f0 83370A00 		ld	a5,0(s4)
 610              	#APP
 611              	# 103 "src/Riscv.cpp" 1
 104:src/Riscv.cpp ****                 break;
 612              		sd a0, 10*8(a5)
 613              	# 0 "" 2
 614              		.loc 1 104 17 is_stmt 1
 615              	#NO_APP
 616 01f8 6FF05FFC 		j	.L15
 617              	.LVL35:
 618              	.L29:
 619              	.LBE69:
 106:src/Riscv.cpp ****             case MEM_GET_FREE_SPACE: {
 620              		.loc 1 106 13
 106:src/Riscv.cpp ****             case MEM_GET_FREE_SPACE: {
 621              		.loc 1 106 38
 622              	.LBB70:
 107:src/Riscv.cpp ****                 size_t freeSpace = MemoryAllocator::mem_get_free_space();
 623              		.loc 1 107 17
 107:src/Riscv.cpp ****                 size_t freeSpace = MemoryAllocator::mem_get_free_space();
 624              		.loc 1 107 71 is_stmt 0
 625 01fc 97000000 		call	_ZN15MemoryAllocator18mem_get_free_spaceEv@plt
 625      E7800000 
 626              	.LVL36:
 108:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(freeSpace));
 627              		.loc 1 108 17 is_stmt 1
 108:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(freeSpace));
 628              		.loc 1 108 60 is_stmt 0
 629              	#APP
 630              	# 108 "src/Riscv.cpp" 1
 109:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 631              		mv a0, a0
GAS LISTING /tmp/ccBqgni8.s 			page 20


 632              	# 0 "" 2
 633              		.loc 1 109 17 is_stmt 1
 109:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 634              		.loc 1 109 69 is_stmt 0
 635              	#NO_APP
 636 0208 97070000 		la	a5,framePointer
 636      83B70700 
 637 0210 83B70700 		ld	a5,0(a5)
 638              	#APP
 639              	# 109 "src/Riscv.cpp" 1
 110:src/Riscv.cpp ****                 break;
 640              		sd a0, 10*8(a5)
 641              	# 0 "" 2
 642              		.loc 1 110 17 is_stmt 1
 643              	#NO_APP
 644 0218 6FF05FFA 		j	.L15
 645              	.LVL37:
 646              	.L28:
 647              	.LBE70:
 112:src/Riscv.cpp ****             case MEM_GET_LARGEST_FREE_BLOCK: {
 648              		.loc 1 112 13
 112:src/Riscv.cpp ****             case MEM_GET_LARGEST_FREE_BLOCK: {
 649              		.loc 1 112 46
 650              	.LBB71:
 113:src/Riscv.cpp ****                 size_t largest = MemoryAllocator::mem_get_largest_free_block();
 651              		.loc 1 113 17
 113:src/Riscv.cpp ****                 size_t largest = MemoryAllocator::mem_get_largest_free_block();
 652              		.loc 1 113 77 is_stmt 0
 653 021c 97000000 		call	_ZN15MemoryAllocator26mem_get_largest_free_blockEv@plt
 653      E7800000 
 654              	.LVL38:
 114:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(largest));
 655              		.loc 1 114 17 is_stmt 1
 114:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(largest));
 656              		.loc 1 114 58 is_stmt 0
 657              	#APP
 658              	# 114 "src/Riscv.cpp" 1
 115:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 659              		mv a0, a0
 660              	# 0 "" 2
 661              		.loc 1 115 17 is_stmt 1
 115:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 662              		.loc 1 115 69 is_stmt 0
 663              	#NO_APP
 664 0228 97070000 		la	a5,framePointer
 664      83B70700 
 665 0230 83B70700 		ld	a5,0(a5)
 666              	#APP
 667              	# 115 "src/Riscv.cpp" 1
 116:src/Riscv.cpp ****                 break;
 668              		sd a0, 10*8(a5)
 669              	# 0 "" 2
 670              		.loc 1 116 17 is_stmt 1
 671              	#NO_APP
 672 0238 6FF05FF8 		j	.L15
 673              	.LVL39:
 674              	.L27:
GAS LISTING /tmp/ccBqgni8.s 			page 21


 675              	.LBE71:
 118:src/Riscv.cpp ****             case USER_MODE: {
 676              		.loc 1 118 13
 118:src/Riscv.cpp ****             case USER_MODE: {
 677              		.loc 1 118 29
 119:src/Riscv.cpp ****                 mc_sstatus(SSTATUS_SPP);
 678              		.loc 1 119 17
 679              	.LBB72:
 680              	.LBB73:
 125:src/../h/Riscv.hpp **** }
 681              		.loc 2 125 5
 125:src/../h/Riscv.hpp **** }
 682              		.loc 2 125 50 is_stmt 0
 683 023c 93070010 		li	a5,256
 684              	#APP
 685              	# 125 "src/../h/Riscv.hpp" 1
 126:src/../h/Riscv.hpp **** 
 686              		csrc sstatus, a5
 687              	# 0 "" 2
 688              		.loc 2 126 1
 689              	#NO_APP
 690 0244 6FF09FF7 		j	.L15
 691              	.LVL40:
 692              	.L26:
 693              	.LBE73:
 694              	.LBE72:
 122:src/Riscv.cpp ****             case KERNEL_MODE: {
 695              		.loc 1 122 13 is_stmt 1
 122:src/Riscv.cpp ****             case KERNEL_MODE: {
 696              		.loc 1 122 31
 123:src/Riscv.cpp ****                 ms_sstatus(SSTATUS_SPP);
 697              		.loc 1 123 17
 698              	.LBB74:
 699              	.LBB75:
 121:src/../h/Riscv.hpp **** }
 700              		.loc 2 121 5
 121:src/../h/Riscv.hpp **** }
 701              		.loc 2 121 50 is_stmt 0
 702 0248 93070010 		li	a5,256
 703              	#APP
 704              	# 121 "src/../h/Riscv.hpp" 1
 122:src/../h/Riscv.hpp **** 
 705              		csrs sstatus, a5
 706              	# 0 "" 2
 707              		.loc 2 122 1
 708              	#NO_APP
 709 0250 6FF0DFF6 		j	.L15
 710              	.LVL41:
 711              	.L25:
 712              	.LBE75:
 713              	.LBE74:
 126:src/Riscv.cpp ****             case THREAD_CREATE: {
 714              		.loc 1 126 13 is_stmt 1
 126:src/Riscv.cpp ****             case THREAD_CREATE: {
 715              		.loc 1 126 33
 716              	.LBB76:
 127:src/Riscv.cpp ****                 KThread** handle = nullptr;
GAS LISTING /tmp/ccBqgni8.s 			page 22


 717              		.loc 1 127 17
 128:src/Riscv.cpp ****                 void (*start_routine)(void*) = nullptr;
 718              		.loc 1 128 17
 129:src/Riscv.cpp ****                 void* args = nullptr;
 719              		.loc 1 129 17
 130:src/Riscv.cpp ****                 void* stack = nullptr;
 720              		.loc 1 130 17
 132:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 721              		.loc 1 132 17
 132:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 722              		.loc 1 132 69 is_stmt 0
 723 0254 97070000 		la	a5,framePointer
 723      83B70700 
 724 025c 83B70700 		ld	a5,0(a5)
 725              	#APP
 726              	# 132 "src/Riscv.cpp" 1
 133:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 727              		ld a1, 11*8(a5)
 728              	# 0 "" 2
 729              		.loc 1 133 17 is_stmt 1
 133:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 730              		.loc 1 133 57 is_stmt 0
 731              	# 133 "src/Riscv.cpp" 1
 732              		mv s4, a1
 733              	# 0 "" 2
 734              	.LVL42:
 134:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 735              		.loc 1 134 17 is_stmt 1
 134:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 736              		.loc 1 134 69 is_stmt 0
 737              	# 134 "src/Riscv.cpp" 1
 135:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(start_routine));
 738              		ld a2, 12*8(a5)
 739              	# 0 "" 2
 740              		.loc 1 135 17 is_stmt 1
 135:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(start_routine));
 741              		.loc 1 135 64 is_stmt 0
 742              	# 135 "src/Riscv.cpp" 1
 743              		mv a0, a2
 744              	# 0 "" 2
 745              	.LVL43:
 136:src/Riscv.cpp ****                 asm volatile("ld a3, 13*8(%0)" :: "r"(framePointer));
 746              		.loc 1 136 17 is_stmt 1
 136:src/Riscv.cpp ****                 asm volatile("ld a3, 13*8(%0)" :: "r"(framePointer));
 747              		.loc 1 136 69 is_stmt 0
 748              	# 136 "src/Riscv.cpp" 1
 137:src/Riscv.cpp ****                 asm volatile("mv %0, a3" : "=r"(args));
 749              		ld a3, 13*8(a5)
 750              	# 0 "" 2
 751              		.loc 1 137 17 is_stmt 1
 137:src/Riscv.cpp ****                 asm volatile("mv %0, a3" : "=r"(args));
 752              		.loc 1 137 55 is_stmt 0
 753              	# 137 "src/Riscv.cpp" 1
 754              		mv a1, a3
 755              	# 0 "" 2
 756              	.LVL44:
 138:src/Riscv.cpp ****                 asm volatile("ld a4, 14*8(%0)" :: "r"(framePointer));
GAS LISTING /tmp/ccBqgni8.s 			page 23


 757              		.loc 1 138 17 is_stmt 1
 138:src/Riscv.cpp ****                 asm volatile("ld a4, 14*8(%0)" :: "r"(framePointer));
 758              		.loc 1 138 69 is_stmt 0
 759              	# 138 "src/Riscv.cpp" 1
 139:src/Riscv.cpp ****                 asm volatile("mv %0, a4" : "=r"(stack));
 760              		ld a4, 14*8(a5)
 761              	# 0 "" 2
 762              		.loc 1 139 17 is_stmt 1
 139:src/Riscv.cpp ****                 asm volatile("mv %0, a4" : "=r"(stack));
 763              		.loc 1 139 56 is_stmt 0
 764              	# 139 "src/Riscv.cpp" 1
 765              		mv a2, a4
 766              	# 0 "" 2
 767              	.LVL45:
 141:src/Riscv.cpp ****                 *handle = KThread::createThread(start_routine, args, stack);
 768              		.loc 1 141 17 is_stmt 1
 141:src/Riscv.cpp ****                 *handle = KThread::createThread(start_routine, args, stack);
 769              		.loc 1 141 48 is_stmt 0
 770              	#NO_APP
 771 0280 97000000 		call	_ZN7KThread12createThreadEPFvPvES0_S0_@plt
 771      E7800000 
 772              	.LVL46:
 141:src/Riscv.cpp ****                 *handle = KThread::createThread(start_routine, args, stack);
 773              		.loc 1 141 25
 774 0288 2330AA00 		sd	a0,0(s4)
 143:src/Riscv.cpp ****                 if (*handle != nullptr) {
 775              		.loc 1 143 17 is_stmt 1
 776 028c 63020502 		beqz	a0,.L32
 144:src/Riscv.cpp ****                     (*handle)->start();
 777              		.loc 1 144 21
 144:src/Riscv.cpp ****                     (*handle)->start();
 778              		.loc 1 144 37 is_stmt 0
 779 0290 97000000 		call	_ZN7KThread5startEv@plt
 779      E7800000 
 780              	.LVL47:
 145:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 781              		.loc 1 145 21 is_stmt 1
 145:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 782              		.loc 1 145 45 is_stmt 0
 783              	#APP
 784              	# 145 "src/Riscv.cpp" 1
 785              		li a0, 0
 786              	# 0 "" 2
 787              	#NO_APP
 788              	.L33:
 149:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 789              		.loc 1 149 17 is_stmt 1
 149:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 790              		.loc 1 149 69 is_stmt 0
 791 029c 97070000 		la	a5,framePointer
 791      83B70700 
 792 02a4 83B70700 		ld	a5,0(a5)
 793              	#APP
 794              	# 149 "src/Riscv.cpp" 1
 151:src/Riscv.cpp ****                 break;
 795              		sd a0, 10*8(a5)
 796              	# 0 "" 2
GAS LISTING /tmp/ccBqgni8.s 			page 24


 797              		.loc 1 151 17 is_stmt 1
 798              	#NO_APP
 799 02ac 6FF01FF1 		j	.L15
 800              	.L32:
 147:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 801              		.loc 1 147 22
 147:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 802              		.loc 1 147 47 is_stmt 0
 803              	#APP
 804              	# 147 "src/Riscv.cpp" 1
 805              		li a0, -1
 806              	# 0 "" 2
 807              	#NO_APP
 808 02b4 6FF09FFE 		j	.L33
 809              	.LVL48:
 810              	.L24:
 811              	.LBE76:
 153:src/Riscv.cpp ****             case THREAD_EXIT: {
 812              		.loc 1 153 13 is_stmt 1
 153:src/Riscv.cpp ****             case THREAD_EXIT: {
 813              		.loc 1 153 31
 154:src/Riscv.cpp ****                 if (KThread::running) {
 814              		.loc 1 154 17
 154:src/Riscv.cpp ****                 if (KThread::running) {
 815              		.loc 1 154 37 is_stmt 0
 816 02b8 97070000 		la	a5,_ZN7KThread7runningE
 816      83B70700 
 817 02c0 03B50700 		ld	a0,0(a5)
 818              	.LVL49:
 154:src/Riscv.cpp ****                 if (KThread::running) {
 819              		.loc 1 154 17
 820 02c4 63060500 		beqz	a0,.L34
 155:src/Riscv.cpp ****                     KThread::running->exit();
 821              		.loc 1 155 21 is_stmt 1
 155:src/Riscv.cpp ****                     KThread::running->exit();
 822              		.loc 1 155 43 is_stmt 0
 823 02c8 97000000 		call	_ZN7KThread4exitEv@plt
 823      E7800000 
 824              	.LVL50:
 825              	.L34:
 158:src/Riscv.cpp ****                 KThread::dispatch();
 826              		.loc 1 158 17 is_stmt 1
 158:src/Riscv.cpp ****                 KThread::dispatch();
 827              		.loc 1 158 34 is_stmt 0
 828 02d0 97000000 		call	_ZN7KThread8dispatchEv@plt
 828      E7800000 
 829              	.LVL51:
 160:src/Riscv.cpp ****                 asm volatile("li a0, 0");
 830              		.loc 1 160 17 is_stmt 1
 160:src/Riscv.cpp ****                 asm volatile("li a0, 0");
 831              		.loc 1 160 41 is_stmt 0
 832              	#APP
 833              	# 160 "src/Riscv.cpp" 1
 162:src/Riscv.cpp ****                 break;
 834              		li a0, 0
 835              	# 0 "" 2
 836              		.loc 1 162 17 is_stmt 1
GAS LISTING /tmp/ccBqgni8.s 			page 25


 837              	#NO_APP
 838 02dc 6FF01FEE 		j	.L15
 839              	.LVL52:
 840              	.L23:
 164:src/Riscv.cpp ****             case THREAD_DISPATCH: {
 841              		.loc 1 164 13
 164:src/Riscv.cpp ****             case THREAD_DISPATCH: {
 842              		.loc 1 164 35
 165:src/Riscv.cpp ****                 KThread::dispatch();
 843              		.loc 1 165 17
 165:src/Riscv.cpp ****                 KThread::dispatch();
 844              		.loc 1 165 34 is_stmt 0
 845 02e0 97000000 		call	_ZN7KThread8dispatchEv@plt
 845      E7800000 
 846              	.LVL53:
 167:src/Riscv.cpp ****                 break;
 847              		.loc 1 167 17 is_stmt 1
 848 02e8 6FF05FED 		j	.L15
 849              	.LVL54:
 850              	.L22:
 169:src/Riscv.cpp ****             case SEM_OPEN: {
 851              		.loc 1 169 13
 169:src/Riscv.cpp ****             case SEM_OPEN: {
 852              		.loc 1 169 28
 853              	.LBB77:
 170:src/Riscv.cpp ****                 KSemaphore** handle = nullptr;
 854              		.loc 1 170 17
 171:src/Riscv.cpp ****                 unsigned init;
 855              		.loc 1 171 17
 173:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 856              		.loc 1 173 17
 173:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 857              		.loc 1 173 69 is_stmt 0
 858 02ec 97070000 		la	a5,framePointer
 858      83B70700 
 859 02f4 83B70700 		ld	a5,0(a5)
 860              	#APP
 861              	# 173 "src/Riscv.cpp" 1
 174:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 862              		ld a1, 11*8(a5)
 863              	# 0 "" 2
 864              		.loc 1 174 17 is_stmt 1
 174:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 865              		.loc 1 174 57 is_stmt 0
 866              	# 174 "src/Riscv.cpp" 1
 867              		mv s4, a1
 868              	# 0 "" 2
 869              	.LVL55:
 175:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 870              		.loc 1 175 17 is_stmt 1
 175:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 871              		.loc 1 175 69 is_stmt 0
 872              	# 175 "src/Riscv.cpp" 1
 176:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(init));
 873              		ld a2, 12*8(a5)
 874              	# 0 "" 2
 875              		.loc 1 176 17 is_stmt 1
GAS LISTING /tmp/ccBqgni8.s 			page 26


 176:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(init));
 876              		.loc 1 176 55 is_stmt 0
 877              	# 176 "src/Riscv.cpp" 1
 878              		mv a0, a2
 879              	# 0 "" 2
 880              	.LVL56:
 178:src/Riscv.cpp ****                 *handle = KSemaphore::createSemaphore(init);
 881              		.loc 1 178 17 is_stmt 1
 178:src/Riscv.cpp ****                 *handle = KSemaphore::createSemaphore(init);
 882              		.loc 1 178 54 is_stmt 0
 883              	#NO_APP
 884 0308 13150502 		slli	a0,a0,32
 885              	.LVL57:
 886 030c 13550502 		srli	a0,a0,32
 887 0310 97000000 		call	_ZN10KSemaphore15createSemaphoreEm@plt
 887      E7800000 
 888              	.LVL58:
 178:src/Riscv.cpp ****                 *handle = KSemaphore::createSemaphore(init);
 889              		.loc 1 178 25
 890 0318 2330AA00 		sd	a0,0(s4)
 180:src/Riscv.cpp ****                 if (*handle != nullptr) asm volatile("li a0, 0");
 891              		.loc 1 180 17 is_stmt 1
 892 031c 630E0500 		beqz	a0,.L35
 180:src/Riscv.cpp ****                 if (*handle != nullptr) asm volatile("li a0, 0");
 893              		.loc 1 180 41 discriminator 1
 180:src/Riscv.cpp ****                 if (*handle != nullptr) asm volatile("li a0, 0");
 894              		.loc 1 180 65 is_stmt 0 discriminator 1
 895              	#APP
 896              	# 180 "src/Riscv.cpp" 1
 897              		li a0, 0
 898              	# 0 "" 2
 899              	#NO_APP
 900              	.L36:
 183:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 901              		.loc 1 183 17 is_stmt 1
 183:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 902              		.loc 1 183 69 is_stmt 0
 903 0324 97070000 		la	a5,framePointer
 903      83B70700 
 904 032c 83B70700 		ld	a5,0(a5)
 905              	#APP
 906              	# 183 "src/Riscv.cpp" 1
 185:src/Riscv.cpp ****                 break;
 907              		sd a0, 10*8(a5)
 908              	# 0 "" 2
 909              		.loc 1 185 17 is_stmt 1
 910              	#NO_APP
 911 0334 6FF09FE8 		j	.L15
 912              	.L35:
 181:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 913              		.loc 1 181 22
 181:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 914              		.loc 1 181 47 is_stmt 0
 915              	#APP
 916              	# 181 "src/Riscv.cpp" 1
 917              		li a0, -1
 918              	# 0 "" 2
GAS LISTING /tmp/ccBqgni8.s 			page 27


 919              	#NO_APP
 920 033c 6FF09FFE 		j	.L36
 921              	.LVL59:
 922              	.L21:
 923              	.LBE77:
 187:src/Riscv.cpp ****             case SEM_CLOSE: {
 924              		.loc 1 187 13 is_stmt 1
 187:src/Riscv.cpp ****             case SEM_CLOSE: {
 925              		.loc 1 187 29
 926              	.LBB78:
 188:src/Riscv.cpp ****                 KSemaphore* handle = nullptr;
 927              		.loc 1 188 17
 190:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 928              		.loc 1 190 17
 190:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 929              		.loc 1 190 69 is_stmt 0
 930 0340 97070000 		la	a5,framePointer
 930      83B70700 
 931 0348 83B70700 		ld	a5,0(a5)
 932              	#APP
 933              	# 190 "src/Riscv.cpp" 1
 191:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 934              		ld a1, 11*8(a5)
 935              	# 0 "" 2
 936              		.loc 1 191 17 is_stmt 1
 191:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 937              		.loc 1 191 57 is_stmt 0
 938              	# 191 "src/Riscv.cpp" 1
 939              		mv a0, a1
 940              	# 0 "" 2
 941              	.LVL60:
 193:src/Riscv.cpp ****                 if (handle) {
 942              		.loc 1 193 17 is_stmt 1
 943              	#NO_APP
 944 0354 630A0500 		beqz	a0,.L37
 194:src/Riscv.cpp ****                     handle->close();
 945              		.loc 1 194 21
 194:src/Riscv.cpp ****                     handle->close();
 946              		.loc 1 194 34 is_stmt 0
 947 0358 97000000 		call	_ZN10KSemaphore5closeEv@plt
 947      E7800000 
 948              	.LVL61:
 195:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 949              		.loc 1 195 21 is_stmt 1
 195:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 950              		.loc 1 195 45 is_stmt 0
 951              	#APP
 952              	# 195 "src/Riscv.cpp" 1
 953              		li a0, 0
 954              	# 0 "" 2
 955              	#NO_APP
 956 0364 6FF09FE5 		j	.L15
 957              	.LVL62:
 958              	.L37:
 197:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 959              		.loc 1 197 22 is_stmt 1
 197:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
GAS LISTING /tmp/ccBqgni8.s 			page 28


 960              		.loc 1 197 47 is_stmt 0
 961              	#APP
 962              	# 197 "src/Riscv.cpp" 1
 963              		li a0, -1
 964              	# 0 "" 2
 965              	#NO_APP
 966 036c 6FF01FE5 		j	.L15
 967              	.LVL63:
 968              	.L20:
 969              	.LBE78:
 201:src/Riscv.cpp ****             case SEM_WAIT: {
 970              		.loc 1 201 13 is_stmt 1
 201:src/Riscv.cpp ****             case SEM_WAIT: {
 971              		.loc 1 201 28
 972              	.LBB79:
 202:src/Riscv.cpp ****                 KSemaphore* handle = nullptr;
 973              		.loc 1 202 17
 204:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 974              		.loc 1 204 17
 204:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 975              		.loc 1 204 69 is_stmt 0
 976 0370 97070000 		la	a5,framePointer
 976      83B70700 
 977 0378 83B70700 		ld	a5,0(a5)
 978              	#APP
 979              	# 204 "src/Riscv.cpp" 1
 205:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 980              		ld a1, 11*8(a5)
 981              	# 0 "" 2
 982              		.loc 1 205 17 is_stmt 1
 205:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 983              		.loc 1 205 57 is_stmt 0
 984              	# 205 "src/Riscv.cpp" 1
 985              		mv a0, a1
 986              	# 0 "" 2
 987              	.LVL64:
 207:src/Riscv.cpp ****                 if (handle) {
 988              		.loc 1 207 17 is_stmt 1
 989              	#NO_APP
 990 0384 630A0500 		beqz	a0,.L38
 208:src/Riscv.cpp ****                     handle->wait();
 991              		.loc 1 208 21
 208:src/Riscv.cpp ****                     handle->wait();
 992              		.loc 1 208 33 is_stmt 0
 993 0388 97000000 		call	_ZN10KSemaphore4waitEv@plt
 993      E7800000 
 994              	.LVL65:
 209:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 995              		.loc 1 209 21 is_stmt 1
 209:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 996              		.loc 1 209 45 is_stmt 0
 997              	#APP
 998              	# 209 "src/Riscv.cpp" 1
 999              		li a0, 0
 1000              	# 0 "" 2
 1001              	#NO_APP
 1002 0394 6FF09FE2 		j	.L15
GAS LISTING /tmp/ccBqgni8.s 			page 29


 1003              	.LVL66:
 1004              	.L38:
 211:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 1005              		.loc 1 211 22 is_stmt 1
 211:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 1006              		.loc 1 211 47 is_stmt 0
 1007              	#APP
 1008              	# 211 "src/Riscv.cpp" 1
 1009              		li a0, -1
 1010              	# 0 "" 2
 1011              	#NO_APP
 1012 039c 6FF01FE2 		j	.L15
 1013              	.LVL67:
 1014              	.L19:
 1015              	.LBE79:
 215:src/Riscv.cpp ****             case SEM_SIGNAL: {
 1016              		.loc 1 215 13 is_stmt 1
 215:src/Riscv.cpp ****             case SEM_SIGNAL: {
 1017              		.loc 1 215 30
 1018              	.LBB80:
 216:src/Riscv.cpp ****                 KSemaphore* handle = nullptr;
 1019              		.loc 1 216 17
 218:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 1020              		.loc 1 218 17
 218:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 1021              		.loc 1 218 69 is_stmt 0
 1022 03a0 97070000 		la	a5,framePointer
 1022      83B70700 
 1023 03a8 83B70700 		ld	a5,0(a5)
 1024              	#APP
 1025              	# 218 "src/Riscv.cpp" 1
 219:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 1026              		ld a1, 11*8(a5)
 1027              	# 0 "" 2
 1028              		.loc 1 219 17 is_stmt 1
 219:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 1029              		.loc 1 219 57 is_stmt 0
 1030              	# 219 "src/Riscv.cpp" 1
 1031              		mv a0, a1
 1032              	# 0 "" 2
 1033              	.LVL68:
 221:src/Riscv.cpp ****                 if (handle) {
 1034              		.loc 1 221 17 is_stmt 1
 1035              	#NO_APP
 1036 03b4 630A0500 		beqz	a0,.L39
 222:src/Riscv.cpp ****                     handle->signal();
 1037              		.loc 1 222 21
 222:src/Riscv.cpp ****                     handle->signal();
 1038              		.loc 1 222 35 is_stmt 0
 1039 03b8 97000000 		call	_ZN10KSemaphore6signalEv@plt
 1039      E7800000 
 1040              	.LVL69:
 223:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 1041              		.loc 1 223 21 is_stmt 1
 223:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 1042              		.loc 1 223 45 is_stmt 0
 1043              	#APP
GAS LISTING /tmp/ccBqgni8.s 			page 30


 1044              	# 223 "src/Riscv.cpp" 1
 1045              		li a0, 0
 1046              	# 0 "" 2
 1047              	#NO_APP
 1048 03c4 6FF09FDF 		j	.L15
 1049              	.LVL70:
 1050              	.L39:
 225:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 1051              		.loc 1 225 22 is_stmt 1
 225:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 1052              		.loc 1 225 47 is_stmt 0
 1053              	#APP
 1054              	# 225 "src/Riscv.cpp" 1
 1055              		li a0, -1
 1056              	# 0 "" 2
 1057              	#NO_APP
 1058 03cc 6FF01FDF 		j	.L15
 1059              	.LVL71:
 1060              	.L18:
 1061              	.LBE80:
 229:src/Riscv.cpp ****             case GETC: {
 1062              		.loc 1 229 13 is_stmt 1
 229:src/Riscv.cpp ****             case GETC: {
 1063              		.loc 1 229 24
 1064              	.LBB81:
 230:src/Riscv.cpp ****                 char c = __getc();
 1065              		.loc 1 230 17
 230:src/Riscv.cpp ****                 char c = __getc();
 1066              		.loc 1 230 32 is_stmt 0
 1067 03d0 97000000 		call	__getc@plt
 1067      E7800000 
 1068              	.LVL72:
 231:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(c));
 1069              		.loc 1 231 17 is_stmt 1
 231:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(c));
 1070              		.loc 1 231 52 is_stmt 0
 1071              	#APP
 1072              	# 231 "src/Riscv.cpp" 1
 232:src/Riscv.cpp ****                 break;
 1073              		mv a0, a0
 1074              	# 0 "" 2
 1075              		.loc 1 232 17 is_stmt 1
 1076              	#NO_APP
 1077 03dc 6FF01FDE 		j	.L15
 1078              	.LVL73:
 1079              	.L16:
 1080              	.LBE81:
 234:src/Riscv.cpp ****             case PUTC: {
 1081              		.loc 1 234 13
 234:src/Riscv.cpp ****             case PUTC: {
 1082              		.loc 1 234 24
 1083              	.LBB82:
 235:src/Riscv.cpp ****                 char c;
 1084              		.loc 1 235 17
 236:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(c));
 1085              		.loc 1 236 17
 236:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(c));
GAS LISTING /tmp/ccBqgni8.s 			page 31


 1086              		.loc 1 236 52 is_stmt 0
 1087              	#APP
 1088              	# 236 "src/Riscv.cpp" 1
 1089              		mv a0, a1
 1090              	# 0 "" 2
 1091              	.LVL74:
 237:src/Riscv.cpp ****                 __putc(c);
 1092              		.loc 1 237 17 is_stmt 1
 237:src/Riscv.cpp ****                 __putc(c);
 1093              		.loc 1 237 23 is_stmt 0
 1094              	#NO_APP
 1095 03e4 1375F50F 		andi	a0,a0,0xff
 1096 03e8 97000000 		call	__putc@plt
 1096      E7800000 
 1097              	.LVL75:
 238:src/Riscv.cpp ****                 break;
 1098              		.loc 1 238 17 is_stmt 1
 1099 03f0 6FF0DFDC 		j	.L15
 1100              	.L43:
 1101              	.LBE82:
 1102              	.LBE87:
 247:src/Riscv.cpp ****             returnToUser();
 1103              		.loc 1 247 13
 247:src/Riscv.cpp ****             returnToUser();
 1104              		.loc 1 247 25 is_stmt 0
 1105 03f4 97000000 		call	_ZN5Riscv12returnToUserEv
 1105      E7800000 
 1106              	.LVL76:
 1107 03fc 6FF0DFDC 		j	.L40
 1108              	.LBE88:
 1109              	.LBE90:
 1110              		.cfi_endproc
 1111              	.LFE35:
 1113              	.Letext0:
 1114              		.file 3 "src/../h/../lib/hw.h"
 1115              		.file 4 "src/../h/MemoryAllocator.hpp"
 1116              		.file 5 "src/../h/KThread.hpp"
 1117              		.file 6 "src/../h/KSemaphore.hpp"
 1118              		.file 7 "src/../lib/console.h"
GAS LISTING /tmp/ccBqgni8.s 			page 32


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccBqgni8.s:9      .text:0000000000000000 _ZN5Riscv11setUserModeEv
     /tmp/ccBqgni8.s:13     .text:0000000000000000 .L0 
     /tmp/ccBqgni8.s:14     .text:0000000000000000 .L0 
     /tmp/ccBqgni8.s:15     .text:0000000000000004 .L0 
     /tmp/ccBqgni8.s:17     .text:0000000000000008 .L0 
     /tmp/ccBqgni8.s:19     .text:000000000000000c .L0 
     /tmp/ccBqgni8.s:25     .text:000000000000000c .L0 
     /tmp/ccBqgni8.s:26     .text:000000000000000c .L0 
     /tmp/ccBqgni8.s:27     .text:000000000000000c .L0 
     /tmp/ccBqgni8.s:37     .text:0000000000000014 .L0 
     /tmp/ccBqgni8.s:38     .text:0000000000000018 .L0 
     /tmp/ccBqgni8.s:39     .text:0000000000000018 .L0 
     /tmp/ccBqgni8.s:41     .text:000000000000001c .L0 
     /tmp/ccBqgni8.s:43     .text:0000000000000020 .L0 
     /tmp/ccBqgni8.s:49     .text:0000000000000020 _ZN5Riscv13setKernelModeEv
     /tmp/ccBqgni8.s:52     .text:0000000000000020 .L0 
     /tmp/ccBqgni8.s:53     .text:0000000000000020 .L0 
     /tmp/ccBqgni8.s:54     .text:0000000000000024 .L0 
     /tmp/ccBqgni8.s:56     .text:0000000000000028 .L0 
     /tmp/ccBqgni8.s:58     .text:000000000000002c .L0 
     /tmp/ccBqgni8.s:63     .text:000000000000002c .L0 
     /tmp/ccBqgni8.s:64     .text:000000000000002c .L0 
     /tmp/ccBqgni8.s:65     .text:000000000000002c .L0 
     /tmp/ccBqgni8.s:75     .text:0000000000000034 .L0 
     /tmp/ccBqgni8.s:76     .text:0000000000000038 .L0 
     /tmp/ccBqgni8.s:77     .text:0000000000000038 .L0 
     /tmp/ccBqgni8.s:79     .text:000000000000003c .L0 
     /tmp/ccBqgni8.s:81     .text:0000000000000040 .L0 
     /tmp/ccBqgni8.s:87     .text:0000000000000040 _ZN5Riscv10isUserModeEv
     /tmp/ccBqgni8.s:90     .text:0000000000000040 .L0 
     /tmp/ccBqgni8.s:91     .text:0000000000000040 .L0 
     /tmp/ccBqgni8.s:92     .text:0000000000000044 .L0 
     /tmp/ccBqgni8.s:94     .text:0000000000000048 .L0 
     /tmp/ccBqgni8.s:96     .text:000000000000004c .L0 
     /tmp/ccBqgni8.s:100    .text:000000000000004c .L0 
     /tmp/ccBqgni8.s:101    .text:000000000000004c .L0 
     /tmp/ccBqgni8.s:102    .text:000000000000004c .L0 
  src/../h/Riscv.hpp:130    .text:000000000000004c .L0 
     /tmp/ccBqgni8.s:110    .text:0000000000000054 .L0 
     /tmp/ccBqgni8.s:111    .text:0000000000000054 .L0 
     /tmp/ccBqgni8.s:116    .text:0000000000000058 .L0 
     /tmp/ccBqgni8.s:117    .text:0000000000000058 .L0 
     /tmp/ccBqgni8.s:120    .text:000000000000005c .L0 
     /tmp/ccBqgni8.s:122    .text:0000000000000064 .L0 
     /tmp/ccBqgni8.s:123    .text:0000000000000064 .L0 
     /tmp/ccBqgni8.s:125    .text:0000000000000068 .L0 
     /tmp/ccBqgni8.s:127    .text:000000000000006c .L0 
     /tmp/ccBqgni8.s:133    .text:000000000000006c _ZN5Riscv12returnToUserEv
     /tmp/ccBqgni8.s:136    .text:000000000000006c .L0 
     /tmp/ccBqgni8.s:137    .text:000000000000006c .L0 
     /tmp/ccBqgni8.s:138    .text:0000000000000070 .L0 
     /tmp/ccBqgni8.s:140    .text:0000000000000074 .L0 
     /tmp/ccBqgni8.s:142    .text:0000000000000078 .L0 
     /tmp/ccBqgni8.s:147    .text:0000000000000078 .L0 
     /tmp/ccBqgni8.s:148    .text:0000000000000078 .L0 
GAS LISTING /tmp/ccBqgni8.s 			page 33


     /tmp/ccBqgni8.s:149    .text:0000000000000078 .L0 
     /tmp/ccBqgni8.s:161    .text:0000000000000080 .L0 
     /tmp/ccBqgni8.s:162    .text:0000000000000080 .L0 
     /tmp/ccBqgni8.s:163    .text:0000000000000080 .L0 
     /tmp/ccBqgni8.s:173    .text:0000000000000088 .L0 
     /tmp/ccBqgni8.s:174    .text:000000000000008c .L0 
     /tmp/ccBqgni8.s:175    .text:000000000000008c .L0 
     /tmp/ccBqgni8.s:177    .text:0000000000000090 .L0 
     /tmp/ccBqgni8.s:179    .text:0000000000000094 .L0 
     /tmp/ccBqgni8.s:185    .text:0000000000000094 _ZN5Riscv10popSppSpieEv
     /tmp/ccBqgni8.s:188    .text:0000000000000094 .L0 
     /tmp/ccBqgni8.s:189    .text:0000000000000094 .L0 
     /tmp/ccBqgni8.s:190    .text:0000000000000098 .L0 
     /tmp/ccBqgni8.s:192    .text:000000000000009c .L0 
     /tmp/ccBqgni8.s:194    .text:00000000000000a0 .L0 
     /tmp/ccBqgni8.s:199    .text:00000000000000a0 .L0 
     /tmp/ccBqgni8.s:200    .text:00000000000000a0 .L0 
     /tmp/ccBqgni8.s:201    .text:00000000000000a0 .L0 
     /tmp/ccBqgni8.s:211    .text:00000000000000a8 .L0 
       src/Riscv.cpp:63     .text:00000000000000a8 .L0 
     /tmp/ccBqgni8.s:217    .text:00000000000000ac .L0 
       src/Riscv.cpp:64     .text:00000000000000ac .L0 
     /tmp/ccBqgni8.s:223    .text:00000000000000b0 .L0 
     /tmp/ccBqgni8.s:224    .text:00000000000000b4 .L0 
     /tmp/ccBqgni8.s:225    .text:00000000000000b4 .L0 
     /tmp/ccBqgni8.s:227    .text:00000000000000b8 .L0 
     /tmp/ccBqgni8.s:229    .text:00000000000000bc .L0 
     /tmp/ccBqgni8.s:235    .text:00000000000000bc _ZN5Riscv16setupTrapHandlerEv
     /tmp/ccBqgni8.s:238    .text:00000000000000bc .L0 
     /tmp/ccBqgni8.s:239    .text:00000000000000bc .L0 
     /tmp/ccBqgni8.s:240    .text:00000000000000c0 .L0 
     /tmp/ccBqgni8.s:242    .text:00000000000000c4 .L0 
     /tmp/ccBqgni8.s:244    .text:00000000000000c8 .L0 
     /tmp/ccBqgni8.s:246    .text:00000000000000c8 .L0 
     /tmp/ccBqgni8.s:247    .text:00000000000000c8 .L0 
     /tmp/ccBqgni8.s:252    .text:00000000000000d0 .L0 
     /tmp/ccBqgni8.s:253    .text:00000000000000d0 .L0 
  src/../h/Riscv.hpp:89     .text:00000000000000d0 .L0 
     /tmp/ccBqgni8.s:263    .text:00000000000000d4 .L0 
     /tmp/ccBqgni8.s:264    .text:00000000000000d8 .L0 
     /tmp/ccBqgni8.s:265    .text:00000000000000d8 .L0 
     /tmp/ccBqgni8.s:267    .text:00000000000000dc .L0 
     /tmp/ccBqgni8.s:269    .text:00000000000000e0 .L0 
     /tmp/ccBqgni8.s:275    .text:00000000000000e0 _ZN5Riscv11trapHandlerEv
     /tmp/ccBqgni8.s:278    .text:00000000000000e0 .L0 
     /tmp/ccBqgni8.s:279    .text:00000000000000e0 .L0 
     /tmp/ccBqgni8.s:280    .text:00000000000000e4 .L0 
     /tmp/ccBqgni8.s:287    .text:00000000000000fc .L0 
     /tmp/ccBqgni8.s:288    .text:00000000000000fc .L0 
     /tmp/ccBqgni8.s:289    .text:00000000000000fc .L0 
     /tmp/ccBqgni8.s:290    .text:00000000000000fc .L0 
     /tmp/ccBqgni8.s:291    .text:00000000000000fc .L0 
     /tmp/ccBqgni8.s:292    .text:00000000000000fc .L0 
     /tmp/ccBqgni8.s:294    .text:0000000000000100 .L0 
     /tmp/ccBqgni8.s:298    .text:0000000000000100 .L0 
     /tmp/ccBqgni8.s:299    .text:0000000000000100 .L0 
     /tmp/ccBqgni8.s:300    .text:0000000000000100 .L0 
GAS LISTING /tmp/ccBqgni8.s 			page 34


  src/../h/Riscv.hpp:64     .text:0000000000000100 .L0 
     /tmp/ccBqgni8.s:308    .text:0000000000000108 .L0 
     /tmp/ccBqgni8.s:309    .text:0000000000000108 .L0 
     /tmp/ccBqgni8.s:316    .text:000000000000010c .L0 
     /tmp/ccBqgni8.s:317    .text:000000000000010c .L0 
     /tmp/ccBqgni8.s:318    .text:000000000000010c .L0 
  src/../h/Riscv.hpp:74     .text:000000000000010c .L0 
     /tmp/ccBqgni8.s:326    .text:0000000000000114 .L0 
     /tmp/ccBqgni8.s:327    .text:0000000000000114 .L0 
     /tmp/ccBqgni8.s:332    .text:0000000000000118 .L0 
     /tmp/ccBqgni8.s:333    .text:0000000000000118 .L0 
     /tmp/ccBqgni8.s:336    .text:0000000000000120 .L0 
     /tmp/ccBqgni8.s:337    .text:0000000000000120 .L0 
     /tmp/ccBqgni8.s:338    .text:0000000000000120 .L0 
     /tmp/ccBqgni8.s:344    .text:000000000000012c .L0 
     /tmp/ccBqgni8.s:347    .text:0000000000000134 .L0 
     /tmp/ccBqgni8.s:350    .text:0000000000000138 .L0 
     /tmp/ccBqgni8.s:356    .text:0000000000000140 .L0 
     /tmp/ccBqgni8.s:357    .text:0000000000000144 .L0 
     /tmp/ccBqgni8.s:358    .text:0000000000000144 .L0 
     /tmp/ccBqgni8.s:360    .text:0000000000000148 .L0 
     /tmp/ccBqgni8.s:361    .text:0000000000000148 .L0 
     /tmp/ccBqgni8.s:363    .text:000000000000014c .L0 
     /tmp/ccBqgni8.s:365    .text:0000000000000150 .L0 
     /tmp/ccBqgni8.s:367    .text:0000000000000154 .L0 
     /tmp/ccBqgni8.s:370    .text:0000000000000158 .L0 
     /tmp/ccBqgni8.s:372    .text:000000000000015c .L0 
     /tmp/ccBqgni8.s:376    .text:0000000000000160 .L0 
     /tmp/ccBqgni8.s:382    .text:0000000000000160 .L0 
     /tmp/ccBqgni8.s:383    .text:0000000000000160 .L0 
     /tmp/ccBqgni8.s:384    .text:0000000000000160 .L0 
  src/../h/Riscv.hpp:130    .text:0000000000000160 .L0 
     /tmp/ccBqgni8.s:393    .text:0000000000000168 .L0 
     /tmp/ccBqgni8.s:394    .text:0000000000000168 .L0 
     /tmp/ccBqgni8.s:399    .text:000000000000016c .L0 
     /tmp/ccBqgni8.s:400    .text:000000000000016c .L0 
       src/Riscv.cpp:85     .text:000000000000016c .L0 
     /tmp/ccBqgni8.s:408    .text:0000000000000170 .L0 
     /tmp/ccBqgni8.s:492    .text:0000000000000194 .L0 
     /tmp/ccBqgni8.s:494    .text:0000000000000194 .L0 
     /tmp/ccBqgni8.s:495    .text:0000000000000194 .L0 
     /tmp/ccBqgni8.s:496    .text:0000000000000194 .L0 
     /tmp/ccBqgni8.s:497    .text:0000000000000194 .L0 
     /tmp/ccBqgni8.s:504    .text:00000000000001a4 .L0 
       src/Riscv.cpp:91     .text:00000000000001a4 .L0 
     /tmp/ccBqgni8.s:510    .text:00000000000001a8 .L0 
     /tmp/ccBqgni8.s:512    .text:00000000000001a8 .L0 
     /tmp/ccBqgni8.s:515    .text:00000000000001b0 .L0 
       src/Riscv.cpp:93     .text:00000000000001b0 .L0 
     /tmp/ccBqgni8.s:521    .text:00000000000001b4 .L0 
     /tmp/ccBqgni8.s:523    .text:00000000000001b4 .L0 
     /tmp/ccBqgni8.s:534    .text:00000000000001bc .L0 
     /tmp/ccBqgni8.s:535    .text:00000000000001bc .L0 
     /tmp/ccBqgni8.s:536    .text:00000000000001bc .L0 
     /tmp/ccBqgni8.s:541    .text:00000000000001c0 .L0 
     /tmp/ccBqgni8.s:542    .text:00000000000001c0 .L0 
  src/../h/Riscv.hpp:79     .text:00000000000001c0 .L0 
GAS LISTING /tmp/ccBqgni8.s 			page 35


     /tmp/ccBqgni8.s:552    .text:00000000000001c4 .L0 
     /tmp/ccBqgni8.s:558    .text:00000000000001c8 .L0 
     /tmp/ccBqgni8.s:559    .text:00000000000001c8 .L0 
  src/../h/Riscv.hpp:135    .text:00000000000001c8 .L0 
     /tmp/ccBqgni8.s:571    .text:00000000000001cc .L0 
     /tmp/ccBqgni8.s:578    .text:00000000000001d0 .L0 
     /tmp/ccBqgni8.s:580    .text:00000000000001d0 .L0 
     /tmp/ccBqgni8.s:581    .text:00000000000001d0 .L0 
     /tmp/ccBqgni8.s:582    .text:00000000000001d0 .L0 
     /tmp/ccBqgni8.s:583    .text:00000000000001d0 .L0 
     /tmp/ccBqgni8.s:590    .text:00000000000001e0 .L0 
       src/Riscv.cpp:100    .text:00000000000001e0 .L0 
     /tmp/ccBqgni8.s:596    .text:00000000000001e4 .L0 
     /tmp/ccBqgni8.s:598    .text:00000000000001e4 .L0 
     /tmp/ccBqgni8.s:601    .text:00000000000001ec .L0 
       src/Riscv.cpp:102    .text:00000000000001ec .L0 
     /tmp/ccBqgni8.s:607    .text:00000000000001f0 .L0 
     /tmp/ccBqgni8.s:609    .text:00000000000001f0 .L0 
     /tmp/ccBqgni8.s:616    .text:00000000000001f8 .L0 
     /tmp/ccBqgni8.s:621    .text:00000000000001fc .L0 
     /tmp/ccBqgni8.s:623    .text:00000000000001fc .L0 
     /tmp/ccBqgni8.s:624    .text:00000000000001fc .L0 
     /tmp/ccBqgni8.s:625    .text:00000000000001fc .L0 
     /tmp/ccBqgni8.s:628    .text:0000000000000204 .L0 
       src/Riscv.cpp:108    .text:0000000000000204 .L0 
     /tmp/ccBqgni8.s:634    .text:0000000000000208 .L0 
     /tmp/ccBqgni8.s:636    .text:0000000000000208 .L0 
     /tmp/ccBqgni8.s:644    .text:0000000000000218 .L0 
     /tmp/ccBqgni8.s:649    .text:000000000000021c .L0 
     /tmp/ccBqgni8.s:651    .text:000000000000021c .L0 
     /tmp/ccBqgni8.s:652    .text:000000000000021c .L0 
     /tmp/ccBqgni8.s:653    .text:000000000000021c .L0 
     /tmp/ccBqgni8.s:656    .text:0000000000000224 .L0 
       src/Riscv.cpp:114    .text:0000000000000224 .L0 
     /tmp/ccBqgni8.s:662    .text:0000000000000228 .L0 
     /tmp/ccBqgni8.s:664    .text:0000000000000228 .L0 
     /tmp/ccBqgni8.s:672    .text:0000000000000238 .L0 
     /tmp/ccBqgni8.s:677    .text:000000000000023c .L0 
     /tmp/ccBqgni8.s:678    .text:000000000000023c .L0 
     /tmp/ccBqgni8.s:681    .text:000000000000023c .L0 
     /tmp/ccBqgni8.s:682    .text:000000000000023c .L0 
     /tmp/ccBqgni8.s:683    .text:000000000000023c .L0 
     /tmp/ccBqgni8.s:690    .text:0000000000000244 .L0 
     /tmp/ccBqgni8.s:696    .text:0000000000000248 .L0 
     /tmp/ccBqgni8.s:697    .text:0000000000000248 .L0 
     /tmp/ccBqgni8.s:700    .text:0000000000000248 .L0 
     /tmp/ccBqgni8.s:701    .text:0000000000000248 .L0 
     /tmp/ccBqgni8.s:702    .text:0000000000000248 .L0 
     /tmp/ccBqgni8.s:709    .text:0000000000000250 .L0 
     /tmp/ccBqgni8.s:715    .text:0000000000000254 .L0 
     /tmp/ccBqgni8.s:717    .text:0000000000000254 .L0 
     /tmp/ccBqgni8.s:718    .text:0000000000000254 .L0 
     /tmp/ccBqgni8.s:719    .text:0000000000000254 .L0 
     /tmp/ccBqgni8.s:720    .text:0000000000000254 .L0 
     /tmp/ccBqgni8.s:721    .text:0000000000000254 .L0 
     /tmp/ccBqgni8.s:722    .text:0000000000000254 .L0 
     /tmp/ccBqgni8.s:723    .text:0000000000000254 .L0 
GAS LISTING /tmp/ccBqgni8.s 			page 36


     /tmp/ccBqgni8.s:730    .text:0000000000000264 .L0 
       src/Riscv.cpp:133    .text:0000000000000264 .L0 
     /tmp/ccBqgni8.s:736    .text:0000000000000268 .L0 
       src/Riscv.cpp:134    .text:0000000000000268 .L0 
     /tmp/ccBqgni8.s:741    .text:000000000000026c .L0 
       src/Riscv.cpp:135    .text:000000000000026c .L0 
     /tmp/ccBqgni8.s:747    .text:0000000000000270 .L0 
       src/Riscv.cpp:136    .text:0000000000000270 .L0 
     /tmp/ccBqgni8.s:752    .text:0000000000000274 .L0 
       src/Riscv.cpp:137    .text:0000000000000274 .L0 
     /tmp/ccBqgni8.s:758    .text:0000000000000278 .L0 
       src/Riscv.cpp:138    .text:0000000000000278 .L0 
     /tmp/ccBqgni8.s:763    .text:000000000000027c .L0 
       src/Riscv.cpp:139    .text:000000000000027c .L0 
     /tmp/ccBqgni8.s:769    .text:0000000000000280 .L0 
     /tmp/ccBqgni8.s:771    .text:0000000000000280 .L0 
     /tmp/ccBqgni8.s:774    .text:0000000000000288 .L0 
     /tmp/ccBqgni8.s:776    .text:000000000000028c .L0 
     /tmp/ccBqgni8.s:778    .text:0000000000000290 .L0 
     /tmp/ccBqgni8.s:779    .text:0000000000000290 .L0 
     /tmp/ccBqgni8.s:782    .text:0000000000000298 .L0 
       src/Riscv.cpp:145    .text:0000000000000298 .L0 
     /tmp/ccBqgni8.s:790    .text:000000000000029c .L0 
     /tmp/ccBqgni8.s:791    .text:000000000000029c .L0 
     /tmp/ccBqgni8.s:799    .text:00000000000002ac .L0 
     /tmp/ccBqgni8.s:802    .text:00000000000002b0 .L0 
       src/Riscv.cpp:147    .text:00000000000002b0 .L0 
     /tmp/ccBqgni8.s:813    .text:00000000000002b8 .L0 
     /tmp/ccBqgni8.s:814    .text:00000000000002b8 .L0 
     /tmp/ccBqgni8.s:815    .text:00000000000002b8 .L0 
     /tmp/ccBqgni8.s:816    .text:00000000000002b8 .L0 
     /tmp/ccBqgni8.s:820    .text:00000000000002c4 .L0 
     /tmp/ccBqgni8.s:822    .text:00000000000002c8 .L0 
     /tmp/ccBqgni8.s:823    .text:00000000000002c8 .L0 
     /tmp/ccBqgni8.s:827    .text:00000000000002d0 .L0 
     /tmp/ccBqgni8.s:828    .text:00000000000002d0 .L0 
     /tmp/ccBqgni8.s:831    .text:00000000000002d8 .L0 
       src/Riscv.cpp:160    .text:00000000000002d8 .L0 
     /tmp/ccBqgni8.s:838    .text:00000000000002dc .L0 
     /tmp/ccBqgni8.s:842    .text:00000000000002e0 .L0 
     /tmp/ccBqgni8.s:843    .text:00000000000002e0 .L0 
     /tmp/ccBqgni8.s:844    .text:00000000000002e0 .L0 
     /tmp/ccBqgni8.s:845    .text:00000000000002e0 .L0 
     /tmp/ccBqgni8.s:848    .text:00000000000002e8 .L0 
     /tmp/ccBqgni8.s:852    .text:00000000000002ec .L0 
     /tmp/ccBqgni8.s:854    .text:00000000000002ec .L0 
     /tmp/ccBqgni8.s:855    .text:00000000000002ec .L0 
     /tmp/ccBqgni8.s:856    .text:00000000000002ec .L0 
     /tmp/ccBqgni8.s:857    .text:00000000000002ec .L0 
     /tmp/ccBqgni8.s:858    .text:00000000000002ec .L0 
     /tmp/ccBqgni8.s:865    .text:00000000000002fc .L0 
       src/Riscv.cpp:174    .text:00000000000002fc .L0 
     /tmp/ccBqgni8.s:871    .text:0000000000000300 .L0 
       src/Riscv.cpp:175    .text:0000000000000300 .L0 
     /tmp/ccBqgni8.s:876    .text:0000000000000304 .L0 
       src/Riscv.cpp:176    .text:0000000000000304 .L0 
     /tmp/ccBqgni8.s:882    .text:0000000000000308 .L0 
GAS LISTING /tmp/ccBqgni8.s 			page 37


     /tmp/ccBqgni8.s:884    .text:0000000000000308 .L0 
     /tmp/ccBqgni8.s:890    .text:0000000000000318 .L0 
     /tmp/ccBqgni8.s:892    .text:000000000000031c .L0 
     /tmp/ccBqgni8.s:894    .text:0000000000000320 .L0 
       src/Riscv.cpp:180    .text:0000000000000320 .L0 
     /tmp/ccBqgni8.s:902    .text:0000000000000324 .L0 
     /tmp/ccBqgni8.s:903    .text:0000000000000324 .L0 
     /tmp/ccBqgni8.s:911    .text:0000000000000334 .L0 
     /tmp/ccBqgni8.s:914    .text:0000000000000338 .L0 
       src/Riscv.cpp:181    .text:0000000000000338 .L0 
     /tmp/ccBqgni8.s:925    .text:0000000000000340 .L0 
     /tmp/ccBqgni8.s:927    .text:0000000000000340 .L0 
     /tmp/ccBqgni8.s:928    .text:0000000000000340 .L0 
     /tmp/ccBqgni8.s:929    .text:0000000000000340 .L0 
     /tmp/ccBqgni8.s:930    .text:0000000000000340 .L0 
     /tmp/ccBqgni8.s:937    .text:0000000000000350 .L0 
       src/Riscv.cpp:191    .text:0000000000000350 .L0 
     /tmp/ccBqgni8.s:944    .text:0000000000000354 .L0 
     /tmp/ccBqgni8.s:946    .text:0000000000000358 .L0 
     /tmp/ccBqgni8.s:947    .text:0000000000000358 .L0 
     /tmp/ccBqgni8.s:950    .text:0000000000000360 .L0 
       src/Riscv.cpp:195    .text:0000000000000360 .L0 
     /tmp/ccBqgni8.s:960    .text:0000000000000368 .L0 
       src/Riscv.cpp:197    .text:0000000000000368 .L0 
     /tmp/ccBqgni8.s:971    .text:0000000000000370 .L0 
     /tmp/ccBqgni8.s:973    .text:0000000000000370 .L0 
     /tmp/ccBqgni8.s:974    .text:0000000000000370 .L0 
     /tmp/ccBqgni8.s:975    .text:0000000000000370 .L0 
     /tmp/ccBqgni8.s:976    .text:0000000000000370 .L0 
     /tmp/ccBqgni8.s:983    .text:0000000000000380 .L0 
       src/Riscv.cpp:205    .text:0000000000000380 .L0 
     /tmp/ccBqgni8.s:990    .text:0000000000000384 .L0 
     /tmp/ccBqgni8.s:992    .text:0000000000000388 .L0 
     /tmp/ccBqgni8.s:993    .text:0000000000000388 .L0 
     /tmp/ccBqgni8.s:996    .text:0000000000000390 .L0 
       src/Riscv.cpp:209    .text:0000000000000390 .L0 
     /tmp/ccBqgni8.s:1006   .text:0000000000000398 .L0 
       src/Riscv.cpp:211    .text:0000000000000398 .L0 
     /tmp/ccBqgni8.s:1017   .text:00000000000003a0 .L0 
     /tmp/ccBqgni8.s:1019   .text:00000000000003a0 .L0 
     /tmp/ccBqgni8.s:1020   .text:00000000000003a0 .L0 
     /tmp/ccBqgni8.s:1021   .text:00000000000003a0 .L0 
     /tmp/ccBqgni8.s:1022   .text:00000000000003a0 .L0 
     /tmp/ccBqgni8.s:1029   .text:00000000000003b0 .L0 
       src/Riscv.cpp:219    .text:00000000000003b0 .L0 
     /tmp/ccBqgni8.s:1036   .text:00000000000003b4 .L0 
     /tmp/ccBqgni8.s:1038   .text:00000000000003b8 .L0 
     /tmp/ccBqgni8.s:1039   .text:00000000000003b8 .L0 
     /tmp/ccBqgni8.s:1042   .text:00000000000003c0 .L0 
       src/Riscv.cpp:223    .text:00000000000003c0 .L0 
     /tmp/ccBqgni8.s:1052   .text:00000000000003c8 .L0 
       src/Riscv.cpp:225    .text:00000000000003c8 .L0 
     /tmp/ccBqgni8.s:1063   .text:00000000000003d0 .L0 
     /tmp/ccBqgni8.s:1065   .text:00000000000003d0 .L0 
     /tmp/ccBqgni8.s:1066   .text:00000000000003d0 .L0 
     /tmp/ccBqgni8.s:1067   .text:00000000000003d0 .L0 
     /tmp/ccBqgni8.s:1070   .text:00000000000003d8 .L0 
GAS LISTING /tmp/ccBqgni8.s 			page 38


       src/Riscv.cpp:231    .text:00000000000003d8 .L0 
     /tmp/ccBqgni8.s:1077   .text:00000000000003dc .L0 
     /tmp/ccBqgni8.s:1082   .text:00000000000003e0 .L0 
     /tmp/ccBqgni8.s:1084   .text:00000000000003e0 .L0 
     /tmp/ccBqgni8.s:1085   .text:00000000000003e0 .L0 
     /tmp/ccBqgni8.s:1086   .text:00000000000003e0 .L0 
       src/Riscv.cpp:236    .text:00000000000003e0 .L0 
     /tmp/ccBqgni8.s:1093   .text:00000000000003e4 .L0 
     /tmp/ccBqgni8.s:1095   .text:00000000000003e4 .L0 
     /tmp/ccBqgni8.s:1099   .text:00000000000003f0 .L0 
     /tmp/ccBqgni8.s:1104   .text:00000000000003f4 .L0 
     /tmp/ccBqgni8.s:1105   .text:00000000000003f4 .L0 
     /tmp/ccBqgni8.s:1110   .text:0000000000000400 .L0 
     /tmp/ccBqgni8.s:1119   .text:0000000000000400 .L0 
     /tmp/ccBqgni8.s:247    .text:00000000000000c8 .L0 
     /tmp/ccBqgni8.s:420    .rodata:0000000000000000 .L17
     /tmp/ccBqgni8.s:412    .text:000000000000017c .L0 
     /tmp/ccBqgni8.s:497    .text:0000000000000194 .L0 
     /tmp/ccBqgni8.s:583    .text:00000000000001d0 .L0 
     /tmp/ccBqgni8.s:636    .text:0000000000000208 .L0 
     /tmp/ccBqgni8.s:664    .text:0000000000000228 .L0 
     /tmp/ccBqgni8.s:723    .text:0000000000000254 .L0 
     /tmp/ccBqgni8.s:791    .text:000000000000029c .L0 
     /tmp/ccBqgni8.s:816    .text:00000000000002b8 .L0 
     /tmp/ccBqgni8.s:858    .text:00000000000002ec .L0 
     /tmp/ccBqgni8.s:903    .text:0000000000000324 .L0 
     /tmp/ccBqgni8.s:930    .text:0000000000000340 .L0 
     /tmp/ccBqgni8.s:976    .text:0000000000000370 .L0 
     /tmp/ccBqgni8.s:1022   .text:00000000000003a0 .L0 
     /tmp/ccBqgni8.s:353    .text:0000000000000140 .L13
     /tmp/ccBqgni8.s:375    .text:0000000000000160 .L42
     /tmp/ccBqgni8.s:531    .text:00000000000001bc .L15
     /tmp/ccBqgni8.s:1100   .text:00000000000003f4 .L43
     /tmp/ccBqgni8.s:800    .text:00000000000002b0 .L32
     /tmp/ccBqgni8.s:788    .text:000000000000029c .L33
     /tmp/ccBqgni8.s:825    .text:00000000000002d0 .L34
     /tmp/ccBqgni8.s:912    .text:0000000000000338 .L35
     /tmp/ccBqgni8.s:900    .text:0000000000000324 .L36
     /tmp/ccBqgni8.s:958    .text:0000000000000368 .L37
     /tmp/ccBqgni8.s:1004   .text:0000000000000398 .L38
     /tmp/ccBqgni8.s:1050   .text:00000000000003c8 .L39
     /tmp/ccBqgni8.s:553    .text:00000000000001c8 .L40
     /tmp/ccBqgni8.s:489    .text:0000000000000194 .L31
     /tmp/ccBqgni8.s:573    .text:00000000000001d0 .L30
     /tmp/ccBqgni8.s:618    .text:00000000000001fc .L29
     /tmp/ccBqgni8.s:646    .text:000000000000021c .L28
     /tmp/ccBqgni8.s:674    .text:000000000000023c .L27
     /tmp/ccBqgni8.s:692    .text:0000000000000248 .L26
     /tmp/ccBqgni8.s:711    .text:0000000000000254 .L25
     /tmp/ccBqgni8.s:810    .text:00000000000002b8 .L24
     /tmp/ccBqgni8.s:840    .text:00000000000002e0 .L23
     /tmp/ccBqgni8.s:850    .text:00000000000002ec .L22
     /tmp/ccBqgni8.s:922    .text:0000000000000340 .L21
     /tmp/ccBqgni8.s:968    .text:0000000000000370 .L20
     /tmp/ccBqgni8.s:1014   .text:00000000000003a0 .L19
     /tmp/ccBqgni8.s:1060   .text:00000000000003d0 .L18
     /tmp/ccBqgni8.s:1079   .text:00000000000003e0 .L16
GAS LISTING /tmp/ccBqgni8.s 			page 39


     /tmp/ccBqgni8.s:2905   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccBqgni8.s:4571   .debug_str:0000000000000951 .LASF181
     /tmp/ccBqgni8.s:4309   .debug_str:0000000000000156 .LASF182
     /tmp/ccBqgni8.s:4363   .debug_str:0000000000000333 .LASF183
     /tmp/ccBqgni8.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccBqgni8.s:1113   .text:0000000000000400 .Letext0
     /tmp/ccBqgni8.s:4255   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccBqgni8.s:4381   .debug_str:00000000000003d5 .LASF0
     /tmp/ccBqgni8.s:4407   .debug_str:0000000000000490 .LASF1
     /tmp/ccBqgni8.s:4499   .debug_str:0000000000000764 .LASF2
     /tmp/ccBqgni8.s:4511   .debug_str:00000000000007d5 .LASF4
     /tmp/ccBqgni8.s:4393   .debug_str:0000000000000425 .LASF3
     /tmp/ccBqgni8.s:4265   .debug_str:0000000000000027 .LASF5
     /tmp/ccBqgni8.s:4471   .debug_str:0000000000000684 .LASF6
     /tmp/ccBqgni8.s:4397   .debug_str:000000000000043c .LASF7
     /tmp/ccBqgni8.s:4361   .debug_str:0000000000000323 .LASF8
     /tmp/ccBqgni8.s:4365   .debug_str:0000000000000351 .LASF9
     /tmp/ccBqgni8.s:4295   .debug_str:00000000000000f2 .LASF10
     /tmp/ccBqgni8.s:4351   .debug_str:00000000000002d1 .LASF11
     /tmp/ccBqgni8.s:4311   .debug_str:0000000000000164 .LASF12
     /tmp/ccBqgni8.s:4293   .debug_str:00000000000000e2 .LASF13
     /tmp/ccBqgni8.s:4547   .debug_str:00000000000008c5 .LASF14
     /tmp/ccBqgni8.s:4333   .debug_str:0000000000000211 .LASF15
     /tmp/ccBqgni8.s:4531   .debug_str:0000000000000848 .LASF16
     /tmp/ccBqgni8.s:4273   .debug_str:0000000000000067 .LASF17
     /tmp/ccBqgni8.s:4603   .debug_str:0000000000000ae0 .LASF69
     /tmp/ccBqgni8.s:4593   .debug_str:0000000000000aae .LASF184
     /tmp/ccBqgni8.s:4347   .debug_str:00000000000002ad .LASF18
     /tmp/ccBqgni8.s:4569   .debug_str:0000000000000944 .LASF19
     /tmp/ccBqgni8.s:4317   .debug_str:0000000000000188 .LASF20
     /tmp/ccBqgni8.s:4587   .debug_str:0000000000000a80 .LASF21
     /tmp/ccBqgni8.s:4613   .debug_str:0000000000000b39 .LASF23
     /tmp/ccBqgni8.s:4623   .debug_str:0000000000000b9d .LASF22
     /tmp/ccBqgni8.s:4579   .debug_str:0000000000000a42 .LASF24
     /tmp/ccBqgni8.s:4549   .debug_str:00000000000008d1 .LASF25
     /tmp/ccBqgni8.s:4345   .debug_str:0000000000000294 .LASF26
     /tmp/ccBqgni8.s:4469   .debug_str:0000000000000676 .LASF27
     /tmp/ccBqgni8.s:4463   .debug_str:000000000000061d .LASF28
     /tmp/ccBqgni8.s:4413   .debug_str:00000000000004b0 .LASF33
     /tmp/ccBqgni8.s:4279   .debug_str:000000000000008c .LASF35
     /tmp/ccBqgni8.s:4595   .debug_str:0000000000000abd .LASF29
     /tmp/ccBqgni8.s:4327   .debug_str:00000000000001eb .LASF30
     /tmp/ccBqgni8.s:4371   .debug_str:000000000000037b .LASF31
     /tmp/ccBqgni8.s:4379   .debug_str:00000000000003bd .LASF32
     /tmp/ccBqgni8.s:4589   .debug_str:0000000000000a91 .LASF34
     /tmp/ccBqgni8.s:4583   .debug_str:0000000000000a63 .LASF36
     /tmp/ccBqgni8.s:4495   .debug_str:0000000000000750 .LASF39
     /tmp/ccBqgni8.s:4457   .debug_str:00000000000005e5 .LASF41
     /tmp/ccBqgni8.s:4485   .debug_str:0000000000000707 .LASF37
     /tmp/ccBqgni8.s:4489   .debug_str:000000000000071e .LASF38
     /tmp/ccBqgni8.s:4451   .debug_str:00000000000005b3 .LASF40
     /tmp/ccBqgni8.s:4399   .debug_str:000000000000044f .LASF42
     /tmp/ccBqgni8.s:4609   .debug_str:0000000000000b23 .LASF43
     /tmp/ccBqgni8.s:4543   .debug_str:00000000000008a4 .LASF44
     /tmp/ccBqgni8.s:4447   .debug_str:00000000000005a6 .LASF45
     /tmp/ccBqgni8.s:4455   .debug_str:00000000000005d1 .LASF46
     /tmp/ccBqgni8.s:4417   .debug_str:00000000000004c3 .LASF47
GAS LISTING /tmp/ccBqgni8.s 			page 40


     /tmp/ccBqgni8.s:4491   .debug_str:0000000000000731 .LASF48
     /tmp/ccBqgni8.s:4635   .debug_str:0000000000000be8 .LASF49
     /tmp/ccBqgni8.s:4387   .debug_str:00000000000003f9 .LASF50
     /tmp/ccBqgni8.s:4541   .debug_str:000000000000089d .LASF51
     /tmp/ccBqgni8.s:4513   .debug_str:00000000000007dc .LASF52
     /tmp/ccBqgni8.s:4515   .debug_str:00000000000007ef .LASF53
     /tmp/ccBqgni8.s:4301   .debug_str:000000000000010f .LASF54
     /tmp/ccBqgni8.s:4331   .debug_str:000000000000020b .LASF55
     /tmp/ccBqgni8.s:4377   .debug_str:00000000000003ab .LASF56
     /tmp/ccBqgni8.s:4385   .debug_str:00000000000003f3 .LASF57
     /tmp/ccBqgni8.s:4321   .debug_str:00000000000001a4 .LASF58
     /tmp/ccBqgni8.s:4267   .debug_str:000000000000002e .LASF59
     /tmp/ccBqgni8.s:4503   .debug_str:0000000000000788 .LASF60
     /tmp/ccBqgni8.s:4497   .debug_str:0000000000000759 .LASF61
     /tmp/ccBqgni8.s:4629   .debug_str:0000000000000bba .LASF62
     /tmp/ccBqgni8.s:4605   .debug_str:0000000000000ae6 .LASF63
     /tmp/ccBqgni8.s:4615   .debug_str:0000000000000b57 .LASF64
     /tmp/ccBqgni8.s:4601   .debug_str:0000000000000ad6 .LASF123
     /tmp/ccBqgni8.s:4433   .debug_str:0000000000000538 .LASF125
     /tmp/ccBqgni8.s:4425   .debug_str:00000000000004ec .LASF65
     /tmp/ccBqgni8.s:4521   .debug_str:0000000000000807 .LASF68
     /tmp/ccBqgni8.s:4297   .debug_str:0000000000000101 .LASF66
     /tmp/ccBqgni8.s:4405   .debug_str:000000000000048b .LASF67
     /tmp/ccBqgni8.s:4467   .debug_str:0000000000000666 .LASF70
     /tmp/ccBqgni8.s:4631   .debug_str:0000000000000bd2 .LASF71
     /tmp/ccBqgni8.s:4533   .debug_str:000000000000085e .LASF72
     /tmp/ccBqgni8.s:4435   .debug_str:000000000000054e .LASF73
     /tmp/ccBqgni8.s:4269   .debug_str:0000000000000039 .LASF75
     /tmp/ccBqgni8.s:4555   .debug_str:00000000000008ed .LASF74
     /tmp/ccBqgni8.s:4437   .debug_str:0000000000000558 .LASF76
     /tmp/ccBqgni8.s:4443   .debug_str:000000000000058a .LASF77
     /tmp/ccBqgni8.s:4325   .debug_str:00000000000001c0 .LASF78
     /tmp/ccBqgni8.s:4401   .debug_str:0000000000000462 .LASF79
     /tmp/ccBqgni8.s:4607   .debug_str:0000000000000af0 .LASF80
     /tmp/ccBqgni8.s:4271   .debug_str:000000000000005a .LASF185
     /tmp/ccBqgni8.s:4391   .debug_str:000000000000041b .LASF127
     /tmp/ccBqgni8.s:4465   .debug_str:0000000000000638 .LASF129
     /tmp/ccBqgni8.s:4439   .debug_str:0000000000000579 .LASF186
     /tmp/ccBqgni8.s:4291   .debug_str:00000000000000dc .LASF81
     /tmp/ccBqgni8.s:4519   .debug_str:00000000000007ff .LASF82
     /tmp/ccBqgni8.s:4257   .debug_str:0000000000000000 .LASF83
     /tmp/ccBqgni8.s:4283   .debug_str:00000000000000b4 .LASF84
     /tmp/ccBqgni8.s:4481   .debug_str:00000000000006f3 .LASF85
     /tmp/ccBqgni8.s:4303   .debug_str:0000000000000122 .LASF86
     /tmp/ccBqgni8.s:4551   .debug_str:00000000000008dd .LASF87
     /tmp/ccBqgni8.s:4567   .debug_str:000000000000093c .LASF88
     /tmp/ccBqgni8.s:4339   .debug_str:0000000000000251 .LASF89
     /tmp/ccBqgni8.s:4281   .debug_str:00000000000000a4 .LASF90
     /tmp/ccBqgni8.s:4545   .debug_str:00000000000008b8 .LASF91
     /tmp/ccBqgni8.s:4431   .debug_str:0000000000000511 .LASF92
     /tmp/ccBqgni8.s:4459   .debug_str:00000000000005fa .LASF187
     /tmp/ccBqgni8.s:4505   .debug_str:00000000000007a0 .LASF93
     /tmp/ccBqgni8.s:4619   .debug_str:0000000000000b81 .LASF94
     /tmp/ccBqgni8.s:4617   .debug_str:0000000000000b6d .LASF95
     /tmp/ccBqgni8.s:4527   .debug_str:0000000000000830 .LASF96
     /tmp/ccBqgni8.s:4275   .debug_str:0000000000000074 .LASF97
     /tmp/ccBqgni8.s:4415   .debug_str:00000000000004bb .LASF98
GAS LISTING /tmp/ccBqgni8.s 			page 41


     /tmp/ccBqgni8.s:4621   .debug_str:0000000000000b87 .LASF99
     /tmp/ccBqgni8.s:4517   .debug_str:00000000000007f6 .LASF188
     /tmp/ccBqgni8.s:4563   .debug_str:000000000000091e .LASF189
     /tmp/ccBqgni8.s:4507   .debug_str:00000000000007c1 .LASF100
     /tmp/ccBqgni8.s:4575   .debug_str:0000000000000a1a .LASF101
     /tmp/ccBqgni8.s:4409   .debug_str:00000000000004a3 .LASF102
     /tmp/ccBqgni8.s:4591   .debug_str:0000000000000a9a .LASF103
     /tmp/ccBqgni8.s:4305   .debug_str:000000000000012a .LASF104
     /tmp/ccBqgni8.s:4453   .debug_str:00000000000005ba .LASF105
     /tmp/ccBqgni8.s:4633   .debug_str:0000000000000bdb .LASF106
     /tmp/ccBqgni8.s:4487   .debug_str:000000000000070e .LASF107
     /tmp/ccBqgni8.s:4261   .debug_str:000000000000000d .LASF108
     /tmp/ccBqgni8.s:4383   .debug_str:00000000000003e2 .LASF109
     /tmp/ccBqgni8.s:4285   .debug_str:00000000000000bd .LASF110
     /tmp/ccBqgni8.s:4375   .debug_str:000000000000039b .LASF111
     /tmp/ccBqgni8.s:4529   .debug_str:0000000000000835 .LASF112
     /tmp/ccBqgni8.s:4337   .debug_str:0000000000000240 .LASF113
     /tmp/ccBqgni8.s:4355   .debug_str:00000000000002e9 .LASF114
     /tmp/ccBqgni8.s:4359   .debug_str:000000000000030e .LASF115
     /tmp/ccBqgni8.s:4259   .debug_str:0000000000000008 .LASF116
     /tmp/ccBqgni8.s:4625   .debug_str:0000000000000ba9 .LASF117
     /tmp/ccBqgni8.s:4525   .debug_str:000000000000082a .LASF118
     /tmp/ccBqgni8.s:4581   .debug_str:0000000000000a5b .LASF119
     /tmp/ccBqgni8.s:4329   .debug_str:0000000000000205 .LASF120
     /tmp/ccBqgni8.s:4389   .debug_str:000000000000040d .LASF121
     /tmp/ccBqgni8.s:4611   .debug_str:0000000000000b2b .LASF122
     /tmp/ccBqgni8.s:4315   .debug_str:000000000000017a .LASF124
     /tmp/ccBqgni8.s:4477   .debug_str:00000000000006ac .LASF126
     /tmp/ccBqgni8.s:4429   .debug_str:0000000000000505 .LASF128
     /tmp/ccBqgni8.s:4341   .debug_str:000000000000025a .LASF130
     /tmp/ccBqgni8.s:4561   .debug_str:0000000000000919 .LASF131
     /tmp/ccBqgni8.s:4493   .debug_str:0000000000000745 .LASF132
     /tmp/ccBqgni8.s:4475   .debug_str:000000000000069c .LASF133
     /tmp/ccBqgni8.s:4307   .debug_str:0000000000000133 .LASF134
     /tmp/ccBqgni8.s:4577   .debug_str:0000000000000a3d .LASF135
     /tmp/ccBqgni8.s:4523   .debug_str:0000000000000813 .LASF136
     /tmp/ccBqgni8.s:4553   .debug_str:00000000000008e6 .LASF137
     /tmp/ccBqgni8.s:4335   .debug_str:0000000000000227 .LASF138
     /tmp/ccBqgni8.s:4313   .debug_str:0000000000000174 .LASF139
     /tmp/ccBqgni8.s:4349   .debug_str:00000000000002b9 .LASF140
     /tmp/ccBqgni8.s:4427   .debug_str:00000000000004f1 .LASF141
     /tmp/ccBqgni8.s:4373   .debug_str:0000000000000386 .LASF142
     /tmp/ccBqgni8.s:4421   .debug_str:00000000000004d1 .LASF143
     /tmp/ccBqgni8.s:4557   .debug_str:00000000000008f6 .LASF144
     /tmp/ccBqgni8.s:4367   .debug_str:000000000000035f .LASF145
     /tmp/ccBqgni8.s:4539   .debug_str:0000000000000898 .LASF146
     /tmp/ccBqgni8.s:4449   .debug_str:00000000000005ae .LASF147
     /tmp/ccBqgni8.s:4501   .debug_str:0000000000000772 .LASF190
     /tmp/ccBqgni8.s:4461   .debug_str:00000000000005ff .LASF191
     /tmp/ccBqgni8.s:4637   .debug_str:0000000000000bf0 .LASF148
     /tmp/ccBqgni8.s:4353   .debug_str:00000000000002e0 .LASF149
     /tmp/ccBqgni8.s:4535   .debug_str:000000000000087e .LASF150
     /tmp/ccBqgni8.s:4479   .debug_str:00000000000006d8 .LASF151
     /tmp/ccBqgni8.s:4289   .debug_str:00000000000000d2 .LASF152
     /tmp/ccBqgni8.s:4343   .debug_str:0000000000000288 .LASF153
     /tmp/ccBqgni8.s:4559   .debug_str:000000000000090b .LASF154
     /tmp/ccBqgni8.s:4483   .debug_str:00000000000006fb .LASF155
GAS LISTING /tmp/ccBqgni8.s 			page 42


     /tmp/ccBqgni8.s:4319   .debug_str:0000000000000194 .LASF156
     /tmp/ccBqgni8.s:4299   .debug_str:0000000000000106 .LASF157
     /tmp/ccBqgni8.s:4263   .debug_str:000000000000001d .LASF158
     /tmp/ccBqgni8.s:4445   .debug_str:000000000000059d .LASF159
     /tmp/ccBqgni8.s:4509   .debug_str:00000000000007ca .LASF160
     /tmp/ccBqgni8.s:4395   .debug_str:0000000000000437 .LASF161
     /tmp/ccBqgni8.s:4441   .debug_str:0000000000000585 .LASF162
     /tmp/ccBqgni8.s:276    .text:00000000000000e0 .LFB35
     /tmp/ccBqgni8.s:1111   .text:0000000000000400 .LFE35
     /tmp/ccBqgni8.s:4537   .debug_str:0000000000000891 .LASF163
     /tmp/ccBqgni8.s:3800   .debug_loc:0000000000000000 .LLST6
     /tmp/ccBqgni8.s:4573   .debug_str:0000000000000a15 .LASF164
     /tmp/ccBqgni8.s:3811   .debug_loc:0000000000000036 .LLST7
     /tmp/ccBqgni8.s:4627   .debug_str:0000000000000bae .LASF165
     /tmp/ccBqgni8.s:3822   .debug_loc:000000000000006c .LLST8
     /tmp/ccBqgni8.s:4357   .debug_str:0000000000000304 .LASF166
     /tmp/ccBqgni8.s:3923   .debug_loc:00000000000001b0 .LLST9
     /tmp/ccBqgni8.s:4565   .debug_str:0000000000000936 .LASF167
     /tmp/ccBqgni8.s:3944   .debug_loc:00000000000001f0 .LLST10
     /tmp/ccBqgni8.s:4247   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccBqgni8.s:4369   .debug_str:0000000000000373 .LASF168
     /tmp/ccBqgni8.s:4473   .debug_str:0000000000000697 .LASF169
     /tmp/ccBqgni8.s:3972   .debug_loc:000000000000025d .LLST11
     /tmp/ccBqgni8.s:493    .text:0000000000000194 .LBB68
     /tmp/ccBqgni8.s:532    .text:00000000000001bc .LBE68
     /tmp/ccBqgni8.s:3979   .debug_loc:0000000000000280 .LLST12
     /tmp/ccBqgni8.s:3986   .debug_loc:00000000000002a3 .LLST13
     /tmp/ccBqgni8.s:513    .text:00000000000001b0 .LVL26
     /tmp/ccBqgni8.s:579    .text:00000000000001d0 .LBB69
     /tmp/ccBqgni8.s:619    .text:00000000000001fc .LBE69
     /tmp/ccBqgni8.s:4287   .debug_str:00000000000000cd .LASF170
     /tmp/ccBqgni8.s:3993   .debug_loc:00000000000002c6 .LLST14
     /tmp/ccBqgni8.s:4599   .debug_str:0000000000000acf .LASF171
     /tmp/ccBqgni8.s:4000   .debug_loc:00000000000002e9 .LLST15
     /tmp/ccBqgni8.s:599    .text:00000000000001ec .LVL34
     /tmp/ccBqgni8.s:622    .text:00000000000001fc .LBB70
     /tmp/ccBqgni8.s:647    .text:000000000000021c .LBE70
     /tmp/ccBqgni8.s:4323   .debug_str:00000000000001b6 .LASF172
     /tmp/ccBqgni8.s:4007   .debug_loc:000000000000030c .LLST16
     /tmp/ccBqgni8.s:626    .text:0000000000000204 .LVL36
     /tmp/ccBqgni8.s:650    .text:000000000000021c .LBB71
     /tmp/ccBqgni8.s:675    .text:000000000000023c .LBE71
     /tmp/ccBqgni8.s:4585   .debug_str:0000000000000a78 .LASF173
     /tmp/ccBqgni8.s:4014   .debug_loc:000000000000032f .LLST17
     /tmp/ccBqgni8.s:654    .text:0000000000000224 .LVL38
     /tmp/ccBqgni8.s:716    .text:0000000000000254 .LBB76
     /tmp/ccBqgni8.s:811    .text:00000000000002b8 .LBE76
     /tmp/ccBqgni8.s:4639   .debug_str:0000000000000bfa .LASF174
     /tmp/ccBqgni8.s:4021   .debug_loc:0000000000000352 .LLST20
     /tmp/ccBqgni8.s:4403   .debug_str:000000000000047d .LASF175
     /tmp/ccBqgni8.s:4033   .debug_loc:0000000000000389 .LLST21
     /tmp/ccBqgni8.s:4045   .debug_loc:00000000000003c0 .LLST22
     /tmp/ccBqgni8.s:4057   .debug_loc:00000000000003f7 .LLST23
     /tmp/ccBqgni8.s:772    .text:0000000000000288 .LVL46
     /tmp/ccBqgni8.s:780    .text:0000000000000298 .LVL47
     /tmp/ccBqgni8.s:853    .text:00000000000002ec .LBB77
     /tmp/ccBqgni8.s:923    .text:0000000000000340 .LBE77
GAS LISTING /tmp/ccBqgni8.s 			page 43


     /tmp/ccBqgni8.s:4069   .debug_loc:000000000000042e .LLST24
     /tmp/ccBqgni8.s:4277   .debug_str:0000000000000087 .LASF176
     /tmp/ccBqgni8.s:4081   .debug_loc:0000000000000465 .LLST25
     /tmp/ccBqgni8.s:888    .text:0000000000000318 .LVL58
     /tmp/ccBqgni8.s:926    .text:0000000000000340 .LBB78
     /tmp/ccBqgni8.s:969    .text:0000000000000370 .LBE78
     /tmp/ccBqgni8.s:4088   .debug_loc:0000000000000488 .LLST26
     /tmp/ccBqgni8.s:948    .text:0000000000000360 .LVL61
     /tmp/ccBqgni8.s:972    .text:0000000000000370 .LBB79
     /tmp/ccBqgni8.s:1015   .text:00000000000003a0 .LBE79
     /tmp/ccBqgni8.s:4104   .debug_loc:00000000000004d2 .LLST27
     /tmp/ccBqgni8.s:994    .text:0000000000000390 .LVL65
     /tmp/ccBqgni8.s:1018   .text:00000000000003a0 .LBB80
     /tmp/ccBqgni8.s:1061   .text:00000000000003d0 .LBE80
     /tmp/ccBqgni8.s:4120   .debug_loc:000000000000051c .LLST28
     /tmp/ccBqgni8.s:1040   .text:00000000000003c0 .LVL69
     /tmp/ccBqgni8.s:1064   .text:00000000000003d0 .LBB81
     /tmp/ccBqgni8.s:1080   .text:00000000000003e0 .LBE81
     /tmp/ccBqgni8.s:4136   .debug_loc:0000000000000566 .LLST29
     /tmp/ccBqgni8.s:1068   .text:00000000000003d8 .LVL72
     /tmp/ccBqgni8.s:1083   .text:00000000000003e0 .LBB82
     /tmp/ccBqgni8.s:1101   .text:00000000000003f4 .LBE82
     /tmp/ccBqgni8.s:4143   .debug_loc:0000000000000589 .LLST30
     /tmp/ccBqgni8.s:1097   .text:00000000000003f0 .LVL75
     /tmp/ccBqgni8.s:380    .text:0000000000000160 .LBB65
     /tmp/ccBqgni8.s:397    .text:000000000000016c .LBE65
     /tmp/ccBqgni8.s:679    .text:000000000000023c .LBB72
     /tmp/ccBqgni8.s:694    .text:0000000000000248 .LBE72
     /tmp/ccBqgni8.s:4150   .debug_loc:00000000000005ac .LLST18
     /tmp/ccBqgni8.s:698    .text:0000000000000248 .LBB74
     /tmp/ccBqgni8.s:713    .text:0000000000000254 .LBE74
     /tmp/ccBqgni8.s:4159   .debug_loc:00000000000005d2 .LLST19
     /tmp/ccBqgni8.s:539    .text:00000000000001c0 .LBB83
     /tmp/ccBqgni8.s:550    .text:00000000000001c4 .LBE83
     /tmp/ccBqgni8.s:4168   .debug_loc:00000000000005f8 .LLST31
     /tmp/ccBqgni8.s:556    .text:00000000000001c8 .LBB85
     /tmp/ccBqgni8.s:567    .text:00000000000001cc .LBE85
     /tmp/ccBqgni8.s:4175   .debug_loc:000000000000061b .LLST32
     /tmp/ccBqgni8.s:824    .text:00000000000002d0 .LVL50
     /tmp/ccBqgni8.s:829    .text:00000000000002d8 .LVL51
     /tmp/ccBqgni8.s:846    .text:00000000000002e8 .LVL53
     /tmp/ccBqgni8.s:1106   .text:00000000000003fc .LVL76
     /tmp/ccBqgni8.s:296    .text:0000000000000100 .LBB59
     /tmp/ccBqgni8.s:312    .text:000000000000010c .LBE59
     /tmp/ccBqgni8.s:314    .text:000000000000010c .LBB61
     /tmp/ccBqgni8.s:330    .text:0000000000000118 .LBE61
     /tmp/ccBqgni8.s:334    .text:0000000000000120 .LVL15
     /tmp/ccBqgni8.s:236    .text:00000000000000bc .LFB34
     /tmp/ccBqgni8.s:270    .text:00000000000000e0 .LFE34
     /tmp/ccBqgni8.s:250    .text:00000000000000d0 .LBB57
     /tmp/ccBqgni8.s:261    .text:00000000000000d4 .LBE57
     /tmp/ccBqgni8.s:186    .text:0000000000000094 .LFB33
     /tmp/ccBqgni8.s:230    .text:00000000000000bc .LFE33
     /tmp/ccBqgni8.s:197    .text:00000000000000a0 .LBB55
     /tmp/ccBqgni8.s:209    .text:00000000000000a8 .LBE55
     /tmp/ccBqgni8.s:4182   .debug_loc:000000000000063e .LLST5
     /tmp/ccBqgni8.s:134    .text:000000000000006c .LFB32
GAS LISTING /tmp/ccBqgni8.s 			page 44


     /tmp/ccBqgni8.s:180    .text:0000000000000094 .LFE32
     /tmp/ccBqgni8.s:145    .text:0000000000000078 .LBB51
     /tmp/ccBqgni8.s:157    .text:0000000000000080 .LBE51
     /tmp/ccBqgni8.s:4191   .debug_loc:0000000000000664 .LLST3
     /tmp/ccBqgni8.s:159    .text:0000000000000080 .LBB53
     /tmp/ccBqgni8.s:171    .text:0000000000000088 .LBE53
     /tmp/ccBqgni8.s:4200   .debug_loc:000000000000068a .LLST4
     /tmp/ccBqgni8.s:88     .text:0000000000000040 .LFB31
     /tmp/ccBqgni8.s:128    .text:000000000000006c .LFE31
     /tmp/ccBqgni8.s:4209   .debug_loc:00000000000006af .LLST2
     /tmp/ccBqgni8.s:98     .text:000000000000004c .LBB49
     /tmp/ccBqgni8.s:114    .text:0000000000000058 .LBE49
     /tmp/ccBqgni8.s:50     .text:0000000000000020 .LFB30
     /tmp/ccBqgni8.s:82     .text:0000000000000040 .LFE30
     /tmp/ccBqgni8.s:61     .text:000000000000002c .LBB47
     /tmp/ccBqgni8.s:73     .text:0000000000000034 .LBE47
     /tmp/ccBqgni8.s:4216   .debug_loc:00000000000006d2 .LLST1
     /tmp/ccBqgni8.s:10     .text:0000000000000000 .LFB29
     /tmp/ccBqgni8.s:44     .text:0000000000000020 .LFE29
     /tmp/ccBqgni8.s:22     .text:000000000000000c .LBB45
     /tmp/ccBqgni8.s:35     .text:0000000000000014 .LBE45
     /tmp/ccBqgni8.s:4225   .debug_loc:00000000000006f8 .LLST0
     /tmp/ccBqgni8.s:4597   .debug_str:0000000000000aca .LASF177
     /tmp/ccBqgni8.s:4419   .debug_str:00000000000004cb .LASF178
     /tmp/ccBqgni8.s:4411   .debug_str:00000000000004a9 .LASF179
     /tmp/ccBqgni8.s:4423   .debug_str:00000000000004e5 .LASF180
     /tmp/ccBqgni8.s:310    .text:000000000000010c .LVL13
     /tmp/ccBqgni8.s:352    .text:0000000000000140 .LVL18
     /tmp/ccBqgni8.s:374    .text:0000000000000160 .LVL20
     /tmp/ccBqgni8.s:395    .text:000000000000016c .LVL22
     /tmp/ccBqgni8.s:328    .text:0000000000000118 .LVL14
     /tmp/ccBqgni8.s:368    .text:0000000000000154 .LVL19
     /tmp/ccBqgni8.s:508    .text:00000000000001a8 .LVL25
     /tmp/ccBqgni8.s:572    .text:00000000000001d0 .LVL32
     /tmp/ccBqgni8.s:594    .text:00000000000001e4 .LVL33
     /tmp/ccBqgni8.s:617    .text:00000000000001fc .LVL35
     /tmp/ccBqgni8.s:645    .text:000000000000021c .LVL37
     /tmp/ccBqgni8.s:673    .text:000000000000023c .LVL39
     /tmp/ccBqgni8.s:745    .text:0000000000000270 .LVL43
     /tmp/ccBqgni8.s:809    .text:00000000000002b8 .LVL48
     /tmp/ccBqgni8.s:818    .text:00000000000002c4 .LVL49
     /tmp/ccBqgni8.s:839    .text:00000000000002e0 .LVL52
     /tmp/ccBqgni8.s:849    .text:00000000000002ec .LVL54
     /tmp/ccBqgni8.s:880    .text:0000000000000308 .LVL56
     /tmp/ccBqgni8.s:921    .text:0000000000000340 .LVL59
     /tmp/ccBqgni8.s:941    .text:0000000000000354 .LVL60
     /tmp/ccBqgni8.s:967    .text:0000000000000370 .LVL63
     /tmp/ccBqgni8.s:987    .text:0000000000000384 .LVL64
     /tmp/ccBqgni8.s:1013   .text:00000000000003a0 .LVL67
     /tmp/ccBqgni8.s:1033   .text:00000000000003b4 .LVL68
     /tmp/ccBqgni8.s:1059   .text:00000000000003d0 .LVL71
     /tmp/ccBqgni8.s:1078   .text:00000000000003e0 .LVL73
     /tmp/ccBqgni8.s:1091   .text:00000000000003e4 .LVL74
     /tmp/ccBqgni8.s:341    .text:000000000000012c .LVL16
     /tmp/ccBqgni8.s:348    .text:0000000000000138 .LVL17
     /tmp/ccBqgni8.s:389    .text:0000000000000164 .LVL21
     /tmp/ccBqgni8.s:405    .text:0000000000000170 .LVL23
GAS LISTING /tmp/ccBqgni8.s 			page 45


     /tmp/ccBqgni8.s:411    .text:000000000000017c .LVL24
     /tmp/ccBqgni8.s:529    .text:00000000000001bc .LVL27
     /tmp/ccBqgni8.s:710    .text:0000000000000254 .LVL41
     /tmp/ccBqgni8.s:734    .text:0000000000000268 .LVL42
     /tmp/ccBqgni8.s:756    .text:0000000000000278 .LVL44
     /tmp/ccBqgni8.s:767    .text:0000000000000280 .LVL45
     /tmp/ccBqgni8.s:869    .text:0000000000000300 .LVL55
     /tmp/ccBqgni8.s:885    .text:000000000000030c .LVL57
     /tmp/ccBqgni8.s:957    .text:0000000000000368 .LVL62
     /tmp/ccBqgni8.s:1003   .text:0000000000000398 .LVL66
     /tmp/ccBqgni8.s:1049   .text:00000000000003c8 .LVL70
     /tmp/ccBqgni8.s:691    .text:0000000000000248 .LVL40
     /tmp/ccBqgni8.s:537    .text:00000000000001c0 .LVL28
     /tmp/ccBqgni8.s:547    .text:00000000000001c4 .LVL29
     /tmp/ccBqgni8.s:555    .text:00000000000001c8 .LVL30
     /tmp/ccBqgni8.s:564    .text:00000000000001cc .LVL31
     /tmp/ccBqgni8.s:196    .text:00000000000000a0 .LVL9
     /tmp/ccBqgni8.s:206    .text:00000000000000a8 .LVL10
     /tmp/ccBqgni8.s:144    .text:0000000000000078 .LVL6
     /tmp/ccBqgni8.s:154    .text:0000000000000080 .LVL7
     /tmp/ccBqgni8.s:168    .text:0000000000000088 .LVL8
     /tmp/ccBqgni8.s:112    .text:0000000000000058 .LVL4
     /tmp/ccBqgni8.s:118    .text:000000000000005c .LVL5
     /tmp/ccBqgni8.s:60     .text:000000000000002c .LVL2
     /tmp/ccBqgni8.s:70     .text:0000000000000034 .LVL3
     /tmp/ccBqgni8.s:21     .text:000000000000000c .LVL0
     /tmp/ccBqgni8.s:32     .text:0000000000000014 .LVL1
     /tmp/ccBqgni8.s:1120   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccBqgni8.s:378    .text:0000000000000160 .LBB64
     /tmp/ccBqgni8.s:568    .text:00000000000001cc .LBE64
     /tmp/ccBqgni8.s:575    .text:00000000000001d0 .LBB88
     /tmp/ccBqgni8.s:1108   .text:0000000000000400 .LBE88

UNDEFINED SYMBOLS
trap_handler
framePointer
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN15MemoryAllocator18mem_get_free_spaceEv
_ZN15MemoryAllocator26mem_get_largest_free_blockEv
_ZN7KThread12createThreadEPFvPvES0_S0_
_ZN7KThread5startEv
_ZN7KThread7runningE
_ZN7KThread4exitEv
_ZN7KThread8dispatchEv
_ZN10KSemaphore15createSemaphoreEm
_ZN10KSemaphore5closeEv
_ZN10KSemaphore4waitEv
_ZN10KSemaphore6signalEv
__getc
__putc
