GAS LISTING /tmp/cc0n6rZW.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB29:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 10/7/25.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** 
   7:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   8:src/Riscv.cpp **** #include "../h/KThread.hpp"
   9:src/Riscv.cpp **** #include "../h/KSemaphore.hpp"
  10:src/Riscv.cpp **** #include "../lib/hw.h"
  11:src/Riscv.cpp **** #include "../lib/console.h"
  12:src/Riscv.cpp **** 
  13:src/Riscv.cpp **** constexpr uint64 MEM_ALLOC = 0x01;
  14:src/Riscv.cpp **** constexpr uint64 MEM_FREE = 0x02;
  15:src/Riscv.cpp **** constexpr uint64 MEM_GET_FREE_SPACE = 0x03;
  16:src/Riscv.cpp **** constexpr uint64 MEM_GET_LARGEST_FREE_BLOCK = 0x04;
  17:src/Riscv.cpp **** 
  18:src/Riscv.cpp **** constexpr uint64 THREAD_CREATE = 0x11;
  19:src/Riscv.cpp **** constexpr uint64 THREAD_EXIT = 0x12;
  20:src/Riscv.cpp **** constexpr uint64 THREAD_DISPATCH = 0x13;
  21:src/Riscv.cpp **** 
  22:src/Riscv.cpp **** constexpr uint64 SEM_OPEN = 0x21;
  23:src/Riscv.cpp **** constexpr uint64 SEM_CLOSE = 0x22;
  24:src/Riscv.cpp **** constexpr uint64 SEM_WAIT = 0x23;
  25:src/Riscv.cpp **** constexpr uint64 SEM_SIGNAL = 0x24;
  26:src/Riscv.cpp **** 
  27:src/Riscv.cpp **** constexpr uint64 GETC = 0x41;
  28:src/Riscv.cpp **** constexpr uint64 PUTC = 0x42;
  29:src/Riscv.cpp **** 
  30:src/Riscv.cpp **** void Riscv::popSppSpie()
  31:src/Riscv.cpp **** {
  12              		.loc 1 31 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  32:src/Riscv.cpp ****     mc_sstatus(SSTATUS_SPP);
  20              		.loc 1 32 5
  21              	.LVL0:
  22              	.LBB33:
  23              	.LBB34:
  24              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 10/7/25.
GAS LISTING /tmp/cc0n6rZW.s 			page 2


   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/Riscv.hpp **** 
  10:src/../h/Riscv.hpp **** extern uint64 framePointer;
  11:src/../h/Riscv.hpp **** extern "C" void trap_handler();
  12:src/../h/Riscv.hpp **** 
  13:src/../h/Riscv.hpp **** class Riscv {
  14:src/../h/Riscv.hpp **** public:
  15:src/../h/Riscv.hpp ****     static void setupTrapHandler();
  16:src/../h/Riscv.hpp ****     static void trapHandler();
  17:src/../h/Riscv.hpp **** 
  18:src/../h/Riscv.hpp ****     static void popSppSpie();
  19:src/../h/Riscv.hpp **** 
  20:src/../h/Riscv.hpp ****     static uint64 r_scause();
  21:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/Riscv.hpp **** 
  23:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  24:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  25:src/../h/Riscv.hpp **** 
  26:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  27:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  28:src/../h/Riscv.hpp **** 
  29:src/../h/Riscv.hpp ****     static uint64 r_stval();
  30:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  31:src/../h/Riscv.hpp **** 
  32:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  33:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  34:src/../h/Riscv.hpp ****     static uint64 r_sip();
  35:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  36:src/../h/Riscv.hpp **** 
  37:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  38:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  39:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  40:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  41:src/../h/Riscv.hpp **** 
  42:src/../h/Riscv.hpp ****     enum BitMaskSip
  43:src/../h/Riscv.hpp ****     {
  44:src/../h/Riscv.hpp ****         SIP_SSIP = (1 << 1),
  45:src/../h/Riscv.hpp ****         SIP_STIP = (1 << 5),
  46:src/../h/Riscv.hpp ****         SIP_SEIP = (1 << 9),
  47:src/../h/Riscv.hpp ****     };
  48:src/../h/Riscv.hpp **** 
  49:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  50:src/../h/Riscv.hpp ****     {
  51:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  52:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  53:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  54:src/../h/Riscv.hpp ****     };
  55:src/../h/Riscv.hpp **** };
  56:src/../h/Riscv.hpp **** 
  57:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause() {
  58:src/../h/Riscv.hpp ****     uint64 volatile scause;
  59:src/../h/Riscv.hpp ****     asm volatile("csrr %0, scause" : "=r"(scause));
GAS LISTING /tmp/cc0n6rZW.s 			page 3


  60:src/../h/Riscv.hpp ****     return scause;
  61:src/../h/Riscv.hpp **** }
  62:src/../h/Riscv.hpp **** 
  63:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
  64:src/../h/Riscv.hpp ****     asm volatile("csrw scause, %0" :: "r"(scause));
  65:src/../h/Riscv.hpp **** }
  66:src/../h/Riscv.hpp **** 
  67:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc() {
  68:src/../h/Riscv.hpp ****     uint64 volatile sepc;
  69:src/../h/Riscv.hpp ****     asm volatile("csrr %0, sepc" : "=r"(sepc));
  70:src/../h/Riscv.hpp ****     return sepc;
  71:src/../h/Riscv.hpp **** }
  72:src/../h/Riscv.hpp **** 
  73:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
  74:src/../h/Riscv.hpp ****     asm volatile("csrw sepc, %0" :: "r"(sepc));
  75:src/../h/Riscv.hpp **** }
  76:src/../h/Riscv.hpp **** 
  77:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec() {
  78:src/../h/Riscv.hpp ****     uint64 volatile stvec;
  79:src/../h/Riscv.hpp ****     asm volatile("csrr %0, stvec" : "=r"(stvec));
  80:src/../h/Riscv.hpp ****     return stvec;
  81:src/../h/Riscv.hpp **** }
  82:src/../h/Riscv.hpp **** 
  83:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
  84:src/../h/Riscv.hpp ****     asm volatile("csrw stvec, %0" :: "r"(stvec));
  85:src/../h/Riscv.hpp **** }
  86:src/../h/Riscv.hpp **** 
  87:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval() {
  88:src/../h/Riscv.hpp ****     uint64 volatile stval;
  89:src/../h/Riscv.hpp ****     asm volatile("csrr %0, stval" : "=r"(stval));
  90:src/../h/Riscv.hpp ****     return stval;
  91:src/../h/Riscv.hpp **** }
  92:src/../h/Riscv.hpp **** 
  93:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval) {
  94:src/../h/Riscv.hpp ****     asm volatile("csrw stval, %0" :: "r"(stval));
  95:src/../h/Riscv.hpp **** }
  96:src/../h/Riscv.hpp **** 
  97:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
  98:src/../h/Riscv.hpp ****     asm volatile("csrs sip, %0" :: "r"(mask));
  99:src/../h/Riscv.hpp **** }
 100:src/../h/Riscv.hpp **** 
 101:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 102:src/../h/Riscv.hpp ****     asm volatile("csrc sip, %0" :: "r"(mask));
 103:src/../h/Riscv.hpp **** }
 104:src/../h/Riscv.hpp **** 
 105:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip() {
 106:src/../h/Riscv.hpp ****     uint64 volatile sip;
 107:src/../h/Riscv.hpp ****     asm volatile("csrr %0, sip" : "=r"(sip));
 108:src/../h/Riscv.hpp ****     return sip;
 109:src/../h/Riscv.hpp **** }
 110:src/../h/Riscv.hpp **** 
 111:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip) {
 112:src/../h/Riscv.hpp ****     asm volatile("csrw sip, %0" :: "r"(sip));
 113:src/../h/Riscv.hpp **** }
 114:src/../h/Riscv.hpp **** 
 115:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
 116:src/../h/Riscv.hpp ****     asm volatile("csrs sstatus, %0" :: "r"(mask));
GAS LISTING /tmp/cc0n6rZW.s 			page 4


 117:src/../h/Riscv.hpp **** }
 118:src/../h/Riscv.hpp **** 
 119:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
 120:src/../h/Riscv.hpp ****     asm volatile("csrc sstatus, %0" :: "r"(mask));
  25              		.loc 2 120 5
  26              		.loc 2 120 50 is_stmt 0
  27 000c 93070010 		li	a5,256
  28              	#APP
  29              	# 120 "src/../h/Riscv.hpp" 1
 121              	}
  30              		csrc sstatus, a5
  31              	# 0 "" 2
  32              	.LVL1:
  33              	#NO_APP
  34              	.LBE34:
  35              	.LBE33:
  33:src/Riscv.cpp ****     asm volatile("csrw sepc, ra");
  36              		.loc 1 33 5 is_stmt 1
  37              		.loc 1 33 34 is_stmt 0
  38              	#APP
  39              	# 33 "src/Riscv.cpp" 1
  34              	    asm volatile("sret");
  40              		csrw sepc, ra
  41              	# 0 "" 2
  42              		.loc 1 34 5 is_stmt 1
  43              		.loc 1 34 25 is_stmt 0
  44              	# 34 "src/Riscv.cpp" 1
  35              	}
  45              		sret
  46              	# 0 "" 2
  47              		.loc 1 35 1
  48              	#NO_APP
  49 001c 03348100 		ld	s0,8(sp)
  50              		.cfi_restore 8
  51              		.cfi_def_cfa 2, 16
  52 0020 13010101 		addi	sp,sp,16
  53              		.cfi_def_cfa_offset 0
  54 0024 67800000 		jr	ra
  55              		.cfi_endproc
  56              	.LFE29:
  58              		.align	2
  59              		.globl	_ZN5Riscv16setupTrapHandlerEv
  61              	_ZN5Riscv16setupTrapHandlerEv:
  62              	.LFB30:
  36:src/Riscv.cpp **** 
  37:src/Riscv.cpp **** 
  38:src/Riscv.cpp **** void Riscv::setupTrapHandler() {
  63              		.loc 1 38 32 is_stmt 1
  64              		.cfi_startproc
  65 0028 130101FF 		addi	sp,sp,-16
  66              		.cfi_def_cfa_offset 16
  67 002c 23348100 		sd	s0,8(sp)
  68              		.cfi_offset 8, -8
  69 0030 13040101 		addi	s0,sp,16
  70              		.cfi_def_cfa 8, 0
  39:src/Riscv.cpp ****     uint64 addr = (uint64)&trap_handler;
  71              		.loc 1 39 5
GAS LISTING /tmp/cc0n6rZW.s 			page 5


  72              		.loc 1 39 12 is_stmt 0
  73 0034 97070000 		la	a5,trap_handler
  73      83B70700 
  74              	.LVL2:
  40:src/Riscv.cpp ****     w_stvec(addr);
  75              		.loc 1 40 5 is_stmt 1
  76              	.LBB35:
  77              	.LBB36:
  84:src/../h/Riscv.hpp **** }
  78              		.loc 2 84 5
  84:src/../h/Riscv.hpp **** }
  79              		.loc 2 84 49 is_stmt 0
  80              	#APP
  81              	# 84 "src/../h/Riscv.hpp" 1
  82              		csrw stvec, a5
  83              	# 0 "" 2
  84              	.LVL3:
  85              	#NO_APP
  86              	.LBE36:
  87              	.LBE35:
  41:src/Riscv.cpp **** }
  88              		.loc 1 41 1
  89 0040 03348100 		ld	s0,8(sp)
  90              		.cfi_restore 8
  91              		.cfi_def_cfa 2, 16
  92 0044 13010101 		addi	sp,sp,16
  93              		.cfi_def_cfa_offset 0
  94 0048 67800000 		jr	ra
  95              		.cfi_endproc
  96              	.LFE30:
  98              		.align	2
  99              		.globl	_ZN5Riscv11trapHandlerEv
 101              	_ZN5Riscv11trapHandlerEv:
 102              	.LFB31:
  42:src/Riscv.cpp **** 
  43:src/Riscv.cpp **** void Riscv::trapHandler() {
 103              		.loc 1 43 27 is_stmt 1
 104              		.cfi_startproc
 105 004c 130101FB 		addi	sp,sp,-80
 106              		.cfi_def_cfa_offset 80
 107 0050 23341104 		sd	ra,72(sp)
 108 0054 23308104 		sd	s0,64(sp)
 109 0058 233C9102 		sd	s1,56(sp)
 110 005c 23382103 		sd	s2,48(sp)
 111 0060 23343103 		sd	s3,40(sp)
 112              		.cfi_offset 1, -8
 113              		.cfi_offset 8, -16
 114              		.cfi_offset 9, -24
 115              		.cfi_offset 18, -32
 116              		.cfi_offset 19, -40
 117 0064 13040105 		addi	s0,sp,80
 118              		.cfi_def_cfa 8, 0
  44:src/Riscv.cpp ****     uint64 scause = r_scause();
 119              		.loc 1 44 5
 120              	.LBB37:
 121              	.LBB38:
  58:src/../h/Riscv.hpp ****     asm volatile("csrr %0, scause" : "=r"(scause));
GAS LISTING /tmp/cc0n6rZW.s 			page 6


 122              		.loc 2 58 5
  59:src/../h/Riscv.hpp ****     return scause;
 123              		.loc 2 59 5
  59:src/../h/Riscv.hpp ****     return scause;
 124              		.loc 2 59 51 is_stmt 0
 125              	#APP
 126              	# 59 "src/../h/Riscv.hpp" 1
 127              		csrr a5, scause
 128              	# 0 "" 2
 129              	#NO_APP
 130 006c 2330F4FC 		sd	a5,-64(s0)
  60:src/../h/Riscv.hpp **** }
 131              		.loc 2 60 5 is_stmt 1
  60:src/../h/Riscv.hpp **** }
 132              		.loc 2 60 12 is_stmt 0
 133 0070 033704FC 		ld	a4,-64(s0)
 134              	.LVL4:
 135              	.LBE38:
 136              	.LBE37:
  45:src/Riscv.cpp ****     uint64 sepc = r_sepc();
 137              		.loc 1 45 5 is_stmt 1
 138              	.LBB39:
 139              	.LBB40:
  68:src/../h/Riscv.hpp ****     asm volatile("csrr %0, sepc" : "=r"(sepc));
 140              		.loc 2 68 5
  69:src/../h/Riscv.hpp ****     return sepc;
 141              		.loc 2 69 5
  69:src/../h/Riscv.hpp ****     return sepc;
 142              		.loc 2 69 47 is_stmt 0
 143              	#APP
 144              	# 69 "src/../h/Riscv.hpp" 1
 145              		csrr a5, sepc
 146              	# 0 "" 2
 147              	#NO_APP
 148 0078 233CF4FA 		sd	a5,-72(s0)
  70:src/../h/Riscv.hpp **** }
 149              		.loc 2 70 5 is_stmt 1
  70:src/../h/Riscv.hpp **** }
 150              		.loc 2 70 12 is_stmt 0
 151 007c 833484FB 		ld	s1,-72(s0)
 152              	.LVL5:
 153              	.LBE40:
 154              	.LBE39:
  46:src/Riscv.cpp **** 
  47:src/Riscv.cpp ****     uint64 interrupt = scause >> 63;
 155              		.loc 1 47 5 is_stmt 1
 156              		.loc 1 47 12 is_stmt 0
 157 0080 9356F703 		srli	a3,a4,63
 158              	.LVL6:
  48:src/Riscv.cpp ****     uint64 cause = scause & 0x7FFFFFFFFFFFFFFF;
 159              		.loc 1 48 5 is_stmt 1
 160              		.loc 1 48 12 is_stmt 0
 161 0084 9307F0FF 		li	a5,-1
 162 0088 93D71700 		srli	a5,a5,1
 163 008c B377F700 		and	a5,a4,a5
 164              	.LVL7:
  49:src/Riscv.cpp **** 
GAS LISTING /tmp/cc0n6rZW.s 			page 7


  50:src/Riscv.cpp ****     if (interrupt == 0 && (cause == 8 || cause == 9)) {
 165              		.loc 1 50 5 is_stmt 1
 166              	.LBB41:
 167 0090 63480700 		bltz	a4,.L6
 168              		.loc 1 50 39 is_stmt 0 discriminator 1
 169 0094 138787FF 		addi	a4,a5,-8
 170              	.LVL8:
 171              		.loc 1 50 24 discriminator 1
 172 0098 13061000 		li	a2,1
 173 009c 6374E602 		bleu	a4,a2,.L33
 174              	.L6:
  51:src/Riscv.cpp ****         uint64 sstatus = r_sstatus();
  52:src/Riscv.cpp ****         uint64 code;
  53:src/Riscv.cpp ****         asm volatile("mv %0, a0" : "=r"(code));
  54:src/Riscv.cpp **** 
  55:src/Riscv.cpp ****         switch (code) {
  56:src/Riscv.cpp ****             case MEM_ALLOC: {
  57:src/Riscv.cpp ****                 size_t size;
  58:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
  59:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(size));
  60:src/Riscv.cpp ****                 void* ptr = MemoryAllocator::mem_alloc(size);
  61:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(ptr));
  62:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
  63:src/Riscv.cpp ****                 break;
  64:src/Riscv.cpp ****             }
  65:src/Riscv.cpp ****             case MEM_FREE: {
  66:src/Riscv.cpp ****                 void* addr;
  67:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
  68:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(addr));
  69:src/Riscv.cpp ****                 int status = MemoryAllocator::mem_free(addr);
  70:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(status));
  71:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
  72:src/Riscv.cpp ****                 break;
  73:src/Riscv.cpp ****             }
  74:src/Riscv.cpp ****             case MEM_GET_FREE_SPACE: {
  75:src/Riscv.cpp ****                 size_t freeSpace = MemoryAllocator::mem_get_free_space();
  76:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(freeSpace));
  77:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
  78:src/Riscv.cpp ****                 break;
  79:src/Riscv.cpp ****             }
  80:src/Riscv.cpp ****             case MEM_GET_LARGEST_FREE_BLOCK: {
  81:src/Riscv.cpp ****                 size_t largest = MemoryAllocator::mem_get_largest_free_block();
  82:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(largest));
  83:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
  84:src/Riscv.cpp ****                 break;
  85:src/Riscv.cpp ****             }
  86:src/Riscv.cpp ****             case THREAD_CREATE: {
  87:src/Riscv.cpp ****                 KThread** handle = nullptr;
  88:src/Riscv.cpp ****                 void (*start_routine)(void*) = nullptr;
  89:src/Riscv.cpp ****                 void* args = nullptr;
  90:src/Riscv.cpp ****                 void* stack = nullptr;
  91:src/Riscv.cpp **** 
  92:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
  93:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
  94:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
  95:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(start_routine));
  96:src/Riscv.cpp ****                 asm volatile("ld a3, 13*8(%0)" :: "r"(framePointer));
GAS LISTING /tmp/cc0n6rZW.s 			page 8


  97:src/Riscv.cpp ****                 asm volatile("mv %0, a3" : "=r"(args));
  98:src/Riscv.cpp ****                 asm volatile("ld a4, 14*8(%0)" :: "r"(framePointer));
  99:src/Riscv.cpp ****                 asm volatile("mv %0, a4" : "=r"(stack));
 100:src/Riscv.cpp **** 
 101:src/Riscv.cpp ****                 *handle = KThread::createThread(start_routine, args, stack);
 102:src/Riscv.cpp **** 
 103:src/Riscv.cpp ****                 if (*handle != nullptr) {
 104:src/Riscv.cpp ****                     (*handle)->start();
 105:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 106:src/Riscv.cpp ****                 }
 107:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 108:src/Riscv.cpp **** 
 109:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 110:src/Riscv.cpp **** 
 111:src/Riscv.cpp ****                 break;
 112:src/Riscv.cpp ****             }
 113:src/Riscv.cpp ****             case THREAD_EXIT: {
 114:src/Riscv.cpp ****                 if (KThread::running) {
 115:src/Riscv.cpp ****                     KThread::running->exit();
 116:src/Riscv.cpp ****                 }
 117:src/Riscv.cpp ****                 KThread::dispatch();
 118:src/Riscv.cpp **** 
 119:src/Riscv.cpp ****                 asm volatile("li a0, 0");
 120:src/Riscv.cpp **** 
 121:src/Riscv.cpp ****                 break;
 122:src/Riscv.cpp ****             }
 123:src/Riscv.cpp ****             case THREAD_DISPATCH: {
 124:src/Riscv.cpp ****                 KThread::dispatch();
 125:src/Riscv.cpp **** 
 126:src/Riscv.cpp ****                 break;
 127:src/Riscv.cpp ****             }
 128:src/Riscv.cpp ****             case SEM_OPEN: {
 129:src/Riscv.cpp ****                 KSemaphore** handle = nullptr;
 130:src/Riscv.cpp ****                 unsigned init;
 131:src/Riscv.cpp **** 
 132:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 133:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 134:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 135:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(init));
 136:src/Riscv.cpp **** 
 137:src/Riscv.cpp ****                 *handle = KSemaphore::createSemaphore(init);
 138:src/Riscv.cpp **** 
 139:src/Riscv.cpp ****                 if (*handle != nullptr) asm volatile("li a0, 0");
 140:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 141:src/Riscv.cpp **** 
 142:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 143:src/Riscv.cpp **** 
 144:src/Riscv.cpp ****                 break;
 145:src/Riscv.cpp ****             }
 146:src/Riscv.cpp ****             case SEM_CLOSE: {
 147:src/Riscv.cpp ****                 KSemaphore* handle = nullptr;
 148:src/Riscv.cpp **** 
 149:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 150:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 151:src/Riscv.cpp **** 
 152:src/Riscv.cpp ****                 if (handle) {
 153:src/Riscv.cpp ****                     handle->close();
GAS LISTING /tmp/cc0n6rZW.s 			page 9


 154:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 155:src/Riscv.cpp ****                 }
 156:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 157:src/Riscv.cpp **** 
 158:src/Riscv.cpp ****                 break;
 159:src/Riscv.cpp ****             }
 160:src/Riscv.cpp ****             case SEM_WAIT: {
 161:src/Riscv.cpp ****                 KSemaphore* handle = nullptr;
 162:src/Riscv.cpp **** 
 163:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 164:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 165:src/Riscv.cpp **** 
 166:src/Riscv.cpp ****                 if (handle) {
 167:src/Riscv.cpp ****                     handle->wait();
 168:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 169:src/Riscv.cpp ****                 }
 170:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 171:src/Riscv.cpp **** 
 172:src/Riscv.cpp ****                 break;
 173:src/Riscv.cpp ****             }
 174:src/Riscv.cpp ****             case SEM_SIGNAL: {
 175:src/Riscv.cpp ****                 KSemaphore* handle = nullptr;
 176:src/Riscv.cpp **** 
 177:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 178:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 179:src/Riscv.cpp **** 
 180:src/Riscv.cpp ****                 if (handle) {
 181:src/Riscv.cpp ****                     handle->signal();
 182:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 183:src/Riscv.cpp ****                 }
 184:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 185:src/Riscv.cpp **** 
 186:src/Riscv.cpp ****                 break;
 187:src/Riscv.cpp ****             }
 188:src/Riscv.cpp ****             case GETC: {
 189:src/Riscv.cpp ****                 int c = __getc();
 190:src/Riscv.cpp ****                 asm volatile ("mv t0, %0" : : "r"(c));
 191:src/Riscv.cpp ****                 asm volatile ("sw t0, 80(x8)");
 192:src/Riscv.cpp ****                 break;
 193:src/Riscv.cpp ****             }
 194:src/Riscv.cpp ****             case PUTC: {
 195:src/Riscv.cpp ****                 char c;
 196:src/Riscv.cpp ****                 asm volatile ("mv %0, a1" : "=r" (c));
 197:src/Riscv.cpp ****                 __putc(c);
 198:src/Riscv.cpp ****                 break;
 199:src/Riscv.cpp ****             }
 200:src/Riscv.cpp ****             default:
 201:src/Riscv.cpp ****                 break;
 202:src/Riscv.cpp ****         }
 203:src/Riscv.cpp **** 
 204:src/Riscv.cpp ****         sepc += 4;
 205:src/Riscv.cpp ****         w_sepc(sepc);
 206:src/Riscv.cpp ****         w_sstatus(sstatus);
 207:src/Riscv.cpp ****     }
 208:src/Riscv.cpp ****     else if (interrupt == 1 && cause == 1) {
 175              		.loc 1 208 10 is_stmt 1
 176 00a0 6390062A 		bnez	a3,.L34
GAS LISTING /tmp/cc0n6rZW.s 			page 10


 177              	.L31:
 209:src/Riscv.cpp ****         mc_sip(SIP_SSIP);
 210:src/Riscv.cpp ****     }
 211:src/Riscv.cpp ****     else if (interrupt == 1 && cause == 9) {
 178              		.loc 1 211 10
 179 00a4 6398062A 		bnez	a3,.L35
 180              	.LVL9:
 181              	.L5:
 182              	.LBE41:
 212:src/Riscv.cpp ****         console_handler();
 213:src/Riscv.cpp ****     }
 214:src/Riscv.cpp **** }...
 183              		.loc 1 214 1 is_stmt 0
 184 00a8 83308104 		ld	ra,72(sp)
 185              		.cfi_remember_state
 186              		.cfi_restore 1
 187 00ac 03340104 		ld	s0,64(sp)
 188              		.cfi_restore 8
 189              		.cfi_def_cfa 2, 80
 190 00b0 83348103 		ld	s1,56(sp)
 191              		.cfi_restore 9
 192              	.LVL10:
 193 00b4 03390103 		ld	s2,48(sp)
 194              		.cfi_restore 18
 195 00b8 83398102 		ld	s3,40(sp)
 196              		.cfi_restore 19
 197 00bc 13010105 		addi	sp,sp,80
 198              		.cfi_def_cfa_offset 0
 199 00c0 67800000 		jr	ra
 200              	.LVL11:
 201              	.L33:
 202              		.cfi_restore_state
 203              	.LBB64:
 204              	.LBB42:
  51:src/Riscv.cpp ****         uint64 sstatus = r_sstatus();
 205              		.loc 1 51 9 is_stmt 1
 206              	.LBB43:
 207              	.LBB44:
 122:src/../h/Riscv.hpp **** 
 123:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus() {
 124:src/../h/Riscv.hpp ****     uint64 volatile sstatus;
 208              		.loc 2 124 5
 125:src/../h/Riscv.hpp ****     asm volatile("csrr %0, sstatus" : "=r"(sstatus));
 209              		.loc 2 125 5
 210              		.loc 2 125 53 is_stmt 0
 211              	#APP
 212              	# 125 "src/../h/Riscv.hpp" 1
 126              	    return sstatus;
 213              		csrr a5, sstatus
 214              	# 0 "" 2
 215              	.LVL12:
 216              	#NO_APP
 217 00c8 2334F4FC 		sd	a5,-56(s0)
 218              		.loc 2 126 5 is_stmt 1
 219              		.loc 2 126 12 is_stmt 0
 220 00cc 033984FC 		ld	s2,-56(s0)
 221              	.LVL13:
GAS LISTING /tmp/cc0n6rZW.s 			page 11


 222              	.LBE44:
 223              	.LBE43:
  52:src/Riscv.cpp ****         uint64 code;
 224              		.loc 1 52 9 is_stmt 1
  53:src/Riscv.cpp ****         asm volatile("mv %0, a0" : "=r"(code));
 225              		.loc 1 53 9
  53:src/Riscv.cpp ****         asm volatile("mv %0, a0" : "=r"(code));
 226              		.loc 1 53 47 is_stmt 0
 227              	#APP
 228              	# 53 "src/Riscv.cpp" 1
 229              		mv a5, a0
 230              	# 0 "" 2
 231              	.LVL14:
  55:src/Riscv.cpp ****         switch (code) {
 232              		.loc 1 55 9 is_stmt 1
 233              	#NO_APP
 234 00d4 13072004 		li	a4,66
 235              	.LVL15:
 236 00d8 6364F704 		bgtu	a5,a4,.L7
 237 00dc 93972700 		slli	a5,a5,2
 238              	.LVL16:
 239 00e0 17070000 		lla	a4,.L9
 239      13070700 
 240 00e8 B387E700 		add	a5,a5,a4
 241 00ec 83A70700 		lw	a5,0(a5)
 242 00f0 B387E700 		add	a5,a5,a4
 243 00f4 67800700 		jr	a5
 244              		.section	.rodata
 245              		.align	2
 246              		.align	2
 247              	.L9:
 248 0000 00000000 		.word	.L7-.L9
 249 0004 00000000 		.word	.L21-.L9
 250 0008 00000000 		.word	.L20-.L9
 251 000c 00000000 		.word	.L19-.L9
 252 0010 00000000 		.word	.L18-.L9
 253 0014 00000000 		.word	.L7-.L9
 254 0018 00000000 		.word	.L7-.L9
 255 001c 00000000 		.word	.L7-.L9
 256 0020 00000000 		.word	.L7-.L9
 257 0024 00000000 		.word	.L7-.L9
 258 0028 00000000 		.word	.L7-.L9
 259 002c 00000000 		.word	.L7-.L9
 260 0030 00000000 		.word	.L7-.L9
 261 0034 00000000 		.word	.L7-.L9
 262 0038 00000000 		.word	.L7-.L9
 263 003c 00000000 		.word	.L7-.L9
 264 0040 00000000 		.word	.L7-.L9
 265 0044 00000000 		.word	.L17-.L9
 266 0048 00000000 		.word	.L16-.L9
 267 004c 00000000 		.word	.L15-.L9
 268 0050 00000000 		.word	.L7-.L9
 269 0054 00000000 		.word	.L7-.L9
 270 0058 00000000 		.word	.L7-.L9
 271 005c 00000000 		.word	.L7-.L9
 272 0060 00000000 		.word	.L7-.L9
 273 0064 00000000 		.word	.L7-.L9
GAS LISTING /tmp/cc0n6rZW.s 			page 12


 274 0068 00000000 		.word	.L7-.L9
 275 006c 00000000 		.word	.L7-.L9
 276 0070 00000000 		.word	.L7-.L9
 277 0074 00000000 		.word	.L7-.L9
 278 0078 00000000 		.word	.L7-.L9
 279 007c 00000000 		.word	.L7-.L9
 280 0080 00000000 		.word	.L7-.L9
 281 0084 00000000 		.word	.L14-.L9
 282 0088 00000000 		.word	.L13-.L9
 283 008c 00000000 		.word	.L12-.L9
 284 0090 00000000 		.word	.L11-.L9
 285 0094 00000000 		.word	.L7-.L9
 286 0098 00000000 		.word	.L7-.L9
 287 009c 00000000 		.word	.L7-.L9
 288 00a0 00000000 		.word	.L7-.L9
 289 00a4 00000000 		.word	.L7-.L9
 290 00a8 00000000 		.word	.L7-.L9
 291 00ac 00000000 		.word	.L7-.L9
 292 00b0 00000000 		.word	.L7-.L9
 293 00b4 00000000 		.word	.L7-.L9
 294 00b8 00000000 		.word	.L7-.L9
 295 00bc 00000000 		.word	.L7-.L9
 296 00c0 00000000 		.word	.L7-.L9
 297 00c4 00000000 		.word	.L7-.L9
 298 00c8 00000000 		.word	.L7-.L9
 299 00cc 00000000 		.word	.L7-.L9
 300 00d0 00000000 		.word	.L7-.L9
 301 00d4 00000000 		.word	.L7-.L9
 302 00d8 00000000 		.word	.L7-.L9
 303 00dc 00000000 		.word	.L7-.L9
 304 00e0 00000000 		.word	.L7-.L9
 305 00e4 00000000 		.word	.L7-.L9
 306 00e8 00000000 		.word	.L7-.L9
 307 00ec 00000000 		.word	.L7-.L9
 308 00f0 00000000 		.word	.L7-.L9
 309 00f4 00000000 		.word	.L7-.L9
 310 00f8 00000000 		.word	.L7-.L9
 311 00fc 00000000 		.word	.L7-.L9
 312 0100 00000000 		.word	.L7-.L9
 313 0104 00000000 		.word	.L10-.L9
 314 0108 00000000 		.word	.L8-.L9
 315              		.text
 316              	.L21:
 317              	.LBB45:
  56:src/Riscv.cpp ****             case MEM_ALLOC: {
 318              		.loc 1 56 13
  56:src/Riscv.cpp ****             case MEM_ALLOC: {
 319              		.loc 1 56 29
 320              	.LBB46:
  57:src/Riscv.cpp ****                 size_t size;
 321              		.loc 1 57 17
  58:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 322              		.loc 1 58 17
  58:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 323              		.loc 1 58 69 is_stmt 0
 324 00f8 97090000 		la	s3,framePointer
 324      83B90900 
GAS LISTING /tmp/cc0n6rZW.s 			page 13


 325 0100 83B70900 		ld	a5,0(s3)
 326              	#APP
 327              	# 58 "src/Riscv.cpp" 1
  59:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(size));
 328              		ld a1, 11*8(a5)
 329              	# 0 "" 2
 330              		.loc 1 59 17 is_stmt 1
  59:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(size));
 331              		.loc 1 59 55 is_stmt 0
 332              	# 59 "src/Riscv.cpp" 1
 333              		mv a0, a1
 334              	# 0 "" 2
 335              	.LVL17:
  60:src/Riscv.cpp ****                 void* ptr = MemoryAllocator::mem_alloc(size);
 336              		.loc 1 60 17 is_stmt 1
  60:src/Riscv.cpp ****                 void* ptr = MemoryAllocator::mem_alloc(size);
 337              		.loc 1 60 55 is_stmt 0
 338              	#NO_APP
 339 010c 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 339      E7800000 
 340              	.LVL18:
  61:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(ptr));
 341              		.loc 1 61 17 is_stmt 1
  61:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(ptr));
 342              		.loc 1 61 54 is_stmt 0
 343              	#APP
 344              	# 61 "src/Riscv.cpp" 1
  62:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 345              		mv a0, a0
 346              	# 0 "" 2
 347              		.loc 1 62 17 is_stmt 1
  62:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 348              		.loc 1 62 69 is_stmt 0
 349              	#NO_APP
 350 0118 83B70900 		ld	a5,0(s3)
 351              	#APP
 352              	# 62 "src/Riscv.cpp" 1
  63:src/Riscv.cpp ****                 break;
 353              		sd a0, 10*8(a5)
 354              	# 0 "" 2
 355              		.loc 1 63 17 is_stmt 1
 356              	.LVL19:
 357              	#NO_APP
 358              	.L7:
 359              	.LBE46:
 360              	.LBE45:
 204:src/Riscv.cpp ****         sepc += 4;
 361              		.loc 1 204 9
 204:src/Riscv.cpp ****         sepc += 4;
 362              		.loc 1 204 14 is_stmt 0
 363 0120 93844400 		addi	s1,s1,4
 364              	.LVL20:
 205:src/Riscv.cpp ****         w_sepc(sepc);
 365              		.loc 1 205 9 is_stmt 1
 366              	.LBB57:
 367              	.LBB58:
  74:src/../h/Riscv.hpp **** }
GAS LISTING /tmp/cc0n6rZW.s 			page 14


 368              		.loc 2 74 5
  74:src/../h/Riscv.hpp **** }
 369              		.loc 2 74 47 is_stmt 0
 370              	#APP
 371              	# 74 "src/../h/Riscv.hpp" 1
 372              		csrw sepc, s1
 373              	# 0 "" 2
 374              	.LVL21:
 375              	#NO_APP
 376              	.LBE58:
 377              	.LBE57:
 206:src/Riscv.cpp ****         w_sstatus(sstatus);
 378              		.loc 1 206 9 is_stmt 1
 379              	.LBB59:
 380              	.LBB60:
 127:src/../h/Riscv.hpp **** }
 128:src/../h/Riscv.hpp **** 
 129:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus) {
 130:src/../h/Riscv.hpp ****     asm volatile("csrw sstatus, %0" :: "r"(sstatus));
 381              		.loc 2 130 5
 382              		.loc 2 130 53 is_stmt 0
 383              	#APP
 384              	# 130 "src/../h/Riscv.hpp" 1
 131              	}
 385              		csrw sstatus, s2
 386              	# 0 "" 2
 387              		.loc 2 131 1
 388              	#NO_APP
 389 012c 6FF0DFF7 		j	.L5
 390              	.LVL22:
 391              	.L20:
 392              	.LBE60:
 393              	.LBE59:
 394              	.LBB61:
  65:src/Riscv.cpp ****             case MEM_FREE: {
 395              		.loc 1 65 13 is_stmt 1
  65:src/Riscv.cpp ****             case MEM_FREE: {
 396              		.loc 1 65 28
 397              	.LBB47:
  66:src/Riscv.cpp ****                 void* addr;
 398              		.loc 1 66 17
  67:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 399              		.loc 1 67 17
  67:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 400              		.loc 1 67 69 is_stmt 0
 401 0130 97090000 		la	s3,framePointer
 401      83B90900 
 402 0138 83B70900 		ld	a5,0(s3)
 403              	#APP
 404              	# 67 "src/Riscv.cpp" 1
  68:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(addr));
 405              		ld a1, 11*8(a5)
 406              	# 0 "" 2
 407              		.loc 1 68 17 is_stmt 1
  68:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(addr));
 408              		.loc 1 68 55 is_stmt 0
 409              	# 68 "src/Riscv.cpp" 1
GAS LISTING /tmp/cc0n6rZW.s 			page 15


 410              		mv a0, a1
 411              	# 0 "" 2
 412              	.LVL23:
  69:src/Riscv.cpp ****                 int status = MemoryAllocator::mem_free(addr);
 413              		.loc 1 69 17 is_stmt 1
  69:src/Riscv.cpp ****                 int status = MemoryAllocator::mem_free(addr);
 414              		.loc 1 69 55 is_stmt 0
 415              	#NO_APP
 416 0144 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 416      E7800000 
 417              	.LVL24:
  70:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(status));
 418              		.loc 1 70 17 is_stmt 1
  70:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(status));
 419              		.loc 1 70 57 is_stmt 0
 420              	#APP
 421              	# 70 "src/Riscv.cpp" 1
  71:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 422              		mv a0, a0
 423              	# 0 "" 2
 424              		.loc 1 71 17 is_stmt 1
  71:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 425              		.loc 1 71 69 is_stmt 0
 426              	#NO_APP
 427 0150 83B70900 		ld	a5,0(s3)
 428              	#APP
 429              	# 71 "src/Riscv.cpp" 1
  72:src/Riscv.cpp ****                 break;
 430              		sd a0, 10*8(a5)
 431              	# 0 "" 2
 432              		.loc 1 72 17 is_stmt 1
 433              	#NO_APP
 434 0158 6FF09FFC 		j	.L7
 435              	.LVL25:
 436              	.L19:
 437              	.LBE47:
  74:src/Riscv.cpp ****             case MEM_GET_FREE_SPACE: {
 438              		.loc 1 74 13
  74:src/Riscv.cpp ****             case MEM_GET_FREE_SPACE: {
 439              		.loc 1 74 38
 440              	.LBB48:
  75:src/Riscv.cpp ****                 size_t freeSpace = MemoryAllocator::mem_get_free_space();
 441              		.loc 1 75 17
  75:src/Riscv.cpp ****                 size_t freeSpace = MemoryAllocator::mem_get_free_space();
 442              		.loc 1 75 71 is_stmt 0
 443 015c 97000000 		call	_ZN15MemoryAllocator18mem_get_free_spaceEv@plt
 443      E7800000 
 444              	.LVL26:
  76:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(freeSpace));
 445              		.loc 1 76 17 is_stmt 1
  76:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(freeSpace));
 446              		.loc 1 76 60 is_stmt 0
 447              	#APP
 448              	# 76 "src/Riscv.cpp" 1
  77:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 449              		mv a0, a0
 450              	# 0 "" 2
GAS LISTING /tmp/cc0n6rZW.s 			page 16


 451              		.loc 1 77 17 is_stmt 1
  77:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 452              		.loc 1 77 69 is_stmt 0
 453              	#NO_APP
 454 0168 97070000 		la	a5,framePointer
 454      83B70700 
 455 0170 83B70700 		ld	a5,0(a5)
 456              	#APP
 457              	# 77 "src/Riscv.cpp" 1
  78:src/Riscv.cpp ****                 break;
 458              		sd a0, 10*8(a5)
 459              	# 0 "" 2
 460              		.loc 1 78 17 is_stmt 1
 461              	#NO_APP
 462 0178 6FF09FFA 		j	.L7
 463              	.LVL27:
 464              	.L18:
 465              	.LBE48:
  80:src/Riscv.cpp ****             case MEM_GET_LARGEST_FREE_BLOCK: {
 466              		.loc 1 80 13
  80:src/Riscv.cpp ****             case MEM_GET_LARGEST_FREE_BLOCK: {
 467              		.loc 1 80 46
 468              	.LBB49:
  81:src/Riscv.cpp ****                 size_t largest = MemoryAllocator::mem_get_largest_free_block();
 469              		.loc 1 81 17
  81:src/Riscv.cpp ****                 size_t largest = MemoryAllocator::mem_get_largest_free_block();
 470              		.loc 1 81 77 is_stmt 0
 471 017c 97000000 		call	_ZN15MemoryAllocator26mem_get_largest_free_blockEv@plt
 471      E7800000 
 472              	.LVL28:
  82:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(largest));
 473              		.loc 1 82 17 is_stmt 1
  82:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(largest));
 474              		.loc 1 82 58 is_stmt 0
 475              	#APP
 476              	# 82 "src/Riscv.cpp" 1
  83:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 477              		mv a0, a0
 478              	# 0 "" 2
 479              		.loc 1 83 17 is_stmt 1
  83:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 480              		.loc 1 83 69 is_stmt 0
 481              	#NO_APP
 482 0188 97070000 		la	a5,framePointer
 482      83B70700 
 483 0190 83B70700 		ld	a5,0(a5)
 484              	#APP
 485              	# 83 "src/Riscv.cpp" 1
  84:src/Riscv.cpp ****                 break;
 486              		sd a0, 10*8(a5)
 487              	# 0 "" 2
 488              		.loc 1 84 17 is_stmt 1
 489              	#NO_APP
 490 0198 6FF09FF8 		j	.L7
 491              	.LVL29:
 492              	.L17:
 493              	.LBE49:
GAS LISTING /tmp/cc0n6rZW.s 			page 17


  86:src/Riscv.cpp ****             case THREAD_CREATE: {
 494              		.loc 1 86 13
  86:src/Riscv.cpp ****             case THREAD_CREATE: {
 495              		.loc 1 86 33
 496              	.LBB50:
  87:src/Riscv.cpp ****                 KThread** handle = nullptr;
 497              		.loc 1 87 17
  88:src/Riscv.cpp ****                 void (*start_routine)(void*) = nullptr;
 498              		.loc 1 88 17
  89:src/Riscv.cpp ****                 void* args = nullptr;
 499              		.loc 1 89 17
  90:src/Riscv.cpp ****                 void* stack = nullptr;
 500              		.loc 1 90 17
  92:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 501              		.loc 1 92 17
  92:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 502              		.loc 1 92 69 is_stmt 0
 503 019c 97070000 		la	a5,framePointer
 503      83B70700 
 504 01a4 83B70700 		ld	a5,0(a5)
 505              	#APP
 506              	# 92 "src/Riscv.cpp" 1
  93:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 507              		ld a1, 11*8(a5)
 508              	# 0 "" 2
 509              		.loc 1 93 17 is_stmt 1
  93:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 510              		.loc 1 93 57 is_stmt 0
 511              	# 93 "src/Riscv.cpp" 1
 512              		mv s3, a1
 513              	# 0 "" 2
 514              	.LVL30:
  94:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 515              		.loc 1 94 17 is_stmt 1
  94:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 516              		.loc 1 94 69 is_stmt 0
 517              	# 94 "src/Riscv.cpp" 1
  95:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(start_routine));
 518              		ld a2, 12*8(a5)
 519              	# 0 "" 2
 520              		.loc 1 95 17 is_stmt 1
  95:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(start_routine));
 521              		.loc 1 95 64 is_stmt 0
 522              	# 95 "src/Riscv.cpp" 1
 523              		mv a0, a2
 524              	# 0 "" 2
 525              	.LVL31:
  96:src/Riscv.cpp ****                 asm volatile("ld a3, 13*8(%0)" :: "r"(framePointer));
 526              		.loc 1 96 17 is_stmt 1
  96:src/Riscv.cpp ****                 asm volatile("ld a3, 13*8(%0)" :: "r"(framePointer));
 527              		.loc 1 96 69 is_stmt 0
 528              	# 96 "src/Riscv.cpp" 1
  97:src/Riscv.cpp ****                 asm volatile("mv %0, a3" : "=r"(args));
 529              		ld a3, 13*8(a5)
 530              	# 0 "" 2
 531              		.loc 1 97 17 is_stmt 1
  97:src/Riscv.cpp ****                 asm volatile("mv %0, a3" : "=r"(args));
GAS LISTING /tmp/cc0n6rZW.s 			page 18


 532              		.loc 1 97 55 is_stmt 0
 533              	# 97 "src/Riscv.cpp" 1
 534              		mv a1, a3
 535              	# 0 "" 2
 536              	.LVL32:
  98:src/Riscv.cpp ****                 asm volatile("ld a4, 14*8(%0)" :: "r"(framePointer));
 537              		.loc 1 98 17 is_stmt 1
  98:src/Riscv.cpp ****                 asm volatile("ld a4, 14*8(%0)" :: "r"(framePointer));
 538              		.loc 1 98 69 is_stmt 0
 539              	# 98 "src/Riscv.cpp" 1
  99:src/Riscv.cpp ****                 asm volatile("mv %0, a4" : "=r"(stack));
 540              		ld a4, 14*8(a5)
 541              	# 0 "" 2
 542              		.loc 1 99 17 is_stmt 1
  99:src/Riscv.cpp ****                 asm volatile("mv %0, a4" : "=r"(stack));
 543              		.loc 1 99 56 is_stmt 0
 544              	# 99 "src/Riscv.cpp" 1
 545              		mv a2, a4
 546              	# 0 "" 2
 547              	.LVL33:
 101:src/Riscv.cpp ****                 *handle = KThread::createThread(start_routine, args, stack);
 548              		.loc 1 101 17 is_stmt 1
 101:src/Riscv.cpp ****                 *handle = KThread::createThread(start_routine, args, stack);
 549              		.loc 1 101 48 is_stmt 0
 550              	#NO_APP
 551 01c8 97000000 		call	_ZN7KThread12createThreadEPFvPvES0_S0_@plt
 551      E7800000 
 552              	.LVL34:
 101:src/Riscv.cpp ****                 *handle = KThread::createThread(start_routine, args, stack);
 553              		.loc 1 101 25
 554 01d0 23B0A900 		sd	a0,0(s3)
 103:src/Riscv.cpp ****                 if (*handle != nullptr) {
 555              		.loc 1 103 17 is_stmt 1
 556 01d4 63020502 		beqz	a0,.L22
 104:src/Riscv.cpp ****                     (*handle)->start();
 557              		.loc 1 104 21
 104:src/Riscv.cpp ****                     (*handle)->start();
 558              		.loc 1 104 37 is_stmt 0
 559 01d8 97000000 		call	_ZN7KThread5startEv@plt
 559      E7800000 
 560              	.LVL35:
 105:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 561              		.loc 1 105 21 is_stmt 1
 105:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 562              		.loc 1 105 45 is_stmt 0
 563              	#APP
 564              	# 105 "src/Riscv.cpp" 1
 565              		li a0, 0
 566              	# 0 "" 2
 567              	#NO_APP
 568              	.L23:
 109:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 569              		.loc 1 109 17 is_stmt 1
 109:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 570              		.loc 1 109 69 is_stmt 0
 571 01e4 97070000 		la	a5,framePointer
 571      83B70700 
GAS LISTING /tmp/cc0n6rZW.s 			page 19


 572 01ec 83B70700 		ld	a5,0(a5)
 573              	#APP
 574              	# 109 "src/Riscv.cpp" 1
 111:src/Riscv.cpp ****                 break;
 575              		sd a0, 10*8(a5)
 576              	# 0 "" 2
 577              		.loc 1 111 17 is_stmt 1
 578              	#NO_APP
 579 01f4 6FF0DFF2 		j	.L7
 580              	.L22:
 107:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 581              		.loc 1 107 22
 107:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 582              		.loc 1 107 47 is_stmt 0
 583              	#APP
 584              	# 107 "src/Riscv.cpp" 1
 585              		li a0, -1
 586              	# 0 "" 2
 587              	#NO_APP
 588 01fc 6FF09FFE 		j	.L23
 589              	.LVL36:
 590              	.L16:
 591              	.LBE50:
 113:src/Riscv.cpp ****             case THREAD_EXIT: {
 592              		.loc 1 113 13 is_stmt 1
 113:src/Riscv.cpp ****             case THREAD_EXIT: {
 593              		.loc 1 113 31
 114:src/Riscv.cpp ****                 if (KThread::running) {
 594              		.loc 1 114 17
 114:src/Riscv.cpp ****                 if (KThread::running) {
 595              		.loc 1 114 37 is_stmt 0
 596 0200 97070000 		la	a5,_ZN7KThread7runningE
 596      83B70700 
 597 0208 03B50700 		ld	a0,0(a5)
 114:src/Riscv.cpp ****                 if (KThread::running) {
 598              		.loc 1 114 17
 599 020c 63060500 		beqz	a0,.L24
 115:src/Riscv.cpp ****                     KThread::running->exit();
 600              		.loc 1 115 21 is_stmt 1
 115:src/Riscv.cpp ****                     KThread::running->exit();
 601              		.loc 1 115 43 is_stmt 0
 602 0210 97000000 		call	_ZN7KThread4exitEv@plt
 602      E7800000 
 603              	.LVL37:
 604              	.L24:
 117:src/Riscv.cpp ****                 KThread::dispatch();
 605              		.loc 1 117 17 is_stmt 1
 117:src/Riscv.cpp ****                 KThread::dispatch();
 606              		.loc 1 117 34 is_stmt 0
 607 0218 97000000 		call	_ZN7KThread8dispatchEv@plt
 607      E7800000 
 608              	.LVL38:
 119:src/Riscv.cpp ****                 asm volatile("li a0, 0");
 609              		.loc 1 119 17 is_stmt 1
 119:src/Riscv.cpp ****                 asm volatile("li a0, 0");
 610              		.loc 1 119 41 is_stmt 0
 611              	#APP
GAS LISTING /tmp/cc0n6rZW.s 			page 20


 612              	# 119 "src/Riscv.cpp" 1
 121:src/Riscv.cpp ****                 break;
 613              		li a0, 0
 614              	# 0 "" 2
 615              		.loc 1 121 17 is_stmt 1
 616              	#NO_APP
 617 0224 6FF0DFEF 		j	.L7
 618              	.LVL39:
 619              	.L15:
 123:src/Riscv.cpp ****             case THREAD_DISPATCH: {
 620              		.loc 1 123 13
 123:src/Riscv.cpp ****             case THREAD_DISPATCH: {
 621              		.loc 1 123 35
 124:src/Riscv.cpp ****                 KThread::dispatch();
 622              		.loc 1 124 17
 124:src/Riscv.cpp ****                 KThread::dispatch();
 623              		.loc 1 124 34 is_stmt 0
 624 0228 97000000 		call	_ZN7KThread8dispatchEv@plt
 624      E7800000 
 625              	.LVL40:
 126:src/Riscv.cpp ****                 break;
 626              		.loc 1 126 17 is_stmt 1
 627 0230 6FF01FEF 		j	.L7
 628              	.LVL41:
 629              	.L14:
 128:src/Riscv.cpp ****             case SEM_OPEN: {
 630              		.loc 1 128 13
 128:src/Riscv.cpp ****             case SEM_OPEN: {
 631              		.loc 1 128 28
 632              	.LBB51:
 129:src/Riscv.cpp ****                 KSemaphore** handle = nullptr;
 633              		.loc 1 129 17
 130:src/Riscv.cpp ****                 unsigned init;
 634              		.loc 1 130 17
 132:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 635              		.loc 1 132 17
 132:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 636              		.loc 1 132 69 is_stmt 0
 637 0234 97070000 		la	a5,framePointer
 637      83B70700 
 638 023c 83B70700 		ld	a5,0(a5)
 639              	#APP
 640              	# 132 "src/Riscv.cpp" 1
 133:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 641              		ld a1, 11*8(a5)
 642              	# 0 "" 2
 643              		.loc 1 133 17 is_stmt 1
 133:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 644              		.loc 1 133 57 is_stmt 0
 645              	# 133 "src/Riscv.cpp" 1
 646              		mv s3, a1
 647              	# 0 "" 2
 648              	.LVL42:
 134:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 649              		.loc 1 134 17 is_stmt 1
 134:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 650              		.loc 1 134 69 is_stmt 0
GAS LISTING /tmp/cc0n6rZW.s 			page 21


 651              	# 134 "src/Riscv.cpp" 1
 135:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(init));
 652              		ld a2, 12*8(a5)
 653              	# 0 "" 2
 654              		.loc 1 135 17 is_stmt 1
 135:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(init));
 655              		.loc 1 135 55 is_stmt 0
 656              	# 135 "src/Riscv.cpp" 1
 657              		mv a0, a2
 658              	# 0 "" 2
 659              	.LVL43:
 137:src/Riscv.cpp ****                 *handle = KSemaphore::createSemaphore(init);
 660              		.loc 1 137 17 is_stmt 1
 137:src/Riscv.cpp ****                 *handle = KSemaphore::createSemaphore(init);
 661              		.loc 1 137 54 is_stmt 0
 662              	#NO_APP
 663 0250 13150502 		slli	a0,a0,32
 664              	.LVL44:
 665 0254 13550502 		srli	a0,a0,32
 666 0258 97000000 		call	_ZN10KSemaphore15createSemaphoreEm@plt
 666      E7800000 
 667              	.LVL45:
 137:src/Riscv.cpp ****                 *handle = KSemaphore::createSemaphore(init);
 668              		.loc 1 137 25
 669 0260 23B0A900 		sd	a0,0(s3)
 139:src/Riscv.cpp ****                 if (*handle != nullptr) asm volatile("li a0, 0");
 670              		.loc 1 139 17 is_stmt 1
 671 0264 630E0500 		beqz	a0,.L25
 139:src/Riscv.cpp ****                 if (*handle != nullptr) asm volatile("li a0, 0");
 672              		.loc 1 139 41 discriminator 1
 139:src/Riscv.cpp ****                 if (*handle != nullptr) asm volatile("li a0, 0");
 673              		.loc 1 139 65 is_stmt 0 discriminator 1
 674              	#APP
 675              	# 139 "src/Riscv.cpp" 1
 676              		li a0, 0
 677              	# 0 "" 2
 678              	#NO_APP
 679              	.L26:
 142:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 680              		.loc 1 142 17 is_stmt 1
 142:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 681              		.loc 1 142 69 is_stmt 0
 682 026c 97070000 		la	a5,framePointer
 682      83B70700 
 683 0274 83B70700 		ld	a5,0(a5)
 684              	#APP
 685              	# 142 "src/Riscv.cpp" 1
 144:src/Riscv.cpp ****                 break;
 686              		sd a0, 10*8(a5)
 687              	# 0 "" 2
 688              		.loc 1 144 17 is_stmt 1
 689              	#NO_APP
 690 027c 6FF05FEA 		j	.L7
 691              	.L25:
 140:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 692              		.loc 1 140 22
 140:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
GAS LISTING /tmp/cc0n6rZW.s 			page 22


 693              		.loc 1 140 47 is_stmt 0
 694              	#APP
 695              	# 140 "src/Riscv.cpp" 1
 696              		li a0, -1
 697              	# 0 "" 2
 698              	#NO_APP
 699 0284 6FF09FFE 		j	.L26
 700              	.LVL46:
 701              	.L13:
 702              	.LBE51:
 146:src/Riscv.cpp ****             case SEM_CLOSE: {
 703              		.loc 1 146 13 is_stmt 1
 146:src/Riscv.cpp ****             case SEM_CLOSE: {
 704              		.loc 1 146 29
 705              	.LBB52:
 147:src/Riscv.cpp ****                 KSemaphore* handle = nullptr;
 706              		.loc 1 147 17
 149:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 707              		.loc 1 149 17
 149:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 708              		.loc 1 149 69 is_stmt 0
 709 0288 97070000 		la	a5,framePointer
 709      83B70700 
 710 0290 83B70700 		ld	a5,0(a5)
 711              	#APP
 712              	# 149 "src/Riscv.cpp" 1
 150:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 713              		ld a1, 11*8(a5)
 714              	# 0 "" 2
 715              		.loc 1 150 17 is_stmt 1
 150:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 716              		.loc 1 150 57 is_stmt 0
 717              	# 150 "src/Riscv.cpp" 1
 718              		mv a0, a1
 719              	# 0 "" 2
 720              	.LVL47:
 152:src/Riscv.cpp ****                 if (handle) {
 721              		.loc 1 152 17 is_stmt 1
 722              	#NO_APP
 723 029c 630A0500 		beqz	a0,.L27
 153:src/Riscv.cpp ****                     handle->close();
 724              		.loc 1 153 21
 153:src/Riscv.cpp ****                     handle->close();
 725              		.loc 1 153 34 is_stmt 0
 726 02a0 97000000 		call	_ZN10KSemaphore5closeEv@plt
 726      E7800000 
 727              	.LVL48:
 154:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 728              		.loc 1 154 21 is_stmt 1
 154:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 729              		.loc 1 154 45 is_stmt 0
 730              	#APP
 731              	# 154 "src/Riscv.cpp" 1
 732              		li a0, 0
 733              	# 0 "" 2
 734              	#NO_APP
 735 02ac 6FF05FE7 		j	.L7
GAS LISTING /tmp/cc0n6rZW.s 			page 23


 736              	.LVL49:
 737              	.L27:
 156:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 738              		.loc 1 156 22 is_stmt 1
 156:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 739              		.loc 1 156 47 is_stmt 0
 740              	#APP
 741              	# 156 "src/Riscv.cpp" 1
 742              		li a0, -1
 743              	# 0 "" 2
 744              	#NO_APP
 745 02b4 6FF0DFE6 		j	.L7
 746              	.LVL50:
 747              	.L12:
 748              	.LBE52:
 160:src/Riscv.cpp ****             case SEM_WAIT: {
 749              		.loc 1 160 13 is_stmt 1
 160:src/Riscv.cpp ****             case SEM_WAIT: {
 750              		.loc 1 160 28
 751              	.LBB53:
 161:src/Riscv.cpp ****                 KSemaphore* handle = nullptr;
 752              		.loc 1 161 17
 163:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 753              		.loc 1 163 17
 163:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 754              		.loc 1 163 69 is_stmt 0
 755 02b8 97070000 		la	a5,framePointer
 755      83B70700 
 756 02c0 83B70700 		ld	a5,0(a5)
 757              	#APP
 758              	# 163 "src/Riscv.cpp" 1
 164:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 759              		ld a1, 11*8(a5)
 760              	# 0 "" 2
 761              		.loc 1 164 17 is_stmt 1
 164:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 762              		.loc 1 164 57 is_stmt 0
 763              	# 164 "src/Riscv.cpp" 1
 764              		mv a0, a1
 765              	# 0 "" 2
 766              	.LVL51:
 166:src/Riscv.cpp ****                 if (handle) {
 767              		.loc 1 166 17 is_stmt 1
 768              	#NO_APP
 769 02cc 630A0500 		beqz	a0,.L28
 167:src/Riscv.cpp ****                     handle->wait();
 770              		.loc 1 167 21
 167:src/Riscv.cpp ****                     handle->wait();
 771              		.loc 1 167 33 is_stmt 0
 772 02d0 97000000 		call	_ZN10KSemaphore4waitEv@plt
 772      E7800000 
 773              	.LVL52:
 168:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 774              		.loc 1 168 21 is_stmt 1
 168:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 775              		.loc 1 168 45 is_stmt 0
 776              	#APP
GAS LISTING /tmp/cc0n6rZW.s 			page 24


 777              	# 168 "src/Riscv.cpp" 1
 778              		li a0, 0
 779              	# 0 "" 2
 780              	#NO_APP
 781 02dc 6FF05FE4 		j	.L7
 782              	.LVL53:
 783              	.L28:
 170:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 784              		.loc 1 170 22 is_stmt 1
 170:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 785              		.loc 1 170 47 is_stmt 0
 786              	#APP
 787              	# 170 "src/Riscv.cpp" 1
 788              		li a0, -1
 789              	# 0 "" 2
 790              	#NO_APP
 791 02e4 6FF0DFE3 		j	.L7
 792              	.LVL54:
 793              	.L11:
 794              	.LBE53:
 174:src/Riscv.cpp ****             case SEM_SIGNAL: {
 795              		.loc 1 174 13 is_stmt 1
 174:src/Riscv.cpp ****             case SEM_SIGNAL: {
 796              		.loc 1 174 30
 797              	.LBB54:
 175:src/Riscv.cpp ****                 KSemaphore* handle = nullptr;
 798              		.loc 1 175 17
 177:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 799              		.loc 1 177 17
 177:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 800              		.loc 1 177 69 is_stmt 0
 801 02e8 97070000 		la	a5,framePointer
 801      83B70700 
 802 02f0 83B70700 		ld	a5,0(a5)
 803              	#APP
 804              	# 177 "src/Riscv.cpp" 1
 178:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 805              		ld a1, 11*8(a5)
 806              	# 0 "" 2
 807              		.loc 1 178 17 is_stmt 1
 178:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 808              		.loc 1 178 57 is_stmt 0
 809              	# 178 "src/Riscv.cpp" 1
 810              		mv a0, a1
 811              	# 0 "" 2
 812              	.LVL55:
 180:src/Riscv.cpp ****                 if (handle) {
 813              		.loc 1 180 17 is_stmt 1
 814              	#NO_APP
 815 02fc 630A0500 		beqz	a0,.L29
 181:src/Riscv.cpp ****                     handle->signal();
 816              		.loc 1 181 21
 181:src/Riscv.cpp ****                     handle->signal();
 817              		.loc 1 181 35 is_stmt 0
 818 0300 97000000 		call	_ZN10KSemaphore6signalEv@plt
 818      E7800000 
 819              	.LVL56:
GAS LISTING /tmp/cc0n6rZW.s 			page 25


 182:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 820              		.loc 1 182 21 is_stmt 1
 182:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 821              		.loc 1 182 45 is_stmt 0
 822              	#APP
 823              	# 182 "src/Riscv.cpp" 1
 824              		li a0, 0
 825              	# 0 "" 2
 826              	#NO_APP
 827 030c 6FF05FE1 		j	.L7
 828              	.LVL57:
 829              	.L29:
 184:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 830              		.loc 1 184 22 is_stmt 1
 184:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 831              		.loc 1 184 47 is_stmt 0
 832              	#APP
 833              	# 184 "src/Riscv.cpp" 1
 834              		li a0, -1
 835              	# 0 "" 2
 836              	#NO_APP
 837 0314 6FF0DFE0 		j	.L7
 838              	.LVL58:
 839              	.L10:
 840              	.LBE54:
 188:src/Riscv.cpp ****             case GETC: {
 841              		.loc 1 188 13 is_stmt 1
 188:src/Riscv.cpp ****             case GETC: {
 842              		.loc 1 188 24
 843              	.LBB55:
 189:src/Riscv.cpp ****                 int c = __getc();
 844              		.loc 1 189 17
 189:src/Riscv.cpp ****                 int c = __getc();
 845              		.loc 1 189 31 is_stmt 0
 846 0318 97000000 		call	__getc@plt
 846      E7800000 
 847              	.LVL59:
 190:src/Riscv.cpp ****                 asm volatile ("mv t0, %0" : : "r"(c));
 848              		.loc 1 190 17 is_stmt 1
 190:src/Riscv.cpp ****                 asm volatile ("mv t0, %0" : : "r"(c));
 849              		.loc 1 190 54 is_stmt 0
 850              	#APP
 851              	# 190 "src/Riscv.cpp" 1
 191:src/Riscv.cpp ****                 asm volatile ("sw t0, 80(x8)");
 852              		mv t0, a0
 853              	# 0 "" 2
 854              		.loc 1 191 17 is_stmt 1
 191:src/Riscv.cpp ****                 asm volatile ("sw t0, 80(x8)");
 855              		.loc 1 191 47 is_stmt 0
 856              	# 191 "src/Riscv.cpp" 1
 192:src/Riscv.cpp ****                 break;
 857              		sw t0, 80(x8)
 858              	# 0 "" 2
 859              		.loc 1 192 17 is_stmt 1
 860              	#NO_APP
 861 0328 6FF09FDF 		j	.L7
 862              	.LVL60:
GAS LISTING /tmp/cc0n6rZW.s 			page 26


 863              	.L8:
 864              	.LBE55:
 194:src/Riscv.cpp ****             case PUTC: {
 865              		.loc 1 194 13
 194:src/Riscv.cpp ****             case PUTC: {
 866              		.loc 1 194 24
 867              	.LBB56:
 195:src/Riscv.cpp ****                 char c;
 868              		.loc 1 195 17
 196:src/Riscv.cpp ****                 asm volatile ("mv %0, a1" : "=r" (c));
 869              		.loc 1 196 17
 196:src/Riscv.cpp ****                 asm volatile ("mv %0, a1" : "=r" (c));
 870              		.loc 1 196 54 is_stmt 0
 871              	#APP
 872              	# 196 "src/Riscv.cpp" 1
 873              		mv a0, a1
 874              	# 0 "" 2
 875              	.LVL61:
 197:src/Riscv.cpp ****                 __putc(c);
 876              		.loc 1 197 17 is_stmt 1
 197:src/Riscv.cpp ****                 __putc(c);
 877              		.loc 1 197 23 is_stmt 0
 878              	#NO_APP
 879 0330 1375F50F 		andi	a0,a0,0xff
 880 0334 97000000 		call	__putc@plt
 880      E7800000 
 881              	.LVL62:
 198:src/Riscv.cpp ****                 break;
 882              		.loc 1 198 17 is_stmt 1
 883 033c 6FF05FDE 		j	.L7
 884              	.LVL63:
 885              	.L34:
 886              	.LBE56:
 887              	.LBE61:
 888              	.LBE42:
 208:src/Riscv.cpp ****     else if (interrupt == 1 && cause == 1) {
 889              		.loc 1 208 29 is_stmt 0 discriminator 1
 890 0340 13071000 		li	a4,1
 891 0344 E390E7D6 		bne	a5,a4,.L31
 209:src/Riscv.cpp ****         mc_sip(SIP_SSIP);
 892              		.loc 1 209 9 is_stmt 1
 893              	.LVL64:
 894              	.LBB62:
 895              	.LBB63:
 102:src/../h/Riscv.hpp **** }
 896              		.loc 2 102 5
 102:src/../h/Riscv.hpp **** }
 897              		.loc 2 102 46 is_stmt 0
 898 0348 93072000 		li	a5,2
 899              	.LVL65:
 900              	#APP
 901              	# 102 "src/../h/Riscv.hpp" 1
 103:src/../h/Riscv.hpp **** 
 902              		csrc sip, a5
 903              	# 0 "" 2
 904              		.loc 2 103 1
 905              	#NO_APP
GAS LISTING /tmp/cc0n6rZW.s 			page 27


 906 0350 6FF09FD5 		j	.L5
 907              	.LVL66:
 908              	.L35:
 909              	.LBE63:
 910              	.LBE62:
 211:src/Riscv.cpp ****     else if (interrupt == 1 && cause == 9) {
 911              		.loc 1 211 29 discriminator 1
 912 0354 13079000 		li	a4,9
 913 0358 E398E7D4 		bne	a5,a4,.L5
 212:src/Riscv.cpp ****         console_handler();
 914              		.loc 1 212 9 is_stmt 1
 212:src/Riscv.cpp ****         console_handler();
 915              		.loc 1 212 24 is_stmt 0
 916 035c 97000000 		call	console_handler@plt
 916      E7800000 
 917              	.LVL67:
 918              	.LBE64:
 919              		.loc 1 214 1
 920 0364 6FF05FD4 		j	.L5
 921              		.cfi_endproc
 922              	.LFE31:
 924              	.Letext0:
 925              		.file 3 "src/../h/../lib/hw.h"
 926              		.file 4 "src/../h/MemoryAllocator.hpp"
 927              		.file 5 "src/../h/KThread.hpp"
 928              		.file 6 "src/../h/KSemaphore.hpp"
 929              		.file 7 "src/../lib/console.h"
GAS LISTING /tmp/cc0n6rZW.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/cc0n6rZW.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/cc0n6rZW.s:13     .text:0000000000000000 .L0 
     /tmp/cc0n6rZW.s:14     .text:0000000000000000 .L0 
     /tmp/cc0n6rZW.s:15     .text:0000000000000004 .L0 
     /tmp/cc0n6rZW.s:17     .text:0000000000000008 .L0 
     /tmp/cc0n6rZW.s:19     .text:000000000000000c .L0 
     /tmp/cc0n6rZW.s:25     .text:000000000000000c .L0 
     /tmp/cc0n6rZW.s:26     .text:000000000000000c .L0 
     /tmp/cc0n6rZW.s:27     .text:000000000000000c .L0 
     /tmp/cc0n6rZW.s:37     .text:0000000000000014 .L0 
       src/Riscv.cpp:33     .text:0000000000000014 .L0 
     /tmp/cc0n6rZW.s:43     .text:0000000000000018 .L0 
       src/Riscv.cpp:34     .text:0000000000000018 .L0 
     /tmp/cc0n6rZW.s:49     .text:000000000000001c .L0 
     /tmp/cc0n6rZW.s:50     .text:0000000000000020 .L0 
     /tmp/cc0n6rZW.s:51     .text:0000000000000020 .L0 
     /tmp/cc0n6rZW.s:53     .text:0000000000000024 .L0 
     /tmp/cc0n6rZW.s:55     .text:0000000000000028 .L0 
     /tmp/cc0n6rZW.s:61     .text:0000000000000028 _ZN5Riscv16setupTrapHandlerEv
     /tmp/cc0n6rZW.s:64     .text:0000000000000028 .L0 
     /tmp/cc0n6rZW.s:65     .text:0000000000000028 .L0 
     /tmp/cc0n6rZW.s:66     .text:000000000000002c .L0 
     /tmp/cc0n6rZW.s:68     .text:0000000000000030 .L0 
     /tmp/cc0n6rZW.s:70     .text:0000000000000034 .L0 
     /tmp/cc0n6rZW.s:72     .text:0000000000000034 .L0 
     /tmp/cc0n6rZW.s:73     .text:0000000000000034 .L0 
     /tmp/cc0n6rZW.s:78     .text:000000000000003c .L0 
     /tmp/cc0n6rZW.s:79     .text:000000000000003c .L0 
  src/../h/Riscv.hpp:84     .text:000000000000003c .L0 
     /tmp/cc0n6rZW.s:89     .text:0000000000000040 .L0 
     /tmp/cc0n6rZW.s:90     .text:0000000000000044 .L0 
     /tmp/cc0n6rZW.s:91     .text:0000000000000044 .L0 
     /tmp/cc0n6rZW.s:93     .text:0000000000000048 .L0 
     /tmp/cc0n6rZW.s:95     .text:000000000000004c .L0 
     /tmp/cc0n6rZW.s:101    .text:000000000000004c _ZN5Riscv11trapHandlerEv
     /tmp/cc0n6rZW.s:104    .text:000000000000004c .L0 
     /tmp/cc0n6rZW.s:105    .text:000000000000004c .L0 
     /tmp/cc0n6rZW.s:106    .text:0000000000000050 .L0 
     /tmp/cc0n6rZW.s:112    .text:0000000000000064 .L0 
     /tmp/cc0n6rZW.s:113    .text:0000000000000064 .L0 
     /tmp/cc0n6rZW.s:114    .text:0000000000000064 .L0 
     /tmp/cc0n6rZW.s:115    .text:0000000000000064 .L0 
     /tmp/cc0n6rZW.s:116    .text:0000000000000064 .L0 
     /tmp/cc0n6rZW.s:118    .text:0000000000000068 .L0 
     /tmp/cc0n6rZW.s:122    .text:0000000000000068 .L0 
     /tmp/cc0n6rZW.s:123    .text:0000000000000068 .L0 
     /tmp/cc0n6rZW.s:124    .text:0000000000000068 .L0 
  src/../h/Riscv.hpp:59     .text:0000000000000068 .L0 
     /tmp/cc0n6rZW.s:132    .text:0000000000000070 .L0 
     /tmp/cc0n6rZW.s:133    .text:0000000000000070 .L0 
     /tmp/cc0n6rZW.s:140    .text:0000000000000074 .L0 
     /tmp/cc0n6rZW.s:141    .text:0000000000000074 .L0 
     /tmp/cc0n6rZW.s:142    .text:0000000000000074 .L0 
  src/../h/Riscv.hpp:69     .text:0000000000000074 .L0 
     /tmp/cc0n6rZW.s:150    .text:000000000000007c .L0 
GAS LISTING /tmp/cc0n6rZW.s 			page 29


     /tmp/cc0n6rZW.s:151    .text:000000000000007c .L0 
     /tmp/cc0n6rZW.s:156    .text:0000000000000080 .L0 
     /tmp/cc0n6rZW.s:157    .text:0000000000000080 .L0 
     /tmp/cc0n6rZW.s:160    .text:0000000000000084 .L0 
     /tmp/cc0n6rZW.s:161    .text:0000000000000084 .L0 
     /tmp/cc0n6rZW.s:167    .text:0000000000000090 .L0 
     /tmp/cc0n6rZW.s:169    .text:0000000000000094 .L0 
     /tmp/cc0n6rZW.s:172    .text:0000000000000098 .L0 
     /tmp/cc0n6rZW.s:176    .text:00000000000000a0 .L0 
     /tmp/cc0n6rZW.s:179    .text:00000000000000a4 .L0 
     /tmp/cc0n6rZW.s:184    .text:00000000000000a8 .L0 
     /tmp/cc0n6rZW.s:185    .text:00000000000000ac .L0 
     /tmp/cc0n6rZW.s:186    .text:00000000000000ac .L0 
     /tmp/cc0n6rZW.s:188    .text:00000000000000b0 .L0 
     /tmp/cc0n6rZW.s:189    .text:00000000000000b0 .L0 
     /tmp/cc0n6rZW.s:191    .text:00000000000000b4 .L0 
     /tmp/cc0n6rZW.s:194    .text:00000000000000b8 .L0 
     /tmp/cc0n6rZW.s:196    .text:00000000000000bc .L0 
     /tmp/cc0n6rZW.s:198    .text:00000000000000c0 .L0 
     /tmp/cc0n6rZW.s:202    .text:00000000000000c4 .L0 
     /tmp/cc0n6rZW.s:208    .text:00000000000000c4 .L0 
     /tmp/cc0n6rZW.s:209    .text:00000000000000c4 .L0 
     /tmp/cc0n6rZW.s:210    .text:00000000000000c4 .L0 
  src/../h/Riscv.hpp:125    .text:00000000000000c4 .L0 
     /tmp/cc0n6rZW.s:219    .text:00000000000000cc .L0 
     /tmp/cc0n6rZW.s:220    .text:00000000000000cc .L0 
     /tmp/cc0n6rZW.s:225    .text:00000000000000d0 .L0 
     /tmp/cc0n6rZW.s:226    .text:00000000000000d0 .L0 
       src/Riscv.cpp:53     .text:00000000000000d0 .L0 
     /tmp/cc0n6rZW.s:234    .text:00000000000000d4 .L0 
     /tmp/cc0n6rZW.s:319    .text:00000000000000f8 .L0 
     /tmp/cc0n6rZW.s:321    .text:00000000000000f8 .L0 
     /tmp/cc0n6rZW.s:322    .text:00000000000000f8 .L0 
     /tmp/cc0n6rZW.s:323    .text:00000000000000f8 .L0 
     /tmp/cc0n6rZW.s:324    .text:00000000000000f8 .L0 
     /tmp/cc0n6rZW.s:331    .text:0000000000000108 .L0 
       src/Riscv.cpp:59     .text:0000000000000108 .L0 
     /tmp/cc0n6rZW.s:337    .text:000000000000010c .L0 
     /tmp/cc0n6rZW.s:339    .text:000000000000010c .L0 
     /tmp/cc0n6rZW.s:342    .text:0000000000000114 .L0 
       src/Riscv.cpp:61     .text:0000000000000114 .L0 
     /tmp/cc0n6rZW.s:348    .text:0000000000000118 .L0 
     /tmp/cc0n6rZW.s:350    .text:0000000000000118 .L0 
     /tmp/cc0n6rZW.s:361    .text:0000000000000120 .L0 
     /tmp/cc0n6rZW.s:362    .text:0000000000000120 .L0 
     /tmp/cc0n6rZW.s:363    .text:0000000000000120 .L0 
     /tmp/cc0n6rZW.s:368    .text:0000000000000124 .L0 
     /tmp/cc0n6rZW.s:369    .text:0000000000000124 .L0 
  src/../h/Riscv.hpp:74     .text:0000000000000124 .L0 
     /tmp/cc0n6rZW.s:381    .text:0000000000000128 .L0 
     /tmp/cc0n6rZW.s:382    .text:0000000000000128 .L0 
  src/../h/Riscv.hpp:130    .text:0000000000000128 .L0 
     /tmp/cc0n6rZW.s:389    .text:000000000000012c .L0 
     /tmp/cc0n6rZW.s:396    .text:0000000000000130 .L0 
     /tmp/cc0n6rZW.s:398    .text:0000000000000130 .L0 
     /tmp/cc0n6rZW.s:399    .text:0000000000000130 .L0 
     /tmp/cc0n6rZW.s:400    .text:0000000000000130 .L0 
GAS LISTING /tmp/cc0n6rZW.s 			page 30


     /tmp/cc0n6rZW.s:401    .text:0000000000000130 .L0 
     /tmp/cc0n6rZW.s:408    .text:0000000000000140 .L0 
       src/Riscv.cpp:68     .text:0000000000000140 .L0 
     /tmp/cc0n6rZW.s:414    .text:0000000000000144 .L0 
     /tmp/cc0n6rZW.s:416    .text:0000000000000144 .L0 
     /tmp/cc0n6rZW.s:419    .text:000000000000014c .L0 
       src/Riscv.cpp:70     .text:000000000000014c .L0 
     /tmp/cc0n6rZW.s:425    .text:0000000000000150 .L0 
     /tmp/cc0n6rZW.s:427    .text:0000000000000150 .L0 
     /tmp/cc0n6rZW.s:434    .text:0000000000000158 .L0 
     /tmp/cc0n6rZW.s:439    .text:000000000000015c .L0 
     /tmp/cc0n6rZW.s:441    .text:000000000000015c .L0 
     /tmp/cc0n6rZW.s:442    .text:000000000000015c .L0 
     /tmp/cc0n6rZW.s:443    .text:000000000000015c .L0 
     /tmp/cc0n6rZW.s:446    .text:0000000000000164 .L0 
       src/Riscv.cpp:76     .text:0000000000000164 .L0 
     /tmp/cc0n6rZW.s:452    .text:0000000000000168 .L0 
     /tmp/cc0n6rZW.s:454    .text:0000000000000168 .L0 
     /tmp/cc0n6rZW.s:462    .text:0000000000000178 .L0 
     /tmp/cc0n6rZW.s:467    .text:000000000000017c .L0 
     /tmp/cc0n6rZW.s:469    .text:000000000000017c .L0 
     /tmp/cc0n6rZW.s:470    .text:000000000000017c .L0 
     /tmp/cc0n6rZW.s:471    .text:000000000000017c .L0 
     /tmp/cc0n6rZW.s:474    .text:0000000000000184 .L0 
       src/Riscv.cpp:82     .text:0000000000000184 .L0 
     /tmp/cc0n6rZW.s:480    .text:0000000000000188 .L0 
     /tmp/cc0n6rZW.s:482    .text:0000000000000188 .L0 
     /tmp/cc0n6rZW.s:490    .text:0000000000000198 .L0 
     /tmp/cc0n6rZW.s:495    .text:000000000000019c .L0 
     /tmp/cc0n6rZW.s:497    .text:000000000000019c .L0 
     /tmp/cc0n6rZW.s:498    .text:000000000000019c .L0 
     /tmp/cc0n6rZW.s:499    .text:000000000000019c .L0 
     /tmp/cc0n6rZW.s:500    .text:000000000000019c .L0 
     /tmp/cc0n6rZW.s:501    .text:000000000000019c .L0 
     /tmp/cc0n6rZW.s:502    .text:000000000000019c .L0 
     /tmp/cc0n6rZW.s:503    .text:000000000000019c .L0 
     /tmp/cc0n6rZW.s:510    .text:00000000000001ac .L0 
       src/Riscv.cpp:93     .text:00000000000001ac .L0 
     /tmp/cc0n6rZW.s:516    .text:00000000000001b0 .L0 
       src/Riscv.cpp:94     .text:00000000000001b0 .L0 
     /tmp/cc0n6rZW.s:521    .text:00000000000001b4 .L0 
       src/Riscv.cpp:95     .text:00000000000001b4 .L0 
     /tmp/cc0n6rZW.s:527    .text:00000000000001b8 .L0 
       src/Riscv.cpp:96     .text:00000000000001b8 .L0 
     /tmp/cc0n6rZW.s:532    .text:00000000000001bc .L0 
       src/Riscv.cpp:97     .text:00000000000001bc .L0 
     /tmp/cc0n6rZW.s:538    .text:00000000000001c0 .L0 
       src/Riscv.cpp:98     .text:00000000000001c0 .L0 
     /tmp/cc0n6rZW.s:543    .text:00000000000001c4 .L0 
       src/Riscv.cpp:99     .text:00000000000001c4 .L0 
     /tmp/cc0n6rZW.s:549    .text:00000000000001c8 .L0 
     /tmp/cc0n6rZW.s:551    .text:00000000000001c8 .L0 
     /tmp/cc0n6rZW.s:554    .text:00000000000001d0 .L0 
     /tmp/cc0n6rZW.s:556    .text:00000000000001d4 .L0 
     /tmp/cc0n6rZW.s:558    .text:00000000000001d8 .L0 
     /tmp/cc0n6rZW.s:559    .text:00000000000001d8 .L0 
     /tmp/cc0n6rZW.s:562    .text:00000000000001e0 .L0 
GAS LISTING /tmp/cc0n6rZW.s 			page 31


       src/Riscv.cpp:105    .text:00000000000001e0 .L0 
     /tmp/cc0n6rZW.s:570    .text:00000000000001e4 .L0 
     /tmp/cc0n6rZW.s:571    .text:00000000000001e4 .L0 
     /tmp/cc0n6rZW.s:579    .text:00000000000001f4 .L0 
     /tmp/cc0n6rZW.s:582    .text:00000000000001f8 .L0 
       src/Riscv.cpp:107    .text:00000000000001f8 .L0 
     /tmp/cc0n6rZW.s:593    .text:0000000000000200 .L0 
     /tmp/cc0n6rZW.s:594    .text:0000000000000200 .L0 
     /tmp/cc0n6rZW.s:595    .text:0000000000000200 .L0 
     /tmp/cc0n6rZW.s:596    .text:0000000000000200 .L0 
     /tmp/cc0n6rZW.s:599    .text:000000000000020c .L0 
     /tmp/cc0n6rZW.s:601    .text:0000000000000210 .L0 
     /tmp/cc0n6rZW.s:602    .text:0000000000000210 .L0 
     /tmp/cc0n6rZW.s:606    .text:0000000000000218 .L0 
     /tmp/cc0n6rZW.s:607    .text:0000000000000218 .L0 
     /tmp/cc0n6rZW.s:610    .text:0000000000000220 .L0 
       src/Riscv.cpp:119    .text:0000000000000220 .L0 
     /tmp/cc0n6rZW.s:617    .text:0000000000000224 .L0 
     /tmp/cc0n6rZW.s:621    .text:0000000000000228 .L0 
     /tmp/cc0n6rZW.s:622    .text:0000000000000228 .L0 
     /tmp/cc0n6rZW.s:623    .text:0000000000000228 .L0 
     /tmp/cc0n6rZW.s:624    .text:0000000000000228 .L0 
     /tmp/cc0n6rZW.s:627    .text:0000000000000230 .L0 
     /tmp/cc0n6rZW.s:631    .text:0000000000000234 .L0 
     /tmp/cc0n6rZW.s:633    .text:0000000000000234 .L0 
     /tmp/cc0n6rZW.s:634    .text:0000000000000234 .L0 
     /tmp/cc0n6rZW.s:635    .text:0000000000000234 .L0 
     /tmp/cc0n6rZW.s:636    .text:0000000000000234 .L0 
     /tmp/cc0n6rZW.s:637    .text:0000000000000234 .L0 
     /tmp/cc0n6rZW.s:644    .text:0000000000000244 .L0 
       src/Riscv.cpp:133    .text:0000000000000244 .L0 
     /tmp/cc0n6rZW.s:650    .text:0000000000000248 .L0 
       src/Riscv.cpp:134    .text:0000000000000248 .L0 
     /tmp/cc0n6rZW.s:655    .text:000000000000024c .L0 
       src/Riscv.cpp:135    .text:000000000000024c .L0 
     /tmp/cc0n6rZW.s:661    .text:0000000000000250 .L0 
     /tmp/cc0n6rZW.s:663    .text:0000000000000250 .L0 
     /tmp/cc0n6rZW.s:669    .text:0000000000000260 .L0 
     /tmp/cc0n6rZW.s:671    .text:0000000000000264 .L0 
     /tmp/cc0n6rZW.s:673    .text:0000000000000268 .L0 
       src/Riscv.cpp:139    .text:0000000000000268 .L0 
     /tmp/cc0n6rZW.s:681    .text:000000000000026c .L0 
     /tmp/cc0n6rZW.s:682    .text:000000000000026c .L0 
     /tmp/cc0n6rZW.s:690    .text:000000000000027c .L0 
     /tmp/cc0n6rZW.s:693    .text:0000000000000280 .L0 
       src/Riscv.cpp:140    .text:0000000000000280 .L0 
     /tmp/cc0n6rZW.s:704    .text:0000000000000288 .L0 
     /tmp/cc0n6rZW.s:706    .text:0000000000000288 .L0 
     /tmp/cc0n6rZW.s:707    .text:0000000000000288 .L0 
     /tmp/cc0n6rZW.s:708    .text:0000000000000288 .L0 
     /tmp/cc0n6rZW.s:709    .text:0000000000000288 .L0 
     /tmp/cc0n6rZW.s:716    .text:0000000000000298 .L0 
       src/Riscv.cpp:150    .text:0000000000000298 .L0 
     /tmp/cc0n6rZW.s:723    .text:000000000000029c .L0 
     /tmp/cc0n6rZW.s:725    .text:00000000000002a0 .L0 
     /tmp/cc0n6rZW.s:726    .text:00000000000002a0 .L0 
     /tmp/cc0n6rZW.s:729    .text:00000000000002a8 .L0 
GAS LISTING /tmp/cc0n6rZW.s 			page 32


       src/Riscv.cpp:154    .text:00000000000002a8 .L0 
     /tmp/cc0n6rZW.s:739    .text:00000000000002b0 .L0 
       src/Riscv.cpp:156    .text:00000000000002b0 .L0 
     /tmp/cc0n6rZW.s:750    .text:00000000000002b8 .L0 
     /tmp/cc0n6rZW.s:752    .text:00000000000002b8 .L0 
     /tmp/cc0n6rZW.s:753    .text:00000000000002b8 .L0 
     /tmp/cc0n6rZW.s:754    .text:00000000000002b8 .L0 
     /tmp/cc0n6rZW.s:755    .text:00000000000002b8 .L0 
     /tmp/cc0n6rZW.s:762    .text:00000000000002c8 .L0 
       src/Riscv.cpp:164    .text:00000000000002c8 .L0 
     /tmp/cc0n6rZW.s:769    .text:00000000000002cc .L0 
     /tmp/cc0n6rZW.s:771    .text:00000000000002d0 .L0 
     /tmp/cc0n6rZW.s:772    .text:00000000000002d0 .L0 
     /tmp/cc0n6rZW.s:775    .text:00000000000002d8 .L0 
       src/Riscv.cpp:168    .text:00000000000002d8 .L0 
     /tmp/cc0n6rZW.s:785    .text:00000000000002e0 .L0 
       src/Riscv.cpp:170    .text:00000000000002e0 .L0 
     /tmp/cc0n6rZW.s:796    .text:00000000000002e8 .L0 
     /tmp/cc0n6rZW.s:798    .text:00000000000002e8 .L0 
     /tmp/cc0n6rZW.s:799    .text:00000000000002e8 .L0 
     /tmp/cc0n6rZW.s:800    .text:00000000000002e8 .L0 
     /tmp/cc0n6rZW.s:801    .text:00000000000002e8 .L0 
     /tmp/cc0n6rZW.s:808    .text:00000000000002f8 .L0 
       src/Riscv.cpp:178    .text:00000000000002f8 .L0 
     /tmp/cc0n6rZW.s:815    .text:00000000000002fc .L0 
     /tmp/cc0n6rZW.s:817    .text:0000000000000300 .L0 
     /tmp/cc0n6rZW.s:818    .text:0000000000000300 .L0 
     /tmp/cc0n6rZW.s:821    .text:0000000000000308 .L0 
       src/Riscv.cpp:182    .text:0000000000000308 .L0 
     /tmp/cc0n6rZW.s:831    .text:0000000000000310 .L0 
       src/Riscv.cpp:184    .text:0000000000000310 .L0 
     /tmp/cc0n6rZW.s:842    .text:0000000000000318 .L0 
     /tmp/cc0n6rZW.s:844    .text:0000000000000318 .L0 
     /tmp/cc0n6rZW.s:845    .text:0000000000000318 .L0 
     /tmp/cc0n6rZW.s:846    .text:0000000000000318 .L0 
     /tmp/cc0n6rZW.s:849    .text:0000000000000320 .L0 
       src/Riscv.cpp:190    .text:0000000000000320 .L0 
     /tmp/cc0n6rZW.s:855    .text:0000000000000324 .L0 
       src/Riscv.cpp:191    .text:0000000000000324 .L0 
     /tmp/cc0n6rZW.s:861    .text:0000000000000328 .L0 
     /tmp/cc0n6rZW.s:866    .text:000000000000032c .L0 
     /tmp/cc0n6rZW.s:868    .text:000000000000032c .L0 
     /tmp/cc0n6rZW.s:869    .text:000000000000032c .L0 
     /tmp/cc0n6rZW.s:870    .text:000000000000032c .L0 
       src/Riscv.cpp:196    .text:000000000000032c .L0 
     /tmp/cc0n6rZW.s:877    .text:0000000000000330 .L0 
     /tmp/cc0n6rZW.s:879    .text:0000000000000330 .L0 
     /tmp/cc0n6rZW.s:883    .text:000000000000033c .L0 
     /tmp/cc0n6rZW.s:890    .text:0000000000000340 .L0 
     /tmp/cc0n6rZW.s:896    .text:0000000000000348 .L0 
     /tmp/cc0n6rZW.s:897    .text:0000000000000348 .L0 
     /tmp/cc0n6rZW.s:898    .text:0000000000000348 .L0 
     /tmp/cc0n6rZW.s:906    .text:0000000000000350 .L0 
     /tmp/cc0n6rZW.s:912    .text:0000000000000354 .L0 
     /tmp/cc0n6rZW.s:915    .text:000000000000035c .L0 
     /tmp/cc0n6rZW.s:916    .text:000000000000035c .L0 
     /tmp/cc0n6rZW.s:920    .text:0000000000000364 .L0 
GAS LISTING /tmp/cc0n6rZW.s 			page 33


     /tmp/cc0n6rZW.s:921    .text:0000000000000368 .L0 
     /tmp/cc0n6rZW.s:930    .text:0000000000000368 .L0 
     /tmp/cc0n6rZW.s:73     .text:0000000000000034 .L0 
     /tmp/cc0n6rZW.s:247    .rodata:0000000000000000 .L9
     /tmp/cc0n6rZW.s:239    .text:00000000000000e0 .L0 
     /tmp/cc0n6rZW.s:324    .text:00000000000000f8 .L0 
     /tmp/cc0n6rZW.s:401    .text:0000000000000130 .L0 
     /tmp/cc0n6rZW.s:454    .text:0000000000000168 .L0 
     /tmp/cc0n6rZW.s:482    .text:0000000000000188 .L0 
     /tmp/cc0n6rZW.s:503    .text:000000000000019c .L0 
     /tmp/cc0n6rZW.s:571    .text:00000000000001e4 .L0 
     /tmp/cc0n6rZW.s:596    .text:0000000000000200 .L0 
     /tmp/cc0n6rZW.s:637    .text:0000000000000234 .L0 
     /tmp/cc0n6rZW.s:682    .text:000000000000026c .L0 
     /tmp/cc0n6rZW.s:709    .text:0000000000000288 .L0 
     /tmp/cc0n6rZW.s:755    .text:00000000000002b8 .L0 
     /tmp/cc0n6rZW.s:801    .text:00000000000002e8 .L0 
     /tmp/cc0n6rZW.s:174    .text:00000000000000a0 .L6
     /tmp/cc0n6rZW.s:201    .text:00000000000000c4 .L33
     /tmp/cc0n6rZW.s:885    .text:0000000000000340 .L34
     /tmp/cc0n6rZW.s:908    .text:0000000000000354 .L35
     /tmp/cc0n6rZW.s:358    .text:0000000000000120 .L7
     /tmp/cc0n6rZW.s:181    .text:00000000000000a8 .L5
     /tmp/cc0n6rZW.s:580    .text:00000000000001f8 .L22
     /tmp/cc0n6rZW.s:568    .text:00000000000001e4 .L23
     /tmp/cc0n6rZW.s:604    .text:0000000000000218 .L24
     /tmp/cc0n6rZW.s:691    .text:0000000000000280 .L25
     /tmp/cc0n6rZW.s:679    .text:000000000000026c .L26
     /tmp/cc0n6rZW.s:737    .text:00000000000002b0 .L27
     /tmp/cc0n6rZW.s:783    .text:00000000000002e0 .L28
     /tmp/cc0n6rZW.s:829    .text:0000000000000310 .L29
     /tmp/cc0n6rZW.s:177    .text:00000000000000a4 .L31
     /tmp/cc0n6rZW.s:316    .text:00000000000000f8 .L21
     /tmp/cc0n6rZW.s:391    .text:0000000000000130 .L20
     /tmp/cc0n6rZW.s:436    .text:000000000000015c .L19
     /tmp/cc0n6rZW.s:464    .text:000000000000017c .L18
     /tmp/cc0n6rZW.s:492    .text:000000000000019c .L17
     /tmp/cc0n6rZW.s:590    .text:0000000000000200 .L16
     /tmp/cc0n6rZW.s:619    .text:0000000000000228 .L15
     /tmp/cc0n6rZW.s:629    .text:0000000000000234 .L14
     /tmp/cc0n6rZW.s:701    .text:0000000000000288 .L13
     /tmp/cc0n6rZW.s:747    .text:00000000000002b8 .L12
     /tmp/cc0n6rZW.s:793    .text:00000000000002e8 .L11
     /tmp/cc0n6rZW.s:839    .text:0000000000000318 .L10
     /tmp/cc0n6rZW.s:863    .text:000000000000032c .L8
     /tmp/cc0n6rZW.s:2564   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc0n6rZW.s:4074   .debug_str:00000000000008dd .LASF175
     /tmp/cc0n6rZW.s:3816   .debug_str:000000000000012c .LASF176
     /tmp/cc0n6rZW.s:3866   .debug_str:00000000000002aa .LASF177
     /tmp/cc0n6rZW.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc0n6rZW.s:924    .text:0000000000000368 .Letext0
     /tmp/cc0n6rZW.s:3768   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc0n6rZW.s:3886   .debug_str:000000000000035c .LASF0
     /tmp/cc0n6rZW.s:3912   .debug_str:0000000000000417 .LASF1
     /tmp/cc0n6rZW.s:4004   .debug_str:00000000000006fc .LASF2
     /tmp/cc0n6rZW.s:4016   .debug_str:000000000000076d .LASF4
     /tmp/cc0n6rZW.s:3898   .debug_str:00000000000003ac .LASF3
GAS LISTING /tmp/cc0n6rZW.s 			page 34


     /tmp/cc0n6rZW.s:3776   .debug_str:000000000000001f .LASF5
     /tmp/cc0n6rZW.s:3974   .debug_str:0000000000000611 .LASF6
     /tmp/cc0n6rZW.s:3902   .debug_str:00000000000003c3 .LASF7
     /tmp/cc0n6rZW.s:3864   .debug_str:000000000000029a .LASF8
     /tmp/cc0n6rZW.s:3870   .debug_str:00000000000002d8 .LASF9
     /tmp/cc0n6rZW.s:3802   .debug_str:00000000000000c8 .LASF10
     /tmp/cc0n6rZW.s:3854   .debug_str:0000000000000248 .LASF11
     /tmp/cc0n6rZW.s:3818   .debug_str:000000000000013a .LASF12
     /tmp/cc0n6rZW.s:3800   .debug_str:00000000000000b8 .LASF13
     /tmp/cc0n6rZW.s:4052   .debug_str:000000000000085d .LASF14
     /tmp/cc0n6rZW.s:3840   .debug_str:00000000000001d2 .LASF15
     /tmp/cc0n6rZW.s:4036   .debug_str:00000000000007e0 .LASF16
     /tmp/cc0n6rZW.s:3784   .debug_str:000000000000005f .LASF17
     /tmp/cc0n6rZW.s:4102   .debug_str:0000000000000a5a .LASF65
     /tmp/cc0n6rZW.s:3996   .debug_str:00000000000006d2 .LASF21
     /tmp/cc0n6rZW.s:3918   .debug_str:0000000000000437 .LASF18
     /tmp/cc0n6rZW.s:3848   .debug_str:000000000000021b .LASF19
     /tmp/cc0n6rZW.s:4112   .debug_str:0000000000000ab3 .LASF20
     /tmp/cc0n6rZW.s:4094   .debug_str:0000000000000a35 .LASF22
     /tmp/cc0n6rZW.s:3850   .debug_str:0000000000000224 .LASF23
     /tmp/cc0n6rZW.s:4072   .debug_str:00000000000008d0 .LASF24
     /tmp/cc0n6rZW.s:3824   .debug_str:000000000000015e .LASF25
     /tmp/cc0n6rZW.s:4088   .debug_str:0000000000000a07 .LASF26
     /tmp/cc0n6rZW.s:4114   .debug_str:0000000000000abc .LASF28
     /tmp/cc0n6rZW.s:4124   .debug_str:0000000000000b20 .LASF27
     /tmp/cc0n6rZW.s:4080   .debug_str:00000000000009c9 .LASF29
     /tmp/cc0n6rZW.s:3876   .debug_str:0000000000000302 .LASF30
     /tmp/cc0n6rZW.s:3884   .debug_str:0000000000000344 .LASF31
     /tmp/cc0n6rZW.s:4090   .debug_str:0000000000000a18 .LASF32
     /tmp/cc0n6rZW.s:4084   .debug_str:00000000000009ea .LASF34
     /tmp/cc0n6rZW.s:4000   .debug_str:00000000000006e8 .LASF36
     /tmp/cc0n6rZW.s:3964   .debug_str:000000000000059b .LASF38
     /tmp/cc0n6rZW.s:3988   .debug_str:0000000000000694 .LASF33
     /tmp/cc0n6rZW.s:3992   .debug_str:00000000000006ab .LASF35
     /tmp/cc0n6rZW.s:3958   .debug_str:0000000000000569 .LASF37
     /tmp/cc0n6rZW.s:3904   .debug_str:00000000000003d6 .LASF39
     /tmp/cc0n6rZW.s:4108   .debug_str:0000000000000a9d .LASF40
     /tmp/cc0n6rZW.s:4048   .debug_str:000000000000083c .LASF41
     /tmp/cc0n6rZW.s:3952   .debug_str:000000000000052e .LASF42
     /tmp/cc0n6rZW.s:3962   .debug_str:0000000000000587 .LASF43
     /tmp/cc0n6rZW.s:3922   .debug_str:0000000000000448 .LASF44
     /tmp/cc0n6rZW.s:3994   .debug_str:00000000000006be .LASF45
     /tmp/cc0n6rZW.s:4134   .debug_str:0000000000000b5f .LASF46
     /tmp/cc0n6rZW.s:3892   .debug_str:0000000000000380 .LASF47
     /tmp/cc0n6rZW.s:4046   .debug_str:0000000000000835 .LASF48
     /tmp/cc0n6rZW.s:4018   .debug_str:0000000000000774 .LASF49
     /tmp/cc0n6rZW.s:4020   .debug_str:0000000000000787 .LASF50
     /tmp/cc0n6rZW.s:3808   .debug_str:00000000000000e5 .LASF51
     /tmp/cc0n6rZW.s:3838   .debug_str:00000000000001cc .LASF52
     /tmp/cc0n6rZW.s:3882   .debug_str:0000000000000332 .LASF53
     /tmp/cc0n6rZW.s:3890   .debug_str:000000000000037a .LASF54
     /tmp/cc0n6rZW.s:3828   .debug_str:000000000000017a .LASF55
     /tmp/cc0n6rZW.s:3778   .debug_str:0000000000000026 .LASF56
     /tmp/cc0n6rZW.s:4008   .debug_str:0000000000000720 .LASF57
     /tmp/cc0n6rZW.s:4002   .debug_str:00000000000006f1 .LASF58
     /tmp/cc0n6rZW.s:4128   .debug_str:0000000000000b31 .LASF59
     /tmp/cc0n6rZW.s:4104   .debug_str:0000000000000a60 .LASF60
GAS LISTING /tmp/cc0n6rZW.s 			page 35


     /tmp/cc0n6rZW.s:4116   .debug_str:0000000000000ada .LASF61
     /tmp/cc0n6rZW.s:4100   .debug_str:0000000000000a50 .LASF119
     /tmp/cc0n6rZW.s:3938   .debug_str:00000000000004c0 .LASF121
     /tmp/cc0n6rZW.s:4026   .debug_str:000000000000079f .LASF64
     /tmp/cc0n6rZW.s:3804   .debug_str:00000000000000d7 .LASF62
     /tmp/cc0n6rZW.s:3910   .debug_str:0000000000000412 .LASF63
     /tmp/cc0n6rZW.s:3972   .debug_str:0000000000000601 .LASF66
     /tmp/cc0n6rZW.s:4130   .debug_str:0000000000000b49 .LASF67
     /tmp/cc0n6rZW.s:4038   .debug_str:00000000000007f6 .LASF68
     /tmp/cc0n6rZW.s:3940   .debug_str:00000000000004d6 .LASF69
     /tmp/cc0n6rZW.s:3780   .debug_str:0000000000000031 .LASF71
     /tmp/cc0n6rZW.s:4058   .debug_str:0000000000000879 .LASF70
     /tmp/cc0n6rZW.s:3942   .debug_str:00000000000004e0 .LASF72
     /tmp/cc0n6rZW.s:3948   .debug_str:0000000000000512 .LASF73
     /tmp/cc0n6rZW.s:3832   .debug_str:0000000000000196 .LASF74
     /tmp/cc0n6rZW.s:3906   .debug_str:00000000000003e9 .LASF75
     /tmp/cc0n6rZW.s:4106   .debug_str:0000000000000a6a .LASF76
     /tmp/cc0n6rZW.s:3782   .debug_str:0000000000000052 .LASF178
     /tmp/cc0n6rZW.s:3896   .debug_str:00000000000003a2 .LASF123
     /tmp/cc0n6rZW.s:3970   .debug_str:00000000000005d3 .LASF125
     /tmp/cc0n6rZW.s:3944   .debug_str:0000000000000501 .LASF179
     /tmp/cc0n6rZW.s:3798   .debug_str:00000000000000b2 .LASF77
     /tmp/cc0n6rZW.s:4024   .debug_str:0000000000000797 .LASF78
     /tmp/cc0n6rZW.s:3930   .debug_str:0000000000000471 .LASF79
     /tmp/cc0n6rZW.s:3792   .debug_str:0000000000000094 .LASF80
     /tmp/cc0n6rZW.s:3984   .debug_str:0000000000000680 .LASF81
     /tmp/cc0n6rZW.s:3810   .debug_str:00000000000000f8 .LASF82
     /tmp/cc0n6rZW.s:4054   .debug_str:0000000000000869 .LASF83
     /tmp/cc0n6rZW.s:4070   .debug_str:00000000000008c8 .LASF84
     /tmp/cc0n6rZW.s:3846   .debug_str:0000000000000212 .LASF85
     /tmp/cc0n6rZW.s:3790   .debug_str:0000000000000084 .LASF86
     /tmp/cc0n6rZW.s:4050   .debug_str:0000000000000850 .LASF87
     /tmp/cc0n6rZW.s:3936   .debug_str:0000000000000499 .LASF88
     /tmp/cc0n6rZW.s:3966   .debug_str:00000000000005b0 .LASF180
     /tmp/cc0n6rZW.s:4010   .debug_str:0000000000000738 .LASF89
     /tmp/cc0n6rZW.s:4120   .debug_str:0000000000000b04 .LASF90
     /tmp/cc0n6rZW.s:4118   .debug_str:0000000000000af0 .LASF91
     /tmp/cc0n6rZW.s:4032   .debug_str:00000000000007c8 .LASF92
     /tmp/cc0n6rZW.s:3786   .debug_str:000000000000006c .LASF93
     /tmp/cc0n6rZW.s:3920   .debug_str:0000000000000440 .LASF94
     /tmp/cc0n6rZW.s:4122   .debug_str:0000000000000b0a .LASF95
     /tmp/cc0n6rZW.s:4022   .debug_str:000000000000078e .LASF181
     /tmp/cc0n6rZW.s:4066   .debug_str:00000000000008aa .LASF182
     /tmp/cc0n6rZW.s:4012   .debug_str:0000000000000759 .LASF96
     /tmp/cc0n6rZW.s:4078   .debug_str:00000000000009a6 .LASF97
     /tmp/cc0n6rZW.s:3914   .debug_str:000000000000042a .LASF98
     /tmp/cc0n6rZW.s:4092   .debug_str:0000000000000a21 .LASF99
     /tmp/cc0n6rZW.s:3812   .debug_str:0000000000000100 .LASF100
     /tmp/cc0n6rZW.s:3960   .debug_str:0000000000000570 .LASF101
     /tmp/cc0n6rZW.s:4132   .debug_str:0000000000000b52 .LASF102
     /tmp/cc0n6rZW.s:3990   .debug_str:000000000000069b .LASF103
     /tmp/cc0n6rZW.s:3772   .debug_str:0000000000000005 .LASF104
     /tmp/cc0n6rZW.s:3888   .debug_str:0000000000000369 .LASF105
     /tmp/cc0n6rZW.s:3794   .debug_str:000000000000009d .LASF106
     /tmp/cc0n6rZW.s:3880   .debug_str:0000000000000322 .LASF107
     /tmp/cc0n6rZW.s:4034   .debug_str:00000000000007cd .LASF108
     /tmp/cc0n6rZW.s:3844   .debug_str:0000000000000201 .LASF109
GAS LISTING /tmp/cc0n6rZW.s 			page 36


     /tmp/cc0n6rZW.s:3858   .debug_str:0000000000000260 .LASF110
     /tmp/cc0n6rZW.s:3862   .debug_str:0000000000000285 .LASF111
     /tmp/cc0n6rZW.s:3770   .debug_str:0000000000000000 .LASF112
     /tmp/cc0n6rZW.s:4126   .debug_str:0000000000000b2c .LASF113
     /tmp/cc0n6rZW.s:4030   .debug_str:00000000000007c2 .LASF114
     /tmp/cc0n6rZW.s:4082   .debug_str:00000000000009e2 .LASF115
     /tmp/cc0n6rZW.s:3836   .debug_str:00000000000001c6 .LASF116
     /tmp/cc0n6rZW.s:3894   .debug_str:0000000000000394 .LASF117
     /tmp/cc0n6rZW.s:4110   .debug_str:0000000000000aa5 .LASF118
     /tmp/cc0n6rZW.s:3822   .debug_str:0000000000000150 .LASF120
     /tmp/cc0n6rZW.s:3980   .debug_str:0000000000000639 .LASF122
     /tmp/cc0n6rZW.s:3934   .debug_str:000000000000048d .LASF124
     /tmp/cc0n6rZW.s:3956   .debug_str:000000000000053b .LASF126
     /tmp/cc0n6rZW.s:4064   .debug_str:00000000000008a5 .LASF127
     /tmp/cc0n6rZW.s:3998   .debug_str:00000000000006dd .LASF128
     /tmp/cc0n6rZW.s:3978   .debug_str:0000000000000629 .LASF129
     /tmp/cc0n6rZW.s:3814   .debug_str:0000000000000109 .LASF130
     /tmp/cc0n6rZW.s:3834   .debug_str:00000000000001c1 .LASF131
     /tmp/cc0n6rZW.s:4028   .debug_str:00000000000007ab .LASF132
     /tmp/cc0n6rZW.s:4056   .debug_str:0000000000000872 .LASF133
     /tmp/cc0n6rZW.s:3842   .debug_str:00000000000001e8 .LASF134
     /tmp/cc0n6rZW.s:3820   .debug_str:000000000000014a .LASF135
     /tmp/cc0n6rZW.s:3852   .debug_str:0000000000000230 .LASF136
     /tmp/cc0n6rZW.s:3932   .debug_str:0000000000000479 .LASF137
     /tmp/cc0n6rZW.s:3878   .debug_str:000000000000030d .LASF138
     /tmp/cc0n6rZW.s:3926   .debug_str:0000000000000456 .LASF139
     /tmp/cc0n6rZW.s:4060   .debug_str:0000000000000882 .LASF140
     /tmp/cc0n6rZW.s:3872   .debug_str:00000000000002e6 .LASF141
     /tmp/cc0n6rZW.s:4044   .debug_str:0000000000000830 .LASF142
     /tmp/cc0n6rZW.s:3954   .debug_str:0000000000000536 .LASF143
     /tmp/cc0n6rZW.s:4006   .debug_str:000000000000070a .LASF183
     /tmp/cc0n6rZW.s:3968   .debug_str:00000000000005b5 .LASF184
     /tmp/cc0n6rZW.s:4136   .debug_str:0000000000000b67 .LASF144
     /tmp/cc0n6rZW.s:3856   .debug_str:0000000000000257 .LASF145
     /tmp/cc0n6rZW.s:4040   .debug_str:0000000000000816 .LASF146
     /tmp/cc0n6rZW.s:3982   .debug_str:0000000000000665 .LASF147
     /tmp/cc0n6rZW.s:4062   .debug_str:0000000000000897 .LASF148
     /tmp/cc0n6rZW.s:3986   .debug_str:0000000000000688 .LASF149
     /tmp/cc0n6rZW.s:3826   .debug_str:000000000000016a .LASF150
     /tmp/cc0n6rZW.s:3806   .debug_str:00000000000000dc .LASF151
     /tmp/cc0n6rZW.s:3774   .debug_str:0000000000000015 .LASF152
     /tmp/cc0n6rZW.s:3950   .debug_str:0000000000000525 .LASF153
     /tmp/cc0n6rZW.s:4014   .debug_str:0000000000000762 .LASF154
     /tmp/cc0n6rZW.s:3900   .debug_str:00000000000003be .LASF155
     /tmp/cc0n6rZW.s:3946   .debug_str:000000000000050d .LASF156
     /tmp/cc0n6rZW.s:102    .text:000000000000004c .LFB31
     /tmp/cc0n6rZW.s:922    .text:0000000000000368 .LFE31
     /tmp/cc0n6rZW.s:4042   .debug_str:0000000000000829 .LASF157
     /tmp/cc0n6rZW.s:3433   .debug_loc:0000000000000000 .LLST1
     /tmp/cc0n6rZW.s:4076   .debug_str:00000000000009a1 .LASF158
     /tmp/cc0n6rZW.s:3440   .debug_loc:0000000000000023 .LLST2
     /tmp/cc0n6rZW.s:3860   .debug_str:000000000000027b .LASF159
     /tmp/cc0n6rZW.s:3451   .debug_loc:0000000000000059 .LLST3
     /tmp/cc0n6rZW.s:4068   .debug_str:00000000000008c2 .LASF160
     /tmp/cc0n6rZW.s:3514   .debug_loc:0000000000000186 .LLST4
     /tmp/cc0n6rZW.s:204    .text:00000000000000c4 .LBB42
     /tmp/cc0n6rZW.s:888    .text:0000000000000340 .LBE42
GAS LISTING /tmp/cc0n6rZW.s 			page 37


     /tmp/cc0n6rZW.s:3874   .debug_str:00000000000002fa .LASF161
     /tmp/cc0n6rZW.s:3539   .debug_loc:00000000000001f7 .LLST5
     /tmp/cc0n6rZW.s:3976   .debug_str:0000000000000624 .LASF162
     /tmp/cc0n6rZW.s:3546   .debug_loc:000000000000021a .LLST6
     /tmp/cc0n6rZW.s:320    .text:00000000000000f8 .LBB46
     /tmp/cc0n6rZW.s:359    .text:0000000000000120 .LBE46
     /tmp/cc0n6rZW.s:3553   .debug_loc:000000000000023d .LLST7
     /tmp/cc0n6rZW.s:3560   .debug_loc:0000000000000260 .LLST8
     /tmp/cc0n6rZW.s:340    .text:0000000000000114 .LVL18
     /tmp/cc0n6rZW.s:397    .text:0000000000000130 .LBB47
     /tmp/cc0n6rZW.s:437    .text:000000000000015c .LBE47
     /tmp/cc0n6rZW.s:3796   .debug_str:00000000000000ad .LASF163
     /tmp/cc0n6rZW.s:3567   .debug_loc:0000000000000283 .LLST9
     /tmp/cc0n6rZW.s:4098   .debug_str:0000000000000a49 .LASF164
     /tmp/cc0n6rZW.s:3574   .debug_loc:00000000000002a6 .LLST10
     /tmp/cc0n6rZW.s:417    .text:000000000000014c .LVL24
     /tmp/cc0n6rZW.s:440    .text:000000000000015c .LBB48
     /tmp/cc0n6rZW.s:465    .text:000000000000017c .LBE48
     /tmp/cc0n6rZW.s:3830   .debug_str:000000000000018c .LASF165
     /tmp/cc0n6rZW.s:3581   .debug_loc:00000000000002c9 .LLST11
     /tmp/cc0n6rZW.s:444    .text:0000000000000164 .LVL26
     /tmp/cc0n6rZW.s:468    .text:000000000000017c .LBB49
     /tmp/cc0n6rZW.s:493    .text:000000000000019c .LBE49
     /tmp/cc0n6rZW.s:4086   .debug_str:00000000000009ff .LASF166
     /tmp/cc0n6rZW.s:3588   .debug_loc:00000000000002ec .LLST12
     /tmp/cc0n6rZW.s:472    .text:0000000000000184 .LVL28
     /tmp/cc0n6rZW.s:496    .text:000000000000019c .LBB50
     /tmp/cc0n6rZW.s:591    .text:0000000000000200 .LBE50
     /tmp/cc0n6rZW.s:4138   .debug_str:0000000000000b71 .LASF167
     /tmp/cc0n6rZW.s:3595   .debug_loc:000000000000030f .LLST13
     /tmp/cc0n6rZW.s:3908   .debug_str:0000000000000404 .LASF168
     /tmp/cc0n6rZW.s:3607   .debug_loc:0000000000000346 .LLST14
     /tmp/cc0n6rZW.s:3619   .debug_loc:000000000000037d .LLST15
     /tmp/cc0n6rZW.s:3631   .debug_loc:00000000000003b4 .LLST16
     /tmp/cc0n6rZW.s:552    .text:00000000000001d0 .LVL34
     /tmp/cc0n6rZW.s:560    .text:00000000000001e0 .LVL35
     /tmp/cc0n6rZW.s:632    .text:0000000000000234 .LBB51
     /tmp/cc0n6rZW.s:702    .text:0000000000000288 .LBE51
     /tmp/cc0n6rZW.s:3643   .debug_loc:00000000000003eb .LLST17
     /tmp/cc0n6rZW.s:3788   .debug_str:000000000000007f .LASF169
     /tmp/cc0n6rZW.s:3655   .debug_loc:0000000000000422 .LLST18
     /tmp/cc0n6rZW.s:667    .text:0000000000000260 .LVL45
     /tmp/cc0n6rZW.s:705    .text:0000000000000288 .LBB52
     /tmp/cc0n6rZW.s:748    .text:00000000000002b8 .LBE52
     /tmp/cc0n6rZW.s:3662   .debug_loc:0000000000000445 .LLST19
     /tmp/cc0n6rZW.s:727    .text:00000000000002a8 .LVL48
     /tmp/cc0n6rZW.s:751    .text:00000000000002b8 .LBB53
     /tmp/cc0n6rZW.s:794    .text:00000000000002e8 .LBE53
     /tmp/cc0n6rZW.s:3678   .debug_loc:000000000000048f .LLST20
     /tmp/cc0n6rZW.s:773    .text:00000000000002d8 .LVL52
     /tmp/cc0n6rZW.s:797    .text:00000000000002e8 .LBB54
     /tmp/cc0n6rZW.s:840    .text:0000000000000318 .LBE54
     /tmp/cc0n6rZW.s:3694   .debug_loc:00000000000004d9 .LLST21
     /tmp/cc0n6rZW.s:819    .text:0000000000000308 .LVL56
     /tmp/cc0n6rZW.s:843    .text:0000000000000318 .LBB55
     /tmp/cc0n6rZW.s:864    .text:000000000000032c .LBE55
     /tmp/cc0n6rZW.s:3710   .debug_loc:0000000000000523 .LLST22
GAS LISTING /tmp/cc0n6rZW.s 			page 38


     /tmp/cc0n6rZW.s:847    .text:0000000000000320 .LVL59
     /tmp/cc0n6rZW.s:867    .text:000000000000032c .LBB56
     /tmp/cc0n6rZW.s:886    .text:0000000000000340 .LBE56
     /tmp/cc0n6rZW.s:3717   .debug_loc:0000000000000546 .LLST23
     /tmp/cc0n6rZW.s:881    .text:000000000000033c .LVL62
     /tmp/cc0n6rZW.s:206    .text:00000000000000c4 .LBB43
     /tmp/cc0n6rZW.s:223    .text:00000000000000d0 .LBE43
     /tmp/cc0n6rZW.s:366    .text:0000000000000124 .LBB57
     /tmp/cc0n6rZW.s:377    .text:0000000000000128 .LBE57
     /tmp/cc0n6rZW.s:3724   .debug_loc:0000000000000569 .LLST24
     /tmp/cc0n6rZW.s:379    .text:0000000000000128 .LBB59
     /tmp/cc0n6rZW.s:393    .text:0000000000000130 .LBE59
     /tmp/cc0n6rZW.s:3731   .debug_loc:000000000000058c .LLST25
     /tmp/cc0n6rZW.s:603    .text:0000000000000218 .LVL37
     /tmp/cc0n6rZW.s:608    .text:0000000000000220 .LVL38
     /tmp/cc0n6rZW.s:625    .text:0000000000000230 .LVL40
     /tmp/cc0n6rZW.s:120    .text:0000000000000068 .LBB37
     /tmp/cc0n6rZW.s:136    .text:0000000000000074 .LBE37
     /tmp/cc0n6rZW.s:138    .text:0000000000000074 .LBB39
     /tmp/cc0n6rZW.s:154    .text:0000000000000080 .LBE39
     /tmp/cc0n6rZW.s:894    .text:0000000000000348 .LBB62
     /tmp/cc0n6rZW.s:910    .text:0000000000000354 .LBE62
     /tmp/cc0n6rZW.s:3738   .debug_loc:00000000000005af .LLST26
     /tmp/cc0n6rZW.s:917    .text:0000000000000364 .LVL67
     /tmp/cc0n6rZW.s:62     .text:0000000000000028 .LFB30
     /tmp/cc0n6rZW.s:96     .text:000000000000004c .LFE30
     /tmp/cc0n6rZW.s:76     .text:000000000000003c .LBB35
     /tmp/cc0n6rZW.s:87     .text:0000000000000040 .LBE35
     /tmp/cc0n6rZW.s:10     .text:0000000000000000 .LFB29
     /tmp/cc0n6rZW.s:56     .text:0000000000000028 .LFE29
     /tmp/cc0n6rZW.s:22     .text:000000000000000c .LBB33
     /tmp/cc0n6rZW.s:35     .text:0000000000000014 .LBE33
     /tmp/cc0n6rZW.s:3746   .debug_loc:00000000000005d3 .LLST0
     /tmp/cc0n6rZW.s:4096   .debug_str:0000000000000a44 .LASF170
     /tmp/cc0n6rZW.s:3924   .debug_str:0000000000000450 .LASF171
     /tmp/cc0n6rZW.s:3916   .debug_str:0000000000000430 .LASF172
     /tmp/cc0n6rZW.s:3928   .debug_str:000000000000046a .LASF173
     /tmp/cc0n6rZW.s:3868   .debug_str:00000000000002c8 .LASF174
     /tmp/cc0n6rZW.s:134    .text:0000000000000074 .LVL4
     /tmp/cc0n6rZW.s:170    .text:0000000000000098 .LVL8
     /tmp/cc0n6rZW.s:152    .text:0000000000000080 .LVL5
     /tmp/cc0n6rZW.s:192    .text:00000000000000b4 .LVL10
     /tmp/cc0n6rZW.s:200    .text:00000000000000c4 .LVL11
     /tmp/cc0n6rZW.s:158    .text:0000000000000084 .LVL6
     /tmp/cc0n6rZW.s:180    .text:00000000000000a8 .LVL9
     /tmp/cc0n6rZW.s:390    .text:0000000000000130 .LVL22
     /tmp/cc0n6rZW.s:435    .text:000000000000015c .LVL25
     /tmp/cc0n6rZW.s:463    .text:000000000000017c .LVL27
     /tmp/cc0n6rZW.s:491    .text:000000000000019c .LVL29
     /tmp/cc0n6rZW.s:589    .text:0000000000000200 .LVL36
     /tmp/cc0n6rZW.s:618    .text:0000000000000228 .LVL39
     /tmp/cc0n6rZW.s:628    .text:0000000000000234 .LVL41
     /tmp/cc0n6rZW.s:700    .text:0000000000000288 .LVL46
     /tmp/cc0n6rZW.s:736    .text:00000000000002b0 .LVL49
     /tmp/cc0n6rZW.s:782    .text:00000000000002e0 .LVL53
     /tmp/cc0n6rZW.s:828    .text:0000000000000310 .LVL57
     /tmp/cc0n6rZW.s:862    .text:000000000000032c .LVL60
GAS LISTING /tmp/cc0n6rZW.s 			page 39


     /tmp/cc0n6rZW.s:884    .text:0000000000000340 .LVL63
     /tmp/cc0n6rZW.s:164    .text:0000000000000090 .LVL7
     /tmp/cc0n6rZW.s:215    .text:00000000000000c8 .LVL12
     /tmp/cc0n6rZW.s:235    .text:00000000000000d8 .LVL15
     /tmp/cc0n6rZW.s:899    .text:000000000000034c .LVL65
     /tmp/cc0n6rZW.s:907    .text:0000000000000354 .LVL66
     /tmp/cc0n6rZW.s:221    .text:00000000000000d0 .LVL13
     /tmp/cc0n6rZW.s:231    .text:00000000000000d4 .LVL14
     /tmp/cc0n6rZW.s:238    .text:00000000000000e0 .LVL16
     /tmp/cc0n6rZW.s:335    .text:000000000000010c .LVL17
     /tmp/cc0n6rZW.s:356    .text:0000000000000120 .LVL19
     /tmp/cc0n6rZW.s:412    .text:0000000000000144 .LVL23
     /tmp/cc0n6rZW.s:514    .text:00000000000001b0 .LVL30
     /tmp/cc0n6rZW.s:525    .text:00000000000001b8 .LVL31
     /tmp/cc0n6rZW.s:536    .text:00000000000001c0 .LVL32
     /tmp/cc0n6rZW.s:547    .text:00000000000001c8 .LVL33
     /tmp/cc0n6rZW.s:648    .text:0000000000000248 .LVL42
     /tmp/cc0n6rZW.s:659    .text:0000000000000250 .LVL43
     /tmp/cc0n6rZW.s:664    .text:0000000000000254 .LVL44
     /tmp/cc0n6rZW.s:720    .text:000000000000029c .LVL47
     /tmp/cc0n6rZW.s:746    .text:00000000000002b8 .LVL50
     /tmp/cc0n6rZW.s:766    .text:00000000000002cc .LVL51
     /tmp/cc0n6rZW.s:792    .text:00000000000002e8 .LVL54
     /tmp/cc0n6rZW.s:812    .text:00000000000002fc .LVL55
     /tmp/cc0n6rZW.s:838    .text:0000000000000318 .LVL58
     /tmp/cc0n6rZW.s:875    .text:0000000000000330 .LVL61
     /tmp/cc0n6rZW.s:364    .text:0000000000000124 .LVL20
     /tmp/cc0n6rZW.s:374    .text:0000000000000128 .LVL21
     /tmp/cc0n6rZW.s:893    .text:0000000000000348 .LVL64
     /tmp/cc0n6rZW.s:21     .text:000000000000000c .LVL0
     /tmp/cc0n6rZW.s:32     .text:0000000000000014 .LVL1
     /tmp/cc0n6rZW.s:931    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
trap_handler
framePointer
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN15MemoryAllocator18mem_get_free_spaceEv
_ZN15MemoryAllocator26mem_get_largest_free_blockEv
_ZN7KThread12createThreadEPFvPvES0_S0_
_ZN7KThread5startEv
_ZN7KThread7runningE
_ZN7KThread4exitEv
_ZN7KThread8dispatchEv
_ZN10KSemaphore15createSemaphoreEm
_ZN10KSemaphore5closeEv
_ZN10KSemaphore4waitEv
_ZN10KSemaphore6signalEv
__getc
__putc
console_handler
