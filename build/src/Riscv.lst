GAS LISTING /tmp/ccRmqFBL.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv16setupTrapHandlerEv
   9              	_ZN5Riscv16setupTrapHandlerEv:
  10              	.LFB6:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 10/7/25.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** 
   7:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   8:src/Riscv.cpp **** #include "../h/Thread.hpp"
   9:src/Riscv.cpp **** #include "../lib/hw.h"
  10:src/Riscv.cpp **** 
  11:src/Riscv.cpp **** constexpr uint64 MEM_ALLOC = 0x01;
  12:src/Riscv.cpp **** constexpr uint64 MEM_FREE = 0x02;
  13:src/Riscv.cpp **** constexpr uint64 MEM_GET_FREE_SPACE = 0x03;
  14:src/Riscv.cpp **** constexpr uint64 MEM_GET_LARGEST_FREE_BLOCK = 0x04;
  15:src/Riscv.cpp **** 
  16:src/Riscv.cpp **** constexpr uint64 THREAD_CREATE = 0x11;
  17:src/Riscv.cpp **** constexpr uint64 THREAD_EXIT = 0x12;
  18:src/Riscv.cpp **** constexpr uint64 THREAD_DISPATCH = 0x13;
  19:src/Riscv.cpp **** 
  20:src/Riscv.cpp **** void Riscv::setupTrapHandler() {
  12              		.loc 1 20 32
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  21:src/Riscv.cpp ****     unsigned long addr = (unsigned long)&trap_handler;
  20              		.loc 1 21 5
  21              		.loc 1 21 19 is_stmt 0
  22 000c 97070000 		la	a5,trap_handler
  22      83B70700 
  23              	.LVL0:
  22:src/Riscv.cpp ****     asm volatile("csrw stvec, %0" :: "r"(addr));
  24              		.loc 1 22 5 is_stmt 1
  25              		.loc 1 22 48 is_stmt 0
  26              	#APP
  27              	# 22 "src/Riscv.cpp" 1
  23              	}
  28              		csrw stvec, a5
  29              	# 0 "" 2
  30              		.loc 1 23 1
  31              	#NO_APP
  32 0018 03348100 		ld	s0,8(sp)
  33              		.cfi_restore 8
  34              		.cfi_def_cfa 2, 16
GAS LISTING /tmp/ccRmqFBL.s 			page 2


  35 001c 13010101 		addi	sp,sp,16
  36              		.cfi_def_cfa_offset 0
  37 0020 67800000 		jr	ra
  38              		.cfi_endproc
  39              	.LFE6:
  41              		.align	2
  42              		.globl	_ZN5Riscv11trapHandlerEv
  44              	_ZN5Riscv11trapHandlerEv:
  45              	.LFB7:
  24:src/Riscv.cpp **** 
  25:src/Riscv.cpp **** void Riscv::trapHandler() {
  46              		.loc 1 25 27 is_stmt 1
  47              		.cfi_startproc
  48 0024 130101FE 		addi	sp,sp,-32
  49              		.cfi_def_cfa_offset 32
  50 0028 233C1100 		sd	ra,24(sp)
  51 002c 23388100 		sd	s0,16(sp)
  52 0030 23349100 		sd	s1,8(sp)
  53 0034 23302101 		sd	s2,0(sp)
  54              		.cfi_offset 1, -8
  55              		.cfi_offset 8, -16
  56              		.cfi_offset 9, -24
  57              		.cfi_offset 18, -32
  58 0038 13040102 		addi	s0,sp,32
  59              		.cfi_def_cfa 8, 0
  26:src/Riscv.cpp ****     uint64 scause = 0, sepc = 0;
  60              		.loc 1 26 5
  61              	.LVL1:
  27:src/Riscv.cpp ****     asm volatile("csrr %0, scause" : "=r"(scause));
  62              		.loc 1 27 5
  63              		.loc 1 27 51 is_stmt 0
  64              	#APP
  65              	# 27 "src/Riscv.cpp" 1
  28              	    asm volatile("csrr %0, sepc" : "=r"(sepc));
  66              		csrr a4, scause
  67              	# 0 "" 2
  68              	.LVL2:
  69              		.loc 1 28 5 is_stmt 1
  70              		.loc 1 28 47 is_stmt 0
  71              	# 28 "src/Riscv.cpp" 1
  29              	
  72              		csrr s1, sepc
  73              	# 0 "" 2
  74              	.LVL3:
  30:src/Riscv.cpp ****     uint64 interrupt = scause >> 63;
  75              		.loc 1 30 5 is_stmt 1
  31:src/Riscv.cpp ****     uint64 cause = scause & 0x7FFFFFFFFFFFFFFF;
  76              		.loc 1 31 5
  77              		.loc 1 31 12 is_stmt 0
  78              	#NO_APP
  79 0044 9307F0FF 		li	a5,-1
  80 0048 93D71700 		srli	a5,a5,1
  81 004c B377F700 		and	a5,a4,a5
  82              	.LVL4:
  32:src/Riscv.cpp **** 
  33:src/Riscv.cpp ****     if (interrupt == 0 && (cause == 8 || cause == 9)) {
  83              		.loc 1 33 5 is_stmt 1
GAS LISTING /tmp/ccRmqFBL.s 			page 3


  84              	.LBB2:
  85 0050 63480700 		bltz	a4,.L3
  86              		.loc 1 33 39 is_stmt 0 discriminator 1
  87 0054 938787FF 		addi	a5,a5,-8
  88              	.LVL5:
  89              		.loc 1 33 24 discriminator 1
  90 0058 13071000 		li	a4,1
  91              	.LVL6:
  92 005c 637EF700 		bleu	a5,a4,.L18
  93              	.LVL7:
  94              	.L3:
  95              	.LBE2:
  34:src/Riscv.cpp ****         uint64 code;
  35:src/Riscv.cpp ****         asm volatile("mv %0, a0" : "=r"(code));
  36:src/Riscv.cpp **** 
  37:src/Riscv.cpp ****         switch (code) {
  38:src/Riscv.cpp ****             case MEM_ALLOC: {
  39:src/Riscv.cpp ****                 size_t size;
  40:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
  41:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(size));
  42:src/Riscv.cpp ****                 void* ptr = MemoryAllocator::mem_alloc(size);
  43:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(ptr));
  44:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
  45:src/Riscv.cpp ****                 break;
  46:src/Riscv.cpp ****             }
  47:src/Riscv.cpp ****             case MEM_FREE: {
  48:src/Riscv.cpp ****                 void* addr;
  49:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
  50:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(addr));
  51:src/Riscv.cpp ****                 int status = MemoryAllocator::mem_free(addr);
  52:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(status));
  53:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
  54:src/Riscv.cpp ****                 break;
  55:src/Riscv.cpp ****             }
  56:src/Riscv.cpp ****             case MEM_GET_FREE_SPACE: {
  57:src/Riscv.cpp ****                 size_t freeSpace = MemoryAllocator::mem_get_free_space();
  58:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(freeSpace));
  59:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
  60:src/Riscv.cpp ****                 break;
  61:src/Riscv.cpp ****             }
  62:src/Riscv.cpp ****             case MEM_GET_LARGEST_FREE_BLOCK: {
  63:src/Riscv.cpp ****                 size_t largest = MemoryAllocator::mem_get_largest_free_block();
  64:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(largest));
  65:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
  66:src/Riscv.cpp ****                 break;
  67:src/Riscv.cpp ****             }
  68:src/Riscv.cpp ****             case THREAD_CREATE: {
  69:src/Riscv.cpp ****                 Thread** handle = nullptr;
  70:src/Riscv.cpp ****                 void (*start_routine)(void*) = nullptr;
  71:src/Riscv.cpp ****                 void* args = nullptr;
  72:src/Riscv.cpp ****                 void* stack = nullptr;
  73:src/Riscv.cpp **** 
  74:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
  75:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
  76:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
  77:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(start_routine));
  78:src/Riscv.cpp ****                 asm volatile("ld a3, 13*8(%0)" :: "r"(framePointer));
GAS LISTING /tmp/ccRmqFBL.s 			page 4


  79:src/Riscv.cpp ****                 asm volatile("mv %0, a3" : "=r"(args));
  80:src/Riscv.cpp ****                 asm volatile("ld a4, 14*8(%0)" :: "r"(framePointer));
  81:src/Riscv.cpp ****                 asm volatile("mv %0, a4" : "=r"(stack));
  82:src/Riscv.cpp **** 
  83:src/Riscv.cpp ****                 size_t stackSize = DEFAULT_STACK_SIZE;
  84:src/Riscv.cpp **** 
  85:src/Riscv.cpp ****                 *handle = Thread::createThread(start_routine, args, stack, stackSize);
  86:src/Riscv.cpp **** 
  87:src/Riscv.cpp ****                 if (*handle != nullptr) {
  88:src/Riscv.cpp ****                     (*handle)->start();
  89:src/Riscv.cpp ****                     asm volatile("li a0, 0");
  90:src/Riscv.cpp ****                 }
  91:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
  92:src/Riscv.cpp **** 
  93:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
  94:src/Riscv.cpp **** 
  95:src/Riscv.cpp ****                 break;
  96:src/Riscv.cpp ****             }
  97:src/Riscv.cpp ****             case THREAD_EXIT: {
  98:src/Riscv.cpp ****                 if (Thread::running) {
  99:src/Riscv.cpp ****                     Thread::running->exit();
 100:src/Riscv.cpp ****                 }
 101:src/Riscv.cpp **** 
 102:src/Riscv.cpp ****                 Thread::dispatch();
 103:src/Riscv.cpp **** 
 104:src/Riscv.cpp ****                 asm volatile("li a0, 0");
 105:src/Riscv.cpp **** 
 106:src/Riscv.cpp ****                 break;
 107:src/Riscv.cpp ****             }
 108:src/Riscv.cpp ****             case THREAD_DISPATCH: {
 109:src/Riscv.cpp ****                 Thread::dispatch();
 110:src/Riscv.cpp **** 
 111:src/Riscv.cpp ****                 break;
 112:src/Riscv.cpp ****             }
 113:src/Riscv.cpp ****             default:
 114:src/Riscv.cpp ****                 break;
 115:src/Riscv.cpp ****         }
 116:src/Riscv.cpp **** 
 117:src/Riscv.cpp ****         sepc += 4;
 118:src/Riscv.cpp ****         asm volatile("csrw sepc, %0" :: "r"(sepc));
 119:src/Riscv.cpp ****     }
 120:src/Riscv.cpp **** }...
  96              		.loc 1 120 1
  97 0060 83308101 		ld	ra,24(sp)
  98              		.cfi_remember_state
  99              		.cfi_restore 1
 100 0064 03340101 		ld	s0,16(sp)
 101              		.cfi_restore 8
 102              		.cfi_def_cfa 2, 32
 103 0068 83348100 		ld	s1,8(sp)
 104              		.cfi_restore 9
 105              	.LVL8:
 106 006c 03390100 		ld	s2,0(sp)
 107              		.cfi_restore 18
 108 0070 13010102 		addi	sp,sp,32
 109              		.cfi_def_cfa_offset 0
 110 0074 67800000 		jr	ra
GAS LISTING /tmp/ccRmqFBL.s 			page 5


 111              	.LVL9:
 112              	.L18:
 113              		.cfi_restore_state
 114              	.LBB12:
 115              	.LBB3:
  34:src/Riscv.cpp ****         uint64 code;
 116              		.loc 1 34 9 is_stmt 1
  35:src/Riscv.cpp ****         asm volatile("mv %0, a0" : "=r"(code));
 117              		.loc 1 35 9
  35:src/Riscv.cpp ****         asm volatile("mv %0, a0" : "=r"(code));
 118              		.loc 1 35 47 is_stmt 0
 119              	#APP
 120              	# 35 "src/Riscv.cpp" 1
 121              		mv a5, a0
 122              	# 0 "" 2
 123              	.LVL10:
  37:src/Riscv.cpp ****         switch (code) {
 124              		.loc 1 37 9 is_stmt 1
 125              	#NO_APP
 126 007c 13073001 		li	a4,19
 127 0080 6364F704 		bgtu	a5,a4,.L5
 128 0084 93972700 		slli	a5,a5,2
 129              	.LVL11:
 130 0088 17070000 		lla	a4,.L7
 130      13070700 
 131 0090 B387E700 		add	a5,a5,a4
 132 0094 83A70700 		lw	a5,0(a5)
 133 0098 B387E700 		add	a5,a5,a4
 134 009c 67800700 		jr	a5
 135              		.section	.rodata
 136              		.align	2
 137              		.align	2
 138              	.L7:
 139 0000 00000000 		.word	.L5-.L7
 140 0004 00000000 		.word	.L13-.L7
 141 0008 00000000 		.word	.L12-.L7
 142 000c 00000000 		.word	.L11-.L7
 143 0010 00000000 		.word	.L10-.L7
 144 0014 00000000 		.word	.L5-.L7
 145 0018 00000000 		.word	.L5-.L7
 146 001c 00000000 		.word	.L5-.L7
 147 0020 00000000 		.word	.L5-.L7
 148 0024 00000000 		.word	.L5-.L7
 149 0028 00000000 		.word	.L5-.L7
 150 002c 00000000 		.word	.L5-.L7
 151 0030 00000000 		.word	.L5-.L7
 152 0034 00000000 		.word	.L5-.L7
 153 0038 00000000 		.word	.L5-.L7
 154 003c 00000000 		.word	.L5-.L7
 155 0040 00000000 		.word	.L5-.L7
 156 0044 00000000 		.word	.L9-.L7
 157 0048 00000000 		.word	.L8-.L7
 158 004c 00000000 		.word	.L6-.L7
 159              		.text
 160              	.L13:
 161              	.LBB4:
  38:src/Riscv.cpp ****             case MEM_ALLOC: {
GAS LISTING /tmp/ccRmqFBL.s 			page 6


 162              		.loc 1 38 13
  38:src/Riscv.cpp ****             case MEM_ALLOC: {
 163              		.loc 1 38 29
 164              	.LBB5:
  39:src/Riscv.cpp ****                 size_t size;
 165              		.loc 1 39 17
  40:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 166              		.loc 1 40 17
  40:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 167              		.loc 1 40 69 is_stmt 0
 168 00a0 17090000 		la	s2,framePointer
 168      03390900 
 169 00a8 83370900 		ld	a5,0(s2)
 170              	#APP
 171              	# 40 "src/Riscv.cpp" 1
  41:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(size));
 172              		ld a1, 11*8(a5)
 173              	# 0 "" 2
 174              		.loc 1 41 17 is_stmt 1
  41:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(size));
 175              		.loc 1 41 55 is_stmt 0
 176              	# 41 "src/Riscv.cpp" 1
 177              		mv a0, a1
 178              	# 0 "" 2
 179              	.LVL12:
  42:src/Riscv.cpp ****                 void* ptr = MemoryAllocator::mem_alloc(size);
 180              		.loc 1 42 17 is_stmt 1
  42:src/Riscv.cpp ****                 void* ptr = MemoryAllocator::mem_alloc(size);
 181              		.loc 1 42 55 is_stmt 0
 182              	#NO_APP
 183 00b4 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 183      E7800000 
 184              	.LVL13:
  43:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(ptr));
 185              		.loc 1 43 17 is_stmt 1
  43:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(ptr));
 186              		.loc 1 43 54 is_stmt 0
 187              	#APP
 188              	# 43 "src/Riscv.cpp" 1
  44:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 189              		mv a0, a0
 190              	# 0 "" 2
 191              		.loc 1 44 17 is_stmt 1
  44:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 192              		.loc 1 44 69 is_stmt 0
 193              	#NO_APP
 194 00c0 83370900 		ld	a5,0(s2)
 195              	#APP
 196              	# 44 "src/Riscv.cpp" 1
  45:src/Riscv.cpp ****                 break;
 197              		sd a0, 10*8(a5)
 198              	# 0 "" 2
 199              		.loc 1 45 17 is_stmt 1
 200              	.LVL14:
 201              	#NO_APP
 202              	.L5:
 203              	.LBE5:
GAS LISTING /tmp/ccRmqFBL.s 			page 7


 204              	.LBE4:
 117:src/Riscv.cpp ****         sepc += 4;
 205              		.loc 1 117 9
 117:src/Riscv.cpp ****         sepc += 4;
 206              		.loc 1 117 14 is_stmt 0
 207 00c8 93844400 		addi	s1,s1,4
 208              	.LVL15:
 118:src/Riscv.cpp ****         asm volatile("csrw sepc, %0" :: "r"(sepc));
 209              		.loc 1 118 9 is_stmt 1
 118:src/Riscv.cpp ****         asm volatile("csrw sepc, %0" :: "r"(sepc));
 210              		.loc 1 118 51 is_stmt 0
 211              	#APP
 212              	# 118 "src/Riscv.cpp" 1
 213              		csrw sepc, s1
 214              	# 0 "" 2
 215              	#NO_APP
 216              	.LBE3:
 217              	.LBE12:
 218              		.loc 1 120 1
 219 00d0 6FF01FF9 		j	.L3
 220              	.L12:
 221              	.LBB13:
 222              	.LBB11:
 223              	.LBB10:
  47:src/Riscv.cpp ****             case MEM_FREE: {
 224              		.loc 1 47 13 is_stmt 1
  47:src/Riscv.cpp ****             case MEM_FREE: {
 225              		.loc 1 47 28
 226              	.LBB6:
  48:src/Riscv.cpp ****                 void* addr;
 227              		.loc 1 48 17
  49:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 228              		.loc 1 49 17
  49:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 229              		.loc 1 49 69 is_stmt 0
 230 00d4 17090000 		la	s2,framePointer
 230      03390900 
 231 00dc 83370900 		ld	a5,0(s2)
 232              	#APP
 233              	# 49 "src/Riscv.cpp" 1
  50:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(addr));
 234              		ld a1, 11*8(a5)
 235              	# 0 "" 2
 236              		.loc 1 50 17 is_stmt 1
  50:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(addr));
 237              		.loc 1 50 55 is_stmt 0
 238              	# 50 "src/Riscv.cpp" 1
 239              		mv a0, a1
 240              	# 0 "" 2
 241              	.LVL16:
  51:src/Riscv.cpp ****                 int status = MemoryAllocator::mem_free(addr);
 242              		.loc 1 51 17 is_stmt 1
  51:src/Riscv.cpp ****                 int status = MemoryAllocator::mem_free(addr);
 243              		.loc 1 51 55 is_stmt 0
 244              	#NO_APP
 245 00e8 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 245      E7800000 
GAS LISTING /tmp/ccRmqFBL.s 			page 8


 246              	.LVL17:
  52:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(status));
 247              		.loc 1 52 17 is_stmt 1
  52:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(status));
 248              		.loc 1 52 57 is_stmt 0
 249              	#APP
 250              	# 52 "src/Riscv.cpp" 1
  53:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 251              		mv a0, a0
 252              	# 0 "" 2
 253              		.loc 1 53 17 is_stmt 1
  53:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 254              		.loc 1 53 69 is_stmt 0
 255              	#NO_APP
 256 00f4 83370900 		ld	a5,0(s2)
 257              	#APP
 258              	# 53 "src/Riscv.cpp" 1
  54:src/Riscv.cpp ****                 break;
 259              		sd a0, 10*8(a5)
 260              	# 0 "" 2
 261              		.loc 1 54 17 is_stmt 1
 262              	#NO_APP
 263 00fc 6FF0DFFC 		j	.L5
 264              	.LVL18:
 265              	.L11:
 266              	.LBE6:
  56:src/Riscv.cpp ****             case MEM_GET_FREE_SPACE: {
 267              		.loc 1 56 13
  56:src/Riscv.cpp ****             case MEM_GET_FREE_SPACE: {
 268              		.loc 1 56 38
 269              	.LBB7:
  57:src/Riscv.cpp ****                 size_t freeSpace = MemoryAllocator::mem_get_free_space();
 270              		.loc 1 57 17
  57:src/Riscv.cpp ****                 size_t freeSpace = MemoryAllocator::mem_get_free_space();
 271              		.loc 1 57 71 is_stmt 0
 272 0100 97000000 		call	_ZN15MemoryAllocator18mem_get_free_spaceEv@plt
 272      E7800000 
 273              	.LVL19:
  58:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(freeSpace));
 274              		.loc 1 58 17 is_stmt 1
  58:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(freeSpace));
 275              		.loc 1 58 60 is_stmt 0
 276              	#APP
 277              	# 58 "src/Riscv.cpp" 1
  59:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 278              		mv a0, a0
 279              	# 0 "" 2
 280              		.loc 1 59 17 is_stmt 1
  59:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 281              		.loc 1 59 69 is_stmt 0
 282              	#NO_APP
 283 010c 97070000 		la	a5,framePointer
 283      83B70700 
 284 0114 83B70700 		ld	a5,0(a5)
 285              	#APP
 286              	# 59 "src/Riscv.cpp" 1
  60:src/Riscv.cpp ****                 break;
GAS LISTING /tmp/ccRmqFBL.s 			page 9


 287              		sd a0, 10*8(a5)
 288              	# 0 "" 2
 289              		.loc 1 60 17 is_stmt 1
 290              	#NO_APP
 291 011c 6FF0DFFA 		j	.L5
 292              	.LVL20:
 293              	.L10:
 294              	.LBE7:
  62:src/Riscv.cpp ****             case MEM_GET_LARGEST_FREE_BLOCK: {
 295              		.loc 1 62 13
  62:src/Riscv.cpp ****             case MEM_GET_LARGEST_FREE_BLOCK: {
 296              		.loc 1 62 46
 297              	.LBB8:
  63:src/Riscv.cpp ****                 size_t largest = MemoryAllocator::mem_get_largest_free_block();
 298              		.loc 1 63 17
  63:src/Riscv.cpp ****                 size_t largest = MemoryAllocator::mem_get_largest_free_block();
 299              		.loc 1 63 77 is_stmt 0
 300 0120 97000000 		call	_ZN15MemoryAllocator26mem_get_largest_free_blockEv@plt
 300      E7800000 
 301              	.LVL21:
  64:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(largest));
 302              		.loc 1 64 17 is_stmt 1
  64:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(largest));
 303              		.loc 1 64 58 is_stmt 0
 304              	#APP
 305              	# 64 "src/Riscv.cpp" 1
  65:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 306              		mv a0, a0
 307              	# 0 "" 2
 308              		.loc 1 65 17 is_stmt 1
  65:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 309              		.loc 1 65 69 is_stmt 0
 310              	#NO_APP
 311 012c 97070000 		la	a5,framePointer
 311      83B70700 
 312 0134 83B70700 		ld	a5,0(a5)
 313              	#APP
 314              	# 65 "src/Riscv.cpp" 1
  66:src/Riscv.cpp ****                 break;
 315              		sd a0, 10*8(a5)
 316              	# 0 "" 2
 317              		.loc 1 66 17 is_stmt 1
 318              	#NO_APP
 319 013c 6FF0DFF8 		j	.L5
 320              	.LVL22:
 321              	.L9:
 322              	.LBE8:
  68:src/Riscv.cpp ****             case THREAD_CREATE: {
 323              		.loc 1 68 13
  68:src/Riscv.cpp ****             case THREAD_CREATE: {
 324              		.loc 1 68 33
 325              	.LBB9:
  69:src/Riscv.cpp ****                 Thread** handle = nullptr;
 326              		.loc 1 69 17
  70:src/Riscv.cpp ****                 void (*start_routine)(void*) = nullptr;
 327              		.loc 1 70 17
  71:src/Riscv.cpp ****                 void* args = nullptr;
GAS LISTING /tmp/ccRmqFBL.s 			page 10


 328              		.loc 1 71 17
  72:src/Riscv.cpp ****                 void* stack = nullptr;
 329              		.loc 1 72 17
  74:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 330              		.loc 1 74 17
  74:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 331              		.loc 1 74 69 is_stmt 0
 332 0140 97070000 		la	a5,framePointer
 332      83B70700 
 333 0148 83B70700 		ld	a5,0(a5)
 334              	#APP
 335              	# 74 "src/Riscv.cpp" 1
  75:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 336              		ld a1, 11*8(a5)
 337              	# 0 "" 2
 338              		.loc 1 75 17 is_stmt 1
  75:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 339              		.loc 1 75 57 is_stmt 0
 340              	# 75 "src/Riscv.cpp" 1
 341              		mv s2, a1
 342              	# 0 "" 2
 343              	.LVL23:
  76:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 344              		.loc 1 76 17 is_stmt 1
  76:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 345              		.loc 1 76 69 is_stmt 0
 346              	# 76 "src/Riscv.cpp" 1
  77:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(start_routine));
 347              		ld a2, 12*8(a5)
 348              	# 0 "" 2
 349              		.loc 1 77 17 is_stmt 1
  77:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(start_routine));
 350              		.loc 1 77 64 is_stmt 0
 351              	# 77 "src/Riscv.cpp" 1
 352              		mv a0, a2
 353              	# 0 "" 2
 354              	.LVL24:
  78:src/Riscv.cpp ****                 asm volatile("ld a3, 13*8(%0)" :: "r"(framePointer));
 355              		.loc 1 78 17 is_stmt 1
  78:src/Riscv.cpp ****                 asm volatile("ld a3, 13*8(%0)" :: "r"(framePointer));
 356              		.loc 1 78 69 is_stmt 0
 357              	# 78 "src/Riscv.cpp" 1
  79:src/Riscv.cpp ****                 asm volatile("mv %0, a3" : "=r"(args));
 358              		ld a3, 13*8(a5)
 359              	# 0 "" 2
 360              		.loc 1 79 17 is_stmt 1
  79:src/Riscv.cpp ****                 asm volatile("mv %0, a3" : "=r"(args));
 361              		.loc 1 79 55 is_stmt 0
 362              	# 79 "src/Riscv.cpp" 1
 363              		mv a1, a3
 364              	# 0 "" 2
 365              	.LVL25:
  80:src/Riscv.cpp ****                 asm volatile("ld a4, 14*8(%0)" :: "r"(framePointer));
 366              		.loc 1 80 17 is_stmt 1
  80:src/Riscv.cpp ****                 asm volatile("ld a4, 14*8(%0)" :: "r"(framePointer));
 367              		.loc 1 80 69 is_stmt 0
 368              	# 80 "src/Riscv.cpp" 1
GAS LISTING /tmp/ccRmqFBL.s 			page 11


  81:src/Riscv.cpp ****                 asm volatile("mv %0, a4" : "=r"(stack));
 369              		ld a4, 14*8(a5)
 370              	# 0 "" 2
 371              		.loc 1 81 17 is_stmt 1
  81:src/Riscv.cpp ****                 asm volatile("mv %0, a4" : "=r"(stack));
 372              		.loc 1 81 56 is_stmt 0
 373              	# 81 "src/Riscv.cpp" 1
 374              		mv a2, a4
 375              	# 0 "" 2
 376              	.LVL26:
  83:src/Riscv.cpp ****                 size_t stackSize = DEFAULT_STACK_SIZE;
 377              		.loc 1 83 17 is_stmt 1
  85:src/Riscv.cpp ****                 *handle = Thread::createThread(start_routine, args, stack, stackSize);
 378              		.loc 1 85 17
  85:src/Riscv.cpp ****                 *handle = Thread::createThread(start_routine, args, stack, stackSize);
 379              		.loc 1 85 47 is_stmt 0
 380              	#NO_APP
 381 016c B7160000 		li	a3,4096
 382 0170 97000000 		call	_ZN6Thread12createThreadEPFvPvES0_S0_m@plt
 382      E7800000 
 383              	.LVL27:
  85:src/Riscv.cpp ****                 *handle = Thread::createThread(start_routine, args, stack, stackSize);
 384              		.loc 1 85 25
 385 0178 2330A900 		sd	a0,0(s2)
  87:src/Riscv.cpp ****                 if (*handle != nullptr) {
 386              		.loc 1 87 17 is_stmt 1
 387 017c 63020502 		beqz	a0,.L14
  88:src/Riscv.cpp ****                     (*handle)->start();
 388              		.loc 1 88 21
  88:src/Riscv.cpp ****                     (*handle)->start();
 389              		.loc 1 88 37 is_stmt 0
 390 0180 97000000 		call	_ZN6Thread5startEv@plt
 390      E7800000 
 391              	.LVL28:
  89:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 392              		.loc 1 89 21 is_stmt 1
  89:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 393              		.loc 1 89 45 is_stmt 0
 394              	#APP
 395              	# 89 "src/Riscv.cpp" 1
 396              		li a0, 0
 397              	# 0 "" 2
 398              	#NO_APP
 399              	.L15:
  93:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 400              		.loc 1 93 17 is_stmt 1
  93:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 401              		.loc 1 93 69 is_stmt 0
 402 018c 97070000 		la	a5,framePointer
 402      83B70700 
 403 0194 83B70700 		ld	a5,0(a5)
 404              	#APP
 405              	# 93 "src/Riscv.cpp" 1
  95:src/Riscv.cpp ****                 break;
 406              		sd a0, 10*8(a5)
 407              	# 0 "" 2
 408              		.loc 1 95 17 is_stmt 1
GAS LISTING /tmp/ccRmqFBL.s 			page 12


 409              	#NO_APP
 410 019c 6FF0DFF2 		j	.L5
 411              	.L14:
  91:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 412              		.loc 1 91 22
  91:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 413              		.loc 1 91 47 is_stmt 0
 414              	#APP
 415              	# 91 "src/Riscv.cpp" 1
 416              		li a0, -1
 417              	# 0 "" 2
 418              	#NO_APP
 419 01a4 6FF09FFE 		j	.L15
 420              	.LVL29:
 421              	.L8:
 422              	.LBE9:
  97:src/Riscv.cpp ****             case THREAD_EXIT: {
 423              		.loc 1 97 13 is_stmt 1
  97:src/Riscv.cpp ****             case THREAD_EXIT: {
 424              		.loc 1 97 31
  98:src/Riscv.cpp ****                 if (Thread::running) {
 425              		.loc 1 98 17
  98:src/Riscv.cpp ****                 if (Thread::running) {
 426              		.loc 1 98 36 is_stmt 0
 427 01a8 97070000 		la	a5,_ZN6Thread7runningE
 427      83B70700 
 428 01b0 03B50700 		ld	a0,0(a5)
  98:src/Riscv.cpp ****                 if (Thread::running) {
 429              		.loc 1 98 17
 430 01b4 63060500 		beqz	a0,.L16
  99:src/Riscv.cpp ****                     Thread::running->exit();
 431              		.loc 1 99 21 is_stmt 1
  99:src/Riscv.cpp ****                     Thread::running->exit();
 432              		.loc 1 99 42 is_stmt 0
 433 01b8 97000000 		call	_ZN6Thread4exitEv@plt
 433      E7800000 
 434              	.LVL30:
 435              	.L16:
 102:src/Riscv.cpp ****                 Thread::dispatch();
 436              		.loc 1 102 17 is_stmt 1
 102:src/Riscv.cpp ****                 Thread::dispatch();
 437              		.loc 1 102 33 is_stmt 0
 438 01c0 97000000 		call	_ZN6Thread8dispatchEv@plt
 438      E7800000 
 439              	.LVL31:
 104:src/Riscv.cpp ****                 asm volatile("li a0, 0");
 440              		.loc 1 104 17 is_stmt 1
 104:src/Riscv.cpp ****                 asm volatile("li a0, 0");
 441              		.loc 1 104 41 is_stmt 0
 442              	#APP
 443              	# 104 "src/Riscv.cpp" 1
 106:src/Riscv.cpp ****                 break;
 444              		li a0, 0
 445              	# 0 "" 2
 446              		.loc 1 106 17 is_stmt 1
 447              	#NO_APP
 448 01cc 6FF0DFEF 		j	.L5
GAS LISTING /tmp/ccRmqFBL.s 			page 13


 449              	.L6:
 108:src/Riscv.cpp ****             case THREAD_DISPATCH: {
 450              		.loc 1 108 13
 108:src/Riscv.cpp ****             case THREAD_DISPATCH: {
 451              		.loc 1 108 35
 109:src/Riscv.cpp ****                 Thread::dispatch();
 452              		.loc 1 109 17
 109:src/Riscv.cpp ****                 Thread::dispatch();
 453              		.loc 1 109 33 is_stmt 0
 454 01d0 97000000 		call	_ZN6Thread8dispatchEv@plt
 454      E7800000 
 455              	.LVL32:
 111:src/Riscv.cpp ****                 break;
 456              		.loc 1 111 17 is_stmt 1
 457 01d8 6FF01FEF 		j	.L5
 458              	.LBE10:
 459              	.LBE11:
 460              	.LBE13:
 461              		.cfi_endproc
 462              	.LFE7:
 464              	.Letext0:
 465              		.file 2 "src/../h/../lib/hw.h"
 466              		.file 3 "src/../h/Riscv.hpp"
 467              		.file 4 "src/../h/MemoryAllocator.hpp"
 468              		.file 5 "src/../h/Thread.hpp"
GAS LISTING /tmp/ccRmqFBL.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccRmqFBL.s:9      .text:0000000000000000 _ZN5Riscv16setupTrapHandlerEv
     /tmp/ccRmqFBL.s:13     .text:0000000000000000 .L0 
     /tmp/ccRmqFBL.s:14     .text:0000000000000000 .L0 
     /tmp/ccRmqFBL.s:15     .text:0000000000000004 .L0 
     /tmp/ccRmqFBL.s:17     .text:0000000000000008 .L0 
     /tmp/ccRmqFBL.s:19     .text:000000000000000c .L0 
     /tmp/ccRmqFBL.s:21     .text:000000000000000c .L0 
     /tmp/ccRmqFBL.s:22     .text:000000000000000c .L0 
     /tmp/ccRmqFBL.s:25     .text:0000000000000014 .L0 
       src/Riscv.cpp:22     .text:0000000000000014 .L0 
     /tmp/ccRmqFBL.s:32     .text:0000000000000018 .L0 
     /tmp/ccRmqFBL.s:33     .text:000000000000001c .L0 
     /tmp/ccRmqFBL.s:34     .text:000000000000001c .L0 
     /tmp/ccRmqFBL.s:36     .text:0000000000000020 .L0 
     /tmp/ccRmqFBL.s:38     .text:0000000000000024 .L0 
     /tmp/ccRmqFBL.s:44     .text:0000000000000024 _ZN5Riscv11trapHandlerEv
     /tmp/ccRmqFBL.s:47     .text:0000000000000024 .L0 
     /tmp/ccRmqFBL.s:48     .text:0000000000000024 .L0 
     /tmp/ccRmqFBL.s:49     .text:0000000000000028 .L0 
     /tmp/ccRmqFBL.s:54     .text:0000000000000038 .L0 
     /tmp/ccRmqFBL.s:55     .text:0000000000000038 .L0 
     /tmp/ccRmqFBL.s:56     .text:0000000000000038 .L0 
     /tmp/ccRmqFBL.s:57     .text:0000000000000038 .L0 
     /tmp/ccRmqFBL.s:59     .text:000000000000003c .L0 
     /tmp/ccRmqFBL.s:62     .text:000000000000003c .L0 
     /tmp/ccRmqFBL.s:63     .text:000000000000003c .L0 
       src/Riscv.cpp:27     .text:000000000000003c .L0 
     /tmp/ccRmqFBL.s:70     .text:0000000000000040 .L0 
       src/Riscv.cpp:28     .text:0000000000000040 .L0 
     /tmp/ccRmqFBL.s:76     .text:0000000000000044 .L0 
     /tmp/ccRmqFBL.s:77     .text:0000000000000044 .L0 
     /tmp/ccRmqFBL.s:79     .text:0000000000000044 .L0 
     /tmp/ccRmqFBL.s:85     .text:0000000000000050 .L0 
     /tmp/ccRmqFBL.s:87     .text:0000000000000054 .L0 
     /tmp/ccRmqFBL.s:90     .text:0000000000000058 .L0 
     /tmp/ccRmqFBL.s:97     .text:0000000000000060 .L0 
     /tmp/ccRmqFBL.s:98     .text:0000000000000064 .L0 
     /tmp/ccRmqFBL.s:99     .text:0000000000000064 .L0 
     /tmp/ccRmqFBL.s:101    .text:0000000000000068 .L0 
     /tmp/ccRmqFBL.s:102    .text:0000000000000068 .L0 
     /tmp/ccRmqFBL.s:104    .text:000000000000006c .L0 
     /tmp/ccRmqFBL.s:107    .text:0000000000000070 .L0 
     /tmp/ccRmqFBL.s:109    .text:0000000000000074 .L0 
     /tmp/ccRmqFBL.s:113    .text:0000000000000078 .L0 
     /tmp/ccRmqFBL.s:117    .text:0000000000000078 .L0 
     /tmp/ccRmqFBL.s:118    .text:0000000000000078 .L0 
       src/Riscv.cpp:35     .text:0000000000000078 .L0 
     /tmp/ccRmqFBL.s:126    .text:000000000000007c .L0 
     /tmp/ccRmqFBL.s:163    .text:00000000000000a0 .L0 
     /tmp/ccRmqFBL.s:165    .text:00000000000000a0 .L0 
     /tmp/ccRmqFBL.s:166    .text:00000000000000a0 .L0 
     /tmp/ccRmqFBL.s:167    .text:00000000000000a0 .L0 
     /tmp/ccRmqFBL.s:168    .text:00000000000000a0 .L0 
     /tmp/ccRmqFBL.s:175    .text:00000000000000b0 .L0 
       src/Riscv.cpp:41     .text:00000000000000b0 .L0 
GAS LISTING /tmp/ccRmqFBL.s 			page 15


     /tmp/ccRmqFBL.s:181    .text:00000000000000b4 .L0 
     /tmp/ccRmqFBL.s:183    .text:00000000000000b4 .L0 
     /tmp/ccRmqFBL.s:186    .text:00000000000000bc .L0 
       src/Riscv.cpp:43     .text:00000000000000bc .L0 
     /tmp/ccRmqFBL.s:192    .text:00000000000000c0 .L0 
     /tmp/ccRmqFBL.s:194    .text:00000000000000c0 .L0 
     /tmp/ccRmqFBL.s:205    .text:00000000000000c8 .L0 
     /tmp/ccRmqFBL.s:206    .text:00000000000000c8 .L0 
     /tmp/ccRmqFBL.s:207    .text:00000000000000c8 .L0 
     /tmp/ccRmqFBL.s:210    .text:00000000000000cc .L0 
       src/Riscv.cpp:118    .text:00000000000000cc .L0 
     /tmp/ccRmqFBL.s:219    .text:00000000000000d0 .L0 
     /tmp/ccRmqFBL.s:225    .text:00000000000000d4 .L0 
     /tmp/ccRmqFBL.s:227    .text:00000000000000d4 .L0 
     /tmp/ccRmqFBL.s:228    .text:00000000000000d4 .L0 
     /tmp/ccRmqFBL.s:229    .text:00000000000000d4 .L0 
     /tmp/ccRmqFBL.s:230    .text:00000000000000d4 .L0 
     /tmp/ccRmqFBL.s:237    .text:00000000000000e4 .L0 
       src/Riscv.cpp:50     .text:00000000000000e4 .L0 
     /tmp/ccRmqFBL.s:243    .text:00000000000000e8 .L0 
     /tmp/ccRmqFBL.s:245    .text:00000000000000e8 .L0 
     /tmp/ccRmqFBL.s:248    .text:00000000000000f0 .L0 
       src/Riscv.cpp:52     .text:00000000000000f0 .L0 
     /tmp/ccRmqFBL.s:254    .text:00000000000000f4 .L0 
     /tmp/ccRmqFBL.s:256    .text:00000000000000f4 .L0 
     /tmp/ccRmqFBL.s:263    .text:00000000000000fc .L0 
     /tmp/ccRmqFBL.s:268    .text:0000000000000100 .L0 
     /tmp/ccRmqFBL.s:270    .text:0000000000000100 .L0 
     /tmp/ccRmqFBL.s:271    .text:0000000000000100 .L0 
     /tmp/ccRmqFBL.s:272    .text:0000000000000100 .L0 
     /tmp/ccRmqFBL.s:275    .text:0000000000000108 .L0 
       src/Riscv.cpp:58     .text:0000000000000108 .L0 
     /tmp/ccRmqFBL.s:281    .text:000000000000010c .L0 
     /tmp/ccRmqFBL.s:283    .text:000000000000010c .L0 
     /tmp/ccRmqFBL.s:291    .text:000000000000011c .L0 
     /tmp/ccRmqFBL.s:296    .text:0000000000000120 .L0 
     /tmp/ccRmqFBL.s:298    .text:0000000000000120 .L0 
     /tmp/ccRmqFBL.s:299    .text:0000000000000120 .L0 
     /tmp/ccRmqFBL.s:300    .text:0000000000000120 .L0 
     /tmp/ccRmqFBL.s:303    .text:0000000000000128 .L0 
       src/Riscv.cpp:64     .text:0000000000000128 .L0 
     /tmp/ccRmqFBL.s:309    .text:000000000000012c .L0 
     /tmp/ccRmqFBL.s:311    .text:000000000000012c .L0 
     /tmp/ccRmqFBL.s:319    .text:000000000000013c .L0 
     /tmp/ccRmqFBL.s:324    .text:0000000000000140 .L0 
     /tmp/ccRmqFBL.s:326    .text:0000000000000140 .L0 
     /tmp/ccRmqFBL.s:327    .text:0000000000000140 .L0 
     /tmp/ccRmqFBL.s:328    .text:0000000000000140 .L0 
     /tmp/ccRmqFBL.s:329    .text:0000000000000140 .L0 
     /tmp/ccRmqFBL.s:330    .text:0000000000000140 .L0 
     /tmp/ccRmqFBL.s:331    .text:0000000000000140 .L0 
     /tmp/ccRmqFBL.s:332    .text:0000000000000140 .L0 
     /tmp/ccRmqFBL.s:339    .text:0000000000000150 .L0 
       src/Riscv.cpp:75     .text:0000000000000150 .L0 
     /tmp/ccRmqFBL.s:345    .text:0000000000000154 .L0 
       src/Riscv.cpp:76     .text:0000000000000154 .L0 
     /tmp/ccRmqFBL.s:350    .text:0000000000000158 .L0 
GAS LISTING /tmp/ccRmqFBL.s 			page 16


       src/Riscv.cpp:77     .text:0000000000000158 .L0 
     /tmp/ccRmqFBL.s:356    .text:000000000000015c .L0 
       src/Riscv.cpp:78     .text:000000000000015c .L0 
     /tmp/ccRmqFBL.s:361    .text:0000000000000160 .L0 
       src/Riscv.cpp:79     .text:0000000000000160 .L0 
     /tmp/ccRmqFBL.s:367    .text:0000000000000164 .L0 
       src/Riscv.cpp:80     .text:0000000000000164 .L0 
     /tmp/ccRmqFBL.s:372    .text:0000000000000168 .L0 
       src/Riscv.cpp:81     .text:0000000000000168 .L0 
     /tmp/ccRmqFBL.s:378    .text:000000000000016c .L0 
     /tmp/ccRmqFBL.s:379    .text:000000000000016c .L0 
     /tmp/ccRmqFBL.s:381    .text:000000000000016c .L0 
     /tmp/ccRmqFBL.s:385    .text:0000000000000178 .L0 
     /tmp/ccRmqFBL.s:387    .text:000000000000017c .L0 
     /tmp/ccRmqFBL.s:389    .text:0000000000000180 .L0 
     /tmp/ccRmqFBL.s:390    .text:0000000000000180 .L0 
     /tmp/ccRmqFBL.s:393    .text:0000000000000188 .L0 
       src/Riscv.cpp:89     .text:0000000000000188 .L0 
     /tmp/ccRmqFBL.s:401    .text:000000000000018c .L0 
     /tmp/ccRmqFBL.s:402    .text:000000000000018c .L0 
     /tmp/ccRmqFBL.s:410    .text:000000000000019c .L0 
     /tmp/ccRmqFBL.s:413    .text:00000000000001a0 .L0 
       src/Riscv.cpp:91     .text:00000000000001a0 .L0 
     /tmp/ccRmqFBL.s:424    .text:00000000000001a8 .L0 
     /tmp/ccRmqFBL.s:425    .text:00000000000001a8 .L0 
     /tmp/ccRmqFBL.s:426    .text:00000000000001a8 .L0 
     /tmp/ccRmqFBL.s:427    .text:00000000000001a8 .L0 
     /tmp/ccRmqFBL.s:430    .text:00000000000001b4 .L0 
     /tmp/ccRmqFBL.s:432    .text:00000000000001b8 .L0 
     /tmp/ccRmqFBL.s:433    .text:00000000000001b8 .L0 
     /tmp/ccRmqFBL.s:437    .text:00000000000001c0 .L0 
     /tmp/ccRmqFBL.s:438    .text:00000000000001c0 .L0 
     /tmp/ccRmqFBL.s:441    .text:00000000000001c8 .L0 
       src/Riscv.cpp:104    .text:00000000000001c8 .L0 
     /tmp/ccRmqFBL.s:448    .text:00000000000001cc .L0 
     /tmp/ccRmqFBL.s:451    .text:00000000000001d0 .L0 
     /tmp/ccRmqFBL.s:452    .text:00000000000001d0 .L0 
     /tmp/ccRmqFBL.s:453    .text:00000000000001d0 .L0 
     /tmp/ccRmqFBL.s:454    .text:00000000000001d0 .L0 
     /tmp/ccRmqFBL.s:457    .text:00000000000001d8 .L0 
     /tmp/ccRmqFBL.s:461    .text:00000000000001dc .L0 
     /tmp/ccRmqFBL.s:469    .text:00000000000001dc .L0 
     /tmp/ccRmqFBL.s:22     .text:000000000000000c .L0 
     /tmp/ccRmqFBL.s:138    .rodata:0000000000000000 .L7
     /tmp/ccRmqFBL.s:130    .text:0000000000000088 .L0 
     /tmp/ccRmqFBL.s:168    .text:00000000000000a0 .L0 
     /tmp/ccRmqFBL.s:230    .text:00000000000000d4 .L0 
     /tmp/ccRmqFBL.s:283    .text:000000000000010c .L0 
     /tmp/ccRmqFBL.s:311    .text:000000000000012c .L0 
     /tmp/ccRmqFBL.s:332    .text:0000000000000140 .L0 
     /tmp/ccRmqFBL.s:402    .text:000000000000018c .L0 
     /tmp/ccRmqFBL.s:427    .text:00000000000001a8 .L0 
     /tmp/ccRmqFBL.s:94     .text:0000000000000060 .L3
     /tmp/ccRmqFBL.s:112    .text:0000000000000078 .L18
     /tmp/ccRmqFBL.s:202    .text:00000000000000c8 .L5
     /tmp/ccRmqFBL.s:411    .text:00000000000001a0 .L14
     /tmp/ccRmqFBL.s:399    .text:000000000000018c .L15
GAS LISTING /tmp/ccRmqFBL.s 			page 17


     /tmp/ccRmqFBL.s:435    .text:00000000000001c0 .L16
     /tmp/ccRmqFBL.s:160    .text:00000000000000a0 .L13
     /tmp/ccRmqFBL.s:220    .text:00000000000000d4 .L12
     /tmp/ccRmqFBL.s:265    .text:0000000000000100 .L11
     /tmp/ccRmqFBL.s:293    .text:0000000000000120 .L10
     /tmp/ccRmqFBL.s:321    .text:0000000000000140 .L9
     /tmp/ccRmqFBL.s:421    .text:00000000000001a8 .L8
     /tmp/ccRmqFBL.s:449    .text:00000000000001d0 .L6
     /tmp/ccRmqFBL.s:1382   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccRmqFBL.s:2459   .debug_str:00000000000005c0 .LASF102
     /tmp/ccRmqFBL.s:2379   .debug_str:00000000000003a6 .LASF103
     /tmp/ccRmqFBL.s:2323   .debug_str:00000000000001a9 .LASF104
     /tmp/ccRmqFBL.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccRmqFBL.s:464    .text:00000000000001dc .Letext0
     /tmp/ccRmqFBL.s:2267   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccRmqFBL.s:2395   .debug_str:0000000000000425 .LASF0
     /tmp/ccRmqFBL.s:2415   .debug_str:0000000000000472 .LASF1
     /tmp/ccRmqFBL.s:2381   .debug_str:00000000000003b4 .LASF2
     /tmp/ccRmqFBL.s:2351   .debug_str:00000000000002cd .LASF4
     /tmp/ccRmqFBL.s:2445   .debug_str:0000000000000533 .LASF3
     /tmp/ccRmqFBL.s:2281   .debug_str:000000000000004f .LASF5
     /tmp/ccRmqFBL.s:2419   .debug_str:00000000000004a5 .LASF6
     /tmp/ccRmqFBL.s:2393   .debug_str:0000000000000412 .LASF7
     /tmp/ccRmqFBL.s:2471   .debug_str:00000000000006e7 .LASF8
     /tmp/ccRmqFBL.s:2337   .debug_str:000000000000023c .LASF9
     /tmp/ccRmqFBL.s:2427   .debug_str:00000000000004d6 .LASF10
     /tmp/ccRmqFBL.s:2463   .debug_str:0000000000000695 .LASF11
     /tmp/ccRmqFBL.s:2283   .debug_str:0000000000000056 .LASF12
     /tmp/ccRmqFBL.s:2271   .debug_str:0000000000000017 .LASF13
     /tmp/ccRmqFBL.s:2291   .debug_str:00000000000000a3 .LASF14
     /tmp/ccRmqFBL.s:2439   .debug_str:000000000000050f .LASF15
     /tmp/ccRmqFBL.s:2303   .debug_str:0000000000000109 .LASF16
     /tmp/ccRmqFBL.s:2329   .debug_str:00000000000001eb .LASF17
     /tmp/ccRmqFBL.s:2411   .debug_str:0000000000000466 .LASF25
     /tmp/ccRmqFBL.s:2461   .debug_str:0000000000000684 .LASF18
     /tmp/ccRmqFBL.s:2311   .debug_str:0000000000000147 .LASF20
     /tmp/ccRmqFBL.s:2389   .debug_str:00000000000003ea .LASF19
     /tmp/ccRmqFBL.s:2367   .debug_str:0000000000000334 .LASF21
     /tmp/ccRmqFBL.s:2285   .debug_str:0000000000000066 .LASF24
     /tmp/ccRmqFBL.s:2489   .debug_str:000000000000078a .LASF22
     /tmp/ccRmqFBL.s:2455   .debug_str:00000000000005a0 .LASF23
     /tmp/ccRmqFBL.s:2377   .debug_str:0000000000000396 .LASF26
     /tmp/ccRmqFBL.s:2307   .debug_str:000000000000012f .LASF27
     /tmp/ccRmqFBL.s:2417   .debug_str:0000000000000485 .LASF28
     /tmp/ccRmqFBL.s:2447   .debug_str:0000000000000545 .LASF29
     /tmp/ccRmqFBL.s:2451   .debug_str:0000000000000558 .LASF31
     /tmp/ccRmqFBL.s:2431   .debug_str:00000000000004ea .LASF30
     /tmp/ccRmqFBL.s:2335   .debug_str:000000000000021b .LASF32
     /tmp/ccRmqFBL.s:2481   .debug_str:000000000000073b .LASF33
     /tmp/ccRmqFBL.s:2295   .debug_str:00000000000000bc .LASF35
     /tmp/ccRmqFBL.s:2473   .debug_str:00000000000006f7 .LASF34
     /tmp/ccRmqFBL.s:2349   .debug_str:000000000000029a .LASF36
     /tmp/ccRmqFBL.s:2293   .debug_str:00000000000000af .LASF105
     /tmp/ccRmqFBL.s:2319   .debug_str:0000000000000195 .LASF80
     /tmp/ccRmqFBL.s:2465   .debug_str:00000000000006a4 .LASF82
     /tmp/ccRmqFBL.s:2345   .debug_str:0000000000000279 .LASF106
     /tmp/ccRmqFBL.s:2425   .debug_str:00000000000004d0 .LASF37
GAS LISTING /tmp/ccRmqFBL.s 			page 18


     /tmp/ccRmqFBL.s:2423   .debug_str:00000000000004c8 .LASF38
     /tmp/ccRmqFBL.s:2353   .debug_str:00000000000002d4 .LASF39
     /tmp/ccRmqFBL.s:2449   .debug_str:000000000000054f .LASF40
     /tmp/ccRmqFBL.s:2469   .debug_str:00000000000006e0 .LASF41
     /tmp/ccRmqFBL.s:2273   .debug_str:0000000000000027 .LASF42
     /tmp/ccRmqFBL.s:2317   .debug_str:000000000000018c .LASF43
     /tmp/ccRmqFBL.s:2483   .debug_str:000000000000074e .LASF44
     /tmp/ccRmqFBL.s:2385   .debug_str:00000000000003c9 .LASF45
     /tmp/ccRmqFBL.s:2435   .debug_str:0000000000000501 .LASF107
     /tmp/ccRmqFBL.s:2313   .debug_str:0000000000000165 .LASF46
     /tmp/ccRmqFBL.s:2443   .debug_str:000000000000052b .LASF47
     /tmp/ccRmqFBL.s:2407   .debug_str:0000000000000450 .LASF48
     /tmp/ccRmqFBL.s:2363   .debug_str:0000000000000305 .LASF49
     /tmp/ccRmqFBL.s:2287   .debug_str:0000000000000072 .LASF50
     /tmp/ccRmqFBL.s:2453   .debug_str:0000000000000579 .LASF51
     /tmp/ccRmqFBL.s:2413   .debug_str:000000000000046c .LASF52
     /tmp/ccRmqFBL.s:2333   .debug_str:0000000000000208 .LASF53
     /tmp/ccRmqFBL.s:2371   .debug_str:0000000000000378 .LASF54
     /tmp/ccRmqFBL.s:2279   .debug_str:000000000000003d .LASF55
     /tmp/ccRmqFBL.s:2491   .debug_str:000000000000078f .LASF56
     /tmp/ccRmqFBL.s:2347   .debug_str:0000000000000285 .LASF57
     /tmp/ccRmqFBL.s:2361   .debug_str:00000000000002fc .LASF108
     /tmp/ccRmqFBL.s:2269   .debug_str:0000000000000000 .LASF109
     /tmp/ccRmqFBL.s:2387   .debug_str:00000000000003e1 .LASF58
     /tmp/ccRmqFBL.s:2365   .debug_str:0000000000000312 .LASF59
     /tmp/ccRmqFBL.s:2441   .debug_str:0000000000000525 .LASF60
     /tmp/ccRmqFBL.s:2341   .debug_str:000000000000025a .LASF61
     /tmp/ccRmqFBL.s:2397   .debug_str:0000000000000432 .LASF62
     /tmp/ccRmqFBL.s:2327   .debug_str:00000000000001d5 .LASF63
     /tmp/ccRmqFBL.s:2289   .debug_str:0000000000000096 .LASF64
     /tmp/ccRmqFBL.s:2477   .debug_str:0000000000000722 .LASF65
     /tmp/ccRmqFBL.s:2305   .debug_str:000000000000011f .LASF68
     /tmp/ccRmqFBL.s:2475   .debug_str:0000000000000712 .LASF70
     /tmp/ccRmqFBL.s:2331   .debug_str:00000000000001f8 .LASF66
     /tmp/ccRmqFBL.s:2309   .debug_str:0000000000000138 .LASF67
     /tmp/ccRmqFBL.s:2355   .debug_str:00000000000002dc .LASF69
     /tmp/ccRmqFBL.s:2339   .debug_str:000000000000024a .LASF71
     /tmp/ccRmqFBL.s:2399   .debug_str:000000000000043b .LASF72
     /tmp/ccRmqFBL.s:2479   .debug_str:0000000000000731 .LASF73
     /tmp/ccRmqFBL.s:2359   .debug_str:00000000000002f4 .LASF74
     /tmp/ccRmqFBL.s:2357   .debug_str:00000000000002ef .LASF75
     /tmp/ccRmqFBL.s:2401   .debug_str:0000000000000441 .LASF76
     /tmp/ccRmqFBL.s:2275   .debug_str:000000000000002f .LASF77
     /tmp/ccRmqFBL.s:2325   .debug_str:00000000000001c7 .LASF78
     /tmp/ccRmqFBL.s:2391   .debug_str:00000000000003f6 .LASF79
     /tmp/ccRmqFBL.s:2297   .debug_str:00000000000000e7 .LASF110
     /tmp/ccRmqFBL.s:2369   .debug_str:000000000000034d .LASF111
     /tmp/ccRmqFBL.s:2343   .debug_str:000000000000026d .LASF81
     /tmp/ccRmqFBL.s:2487   .debug_str:000000000000075d .LASF83
     /tmp/ccRmqFBL.s:2301   .debug_str:00000000000000ff .LASF84
     /tmp/ccRmqFBL.s:2437   .debug_str:0000000000000506 .LASF85
     /tmp/ccRmqFBL.s:2373   .debug_str:000000000000037d .LASF86
     /tmp/ccRmqFBL.s:2457   .debug_str:00000000000005a5 .LASF87
     /tmp/ccRmqFBL.s:2467   .debug_str:00000000000006d2 .LASF88
     /tmp/ccRmqFBL.s:2315   .debug_str:0000000000000180 .LASF89
     /tmp/ccRmqFBL.s:2421   .debug_str:00000000000004b8 .LASF90
     /tmp/ccRmqFBL.s:45     .text:0000000000000024 .LFB7
GAS LISTING /tmp/ccRmqFBL.s 			page 19


     /tmp/ccRmqFBL.s:462    .text:00000000000001dc .LFE7
     /tmp/ccRmqFBL.s:2485   .debug_str:0000000000000756 .LASF91
     /tmp/ccRmqFBL.s:2081   .debug_loc:0000000000000000 .LLST0
     /tmp/ccRmqFBL.s:2405   .debug_str:000000000000044b .LASF92
     /tmp/ccRmqFBL.s:2093   .debug_loc:0000000000000037 .LLST1
     /tmp/ccRmqFBL.s:2321   .debug_str:000000000000019f .LASF93
     /tmp/ccRmqFBL.s:2109   .debug_loc:0000000000000081 .LLST2
     /tmp/ccRmqFBL.s:2375   .debug_str:0000000000000390 .LASF94
     /tmp/ccRmqFBL.s:2121   .debug_loc:00000000000000a9 .LLST3
     /tmp/ccRmqFBL.s:2259   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccRmqFBL.s:2403   .debug_str:0000000000000446 .LASF95
     /tmp/ccRmqFBL.s:2140   .debug_loc:00000000000000f6 .LLST4
     /tmp/ccRmqFBL.s:164    .text:00000000000000a0 .LBB5
     /tmp/ccRmqFBL.s:203    .text:00000000000000c8 .LBE5
     /tmp/ccRmqFBL.s:2147   .debug_loc:0000000000000119 .LLST5
     /tmp/ccRmqFBL.s:2154   .debug_loc:000000000000013c .LLST6
     /tmp/ccRmqFBL.s:184    .text:00000000000000bc .LVL13
     /tmp/ccRmqFBL.s:226    .text:00000000000000d4 .LBB6
     /tmp/ccRmqFBL.s:266    .text:0000000000000100 .LBE6
     /tmp/ccRmqFBL.s:2429   .debug_str:00000000000004e5 .LASF96
     /tmp/ccRmqFBL.s:2161   .debug_loc:000000000000015f .LLST7
     /tmp/ccRmqFBL.s:2409   .debug_str:000000000000045f .LASF97
     /tmp/ccRmqFBL.s:2168   .debug_loc:0000000000000182 .LLST8
     /tmp/ccRmqFBL.s:246    .text:00000000000000f0 .LVL17
     /tmp/ccRmqFBL.s:269    .text:0000000000000100 .LBB7
     /tmp/ccRmqFBL.s:294    .text:0000000000000120 .LBE7
     /tmp/ccRmqFBL.s:2299   .debug_str:00000000000000f5 .LASF98
     /tmp/ccRmqFBL.s:2175   .debug_loc:00000000000001a5 .LLST9
     /tmp/ccRmqFBL.s:273    .text:0000000000000108 .LVL19
     /tmp/ccRmqFBL.s:297    .text:0000000000000120 .LBB8
     /tmp/ccRmqFBL.s:322    .text:0000000000000140 .LBE8
     /tmp/ccRmqFBL.s:2277   .debug_str:0000000000000035 .LASF99
     /tmp/ccRmqFBL.s:2182   .debug_loc:00000000000001c8 .LLST10
     /tmp/ccRmqFBL.s:301    .text:0000000000000128 .LVL21
     /tmp/ccRmqFBL.s:325    .text:0000000000000140 .LBB9
     /tmp/ccRmqFBL.s:422    .text:00000000000001a8 .LBE9
     /tmp/ccRmqFBL.s:2383   .debug_str:00000000000003c2 .LASF100
     /tmp/ccRmqFBL.s:2189   .debug_loc:00000000000001eb .LLST11
     /tmp/ccRmqFBL.s:2433   .debug_str:00000000000004f3 .LASF101
     /tmp/ccRmqFBL.s:2201   .debug_loc:0000000000000222 .LLST12
     /tmp/ccRmqFBL.s:2213   .debug_loc:0000000000000259 .LLST13
     /tmp/ccRmqFBL.s:2225   .debug_loc:0000000000000290 .LLST14
     /tmp/ccRmqFBL.s:2237   .debug_loc:00000000000002c7 .LLST15
     /tmp/ccRmqFBL.s:383    .text:0000000000000178 .LVL27
     /tmp/ccRmqFBL.s:391    .text:0000000000000188 .LVL28
     /tmp/ccRmqFBL.s:434    .text:00000000000001c0 .LVL30
     /tmp/ccRmqFBL.s:439    .text:00000000000001c8 .LVL31
     /tmp/ccRmqFBL.s:455    .text:00000000000001d8 .LVL32
     /tmp/ccRmqFBL.s:10     .text:0000000000000000 .LFB6
     /tmp/ccRmqFBL.s:39     .text:0000000000000024 .LFE6
     /tmp/ccRmqFBL.s:61     .text:000000000000003c .LVL1
     /tmp/ccRmqFBL.s:68     .text:0000000000000040 .LVL2
     /tmp/ccRmqFBL.s:91     .text:000000000000005c .LVL6
     /tmp/ccRmqFBL.s:74     .text:0000000000000044 .LVL3
     /tmp/ccRmqFBL.s:105    .text:000000000000006c .LVL8
     /tmp/ccRmqFBL.s:111    .text:0000000000000078 .LVL9
     /tmp/ccRmqFBL.s:82     .text:0000000000000050 .LVL4
GAS LISTING /tmp/ccRmqFBL.s 			page 20


     /tmp/ccRmqFBL.s:88     .text:0000000000000058 .LVL5
     /tmp/ccRmqFBL.s:93     .text:0000000000000060 .LVL7
     /tmp/ccRmqFBL.s:123    .text:000000000000007c .LVL10
     /tmp/ccRmqFBL.s:129    .text:0000000000000088 .LVL11
     /tmp/ccRmqFBL.s:179    .text:00000000000000b4 .LVL12
     /tmp/ccRmqFBL.s:200    .text:00000000000000c8 .LVL14
     /tmp/ccRmqFBL.s:241    .text:00000000000000e8 .LVL16
     /tmp/ccRmqFBL.s:264    .text:0000000000000100 .LVL18
     /tmp/ccRmqFBL.s:292    .text:0000000000000120 .LVL20
     /tmp/ccRmqFBL.s:320    .text:0000000000000140 .LVL22
     /tmp/ccRmqFBL.s:343    .text:0000000000000154 .LVL23
     /tmp/ccRmqFBL.s:420    .text:00000000000001a8 .LVL29
     /tmp/ccRmqFBL.s:354    .text:000000000000015c .LVL24
     /tmp/ccRmqFBL.s:365    .text:0000000000000164 .LVL25
     /tmp/ccRmqFBL.s:376    .text:000000000000016c .LVL26
     /tmp/ccRmqFBL.s:470    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccRmqFBL.s:115    .text:0000000000000078 .LBB3
     /tmp/ccRmqFBL.s:216    .text:00000000000000d0 .LBE3
     /tmp/ccRmqFBL.s:222    .text:00000000000000d4 .LBB11
     /tmp/ccRmqFBL.s:459    .text:00000000000001dc .LBE11

UNDEFINED SYMBOLS
trap_handler
framePointer
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN15MemoryAllocator18mem_get_free_spaceEv
_ZN15MemoryAllocator26mem_get_largest_free_blockEv
_ZN6Thread12createThreadEPFvPvES0_S0_m
_ZN6Thread5startEv
_ZN6Thread7runningE
_ZN6Thread4exitEv
_ZN6Thread8dispatchEv
