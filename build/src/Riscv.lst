GAS LISTING /tmp/ccgalkRa.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv16setupTrapHandlerEv
   9              	_ZN5Riscv16setupTrapHandlerEv:
  10              	.LFB13:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 10/7/25.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** 
   7:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   8:src/Riscv.cpp **** #include "../h/KThread.hpp"
   9:src/Riscv.cpp **** #include "../h/Semaphore.hpp"
  10:src/Riscv.cpp **** #include "../lib/hw.h"
  11:src/Riscv.cpp **** 
  12:src/Riscv.cpp **** constexpr uint64 MEM_ALLOC = 0x01;
  13:src/Riscv.cpp **** constexpr uint64 MEM_FREE = 0x02;
  14:src/Riscv.cpp **** constexpr uint64 MEM_GET_FREE_SPACE = 0x03;
  15:src/Riscv.cpp **** constexpr uint64 MEM_GET_LARGEST_FREE_BLOCK = 0x04;
  16:src/Riscv.cpp **** 
  17:src/Riscv.cpp **** constexpr uint64 THREAD_CREATE = 0x11;
  18:src/Riscv.cpp **** constexpr uint64 THREAD_EXIT = 0x12;
  19:src/Riscv.cpp **** constexpr uint64 THREAD_DISPATCH = 0x13;
  20:src/Riscv.cpp **** 
  21:src/Riscv.cpp **** constexpr uint64 SEM_OPEN = 0x21;
  22:src/Riscv.cpp **** constexpr uint64 SEM_CLOSE = 0x22;
  23:src/Riscv.cpp **** constexpr uint64 SEM_WAIT = 0x23;
  24:src/Riscv.cpp **** constexpr uint64 SEM_SIGNAL = 0x24;
  25:src/Riscv.cpp **** 
  26:src/Riscv.cpp **** void Riscv::setupTrapHandler() {
  12              		.loc 1 26 32
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  27:src/Riscv.cpp ****     unsigned long addr = (unsigned long)&trap_handler;
  20              		.loc 1 27 5
  21              		.loc 1 27 19 is_stmt 0
  22 000c 97070000 		la	a5,trap_handler
  22      83B70700 
  23              	.LVL0:
  28:src/Riscv.cpp ****     asm volatile("csrw stvec, %0" :: "r"(addr));
  24              		.loc 1 28 5 is_stmt 1
  25              		.loc 1 28 48 is_stmt 0
  26              	#APP
  27              	# 28 "src/Riscv.cpp" 1
  29              	}
  28              		csrw stvec, a5
GAS LISTING /tmp/ccgalkRa.s 			page 2


  29              	# 0 "" 2
  30              		.loc 1 29 1
  31              	#NO_APP
  32 0018 03348100 		ld	s0,8(sp)
  33              		.cfi_restore 8
  34              		.cfi_def_cfa 2, 16
  35 001c 13010101 		addi	sp,sp,16
  36              		.cfi_def_cfa_offset 0
  37 0020 67800000 		jr	ra
  38              		.cfi_endproc
  39              	.LFE13:
  41              		.align	2
  42              		.globl	_ZN5Riscv11trapHandlerEv
  44              	_ZN5Riscv11trapHandlerEv:
  45              	.LFB14:
  30:src/Riscv.cpp **** 
  31:src/Riscv.cpp **** void Riscv::trapHandler() {
  46              		.loc 1 31 27 is_stmt 1
  47              		.cfi_startproc
  48 0024 130101FE 		addi	sp,sp,-32
  49              		.cfi_def_cfa_offset 32
  50 0028 233C1100 		sd	ra,24(sp)
  51 002c 23388100 		sd	s0,16(sp)
  52 0030 23349100 		sd	s1,8(sp)
  53 0034 23302101 		sd	s2,0(sp)
  54              		.cfi_offset 1, -8
  55              		.cfi_offset 8, -16
  56              		.cfi_offset 9, -24
  57              		.cfi_offset 18, -32
  58 0038 13040102 		addi	s0,sp,32
  59              		.cfi_def_cfa 8, 0
  32:src/Riscv.cpp ****     uint64 scause = 0, sepc = 0;
  60              		.loc 1 32 5
  61              	.LVL1:
  33:src/Riscv.cpp ****     asm volatile("csrr %0, scause" : "=r"(scause));
  62              		.loc 1 33 5
  63              		.loc 1 33 51 is_stmt 0
  64              	#APP
  65              	# 33 "src/Riscv.cpp" 1
  34              	    asm volatile("csrr %0, sepc" : "=r"(sepc));
  66              		csrr a4, scause
  67              	# 0 "" 2
  68              	.LVL2:
  69              		.loc 1 34 5 is_stmt 1
  70              		.loc 1 34 47 is_stmt 0
  71              	# 34 "src/Riscv.cpp" 1
  35              	
  72              		csrr s1, sepc
  73              	# 0 "" 2
  74              	.LVL3:
  36:src/Riscv.cpp ****     uint64 interrupt = scause >> 63;
  75              		.loc 1 36 5 is_stmt 1
  37:src/Riscv.cpp ****     uint64 cause = scause & 0x7FFFFFFFFFFFFFFF;
  76              		.loc 1 37 5
  77              		.loc 1 37 12 is_stmt 0
  78              	#NO_APP
  79 0044 9307F0FF 		li	a5,-1
GAS LISTING /tmp/ccgalkRa.s 			page 3


  80 0048 93D71700 		srli	a5,a5,1
  81 004c B377F700 		and	a5,a4,a5
  82              	.LVL4:
  38:src/Riscv.cpp **** 
  39:src/Riscv.cpp ****     if (interrupt == 0 && (cause == 8 || cause == 9)) {
  83              		.loc 1 39 5 is_stmt 1
  84              	.LBB2:
  85 0050 63480700 		bltz	a4,.L3
  86              		.loc 1 39 39 is_stmt 0 discriminator 1
  87 0054 938787FF 		addi	a5,a5,-8
  88              	.LVL5:
  89              		.loc 1 39 24 discriminator 1
  90 0058 13071000 		li	a4,1
  91              	.LVL6:
  92 005c 637EF700 		bleu	a5,a4,.L27
  93              	.LVL7:
  94              	.L3:
  95              	.LBE2:
  40:src/Riscv.cpp ****         uint64 code;
  41:src/Riscv.cpp ****         asm volatile("mv %0, a0" : "=r"(code));
  42:src/Riscv.cpp **** 
  43:src/Riscv.cpp ****         switch (code) {
  44:src/Riscv.cpp ****             case MEM_ALLOC: {
  45:src/Riscv.cpp ****                 size_t size;
  46:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
  47:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(size));
  48:src/Riscv.cpp ****                 void* ptr = MemoryAllocator::mem_alloc(size);
  49:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(ptr));
  50:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
  51:src/Riscv.cpp ****                 break;
  52:src/Riscv.cpp ****             }
  53:src/Riscv.cpp ****             case MEM_FREE: {
  54:src/Riscv.cpp ****                 void* addr;
  55:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
  56:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(addr));
  57:src/Riscv.cpp ****                 int status = MemoryAllocator::mem_free(addr);
  58:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(status));
  59:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
  60:src/Riscv.cpp ****                 break;
  61:src/Riscv.cpp ****             }
  62:src/Riscv.cpp ****             case MEM_GET_FREE_SPACE: {
  63:src/Riscv.cpp ****                 size_t freeSpace = MemoryAllocator::mem_get_free_space();
  64:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(freeSpace));
  65:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
  66:src/Riscv.cpp ****                 break;
  67:src/Riscv.cpp ****             }
  68:src/Riscv.cpp ****             case MEM_GET_LARGEST_FREE_BLOCK: {
  69:src/Riscv.cpp ****                 size_t largest = MemoryAllocator::mem_get_largest_free_block();
  70:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(largest));
  71:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
  72:src/Riscv.cpp ****                 break;
  73:src/Riscv.cpp ****             }
  74:src/Riscv.cpp ****             case THREAD_CREATE: {
  75:src/Riscv.cpp ****                 KThread** handle = nullptr;
  76:src/Riscv.cpp ****                 void (*start_routine)(void*) = nullptr;
  77:src/Riscv.cpp ****                 void* args = nullptr;
  78:src/Riscv.cpp ****                 void* stack = nullptr;
GAS LISTING /tmp/ccgalkRa.s 			page 4


  79:src/Riscv.cpp **** 
  80:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
  81:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
  82:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
  83:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(start_routine));
  84:src/Riscv.cpp ****                 asm volatile("ld a3, 13*8(%0)" :: "r"(framePointer));
  85:src/Riscv.cpp ****                 asm volatile("mv %0, a3" : "=r"(args));
  86:src/Riscv.cpp ****                 asm volatile("ld a4, 14*8(%0)" :: "r"(framePointer));
  87:src/Riscv.cpp ****                 asm volatile("mv %0, a4" : "=r"(stack));
  88:src/Riscv.cpp **** 
  89:src/Riscv.cpp ****                 size_t stackSize = DEFAULT_STACK_SIZE;
  90:src/Riscv.cpp **** 
  91:src/Riscv.cpp ****                 *handle = KThread::createThread(start_routine, args, stack, stackSize);
  92:src/Riscv.cpp **** 
  93:src/Riscv.cpp ****                 if (*handle != nullptr) {
  94:src/Riscv.cpp ****                     (*handle)->start();
  95:src/Riscv.cpp ****                     asm volatile("li a0, 0");
  96:src/Riscv.cpp ****                 }
  97:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
  98:src/Riscv.cpp **** 
  99:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 100:src/Riscv.cpp **** 
 101:src/Riscv.cpp ****                 break;
 102:src/Riscv.cpp ****             }
 103:src/Riscv.cpp ****             case THREAD_EXIT: {
 104:src/Riscv.cpp ****                 if (KThread::running) {
 105:src/Riscv.cpp ****                     KThread::running->exit();
 106:src/Riscv.cpp ****                 }
 107:src/Riscv.cpp **** 
 108:src/Riscv.cpp ****                 KThread::dispatch();
 109:src/Riscv.cpp **** 
 110:src/Riscv.cpp ****                 asm volatile("li a0, 0");
 111:src/Riscv.cpp **** 
 112:src/Riscv.cpp ****                 break;
 113:src/Riscv.cpp ****             }
 114:src/Riscv.cpp ****             case THREAD_DISPATCH: {
 115:src/Riscv.cpp ****                 KThread::dispatch();
 116:src/Riscv.cpp **** 
 117:src/Riscv.cpp ****                 break;
 118:src/Riscv.cpp ****             }
 119:src/Riscv.cpp ****             case SEM_OPEN: {
 120:src/Riscv.cpp ****                 Semaphore** handle = nullptr;
 121:src/Riscv.cpp ****                 unsigned init;
 122:src/Riscv.cpp **** 
 123:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 124:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 125:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 126:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(init));
 127:src/Riscv.cpp **** 
 128:src/Riscv.cpp ****                 *handle = Semaphore::createSemaphore(init);
 129:src/Riscv.cpp **** 
 130:src/Riscv.cpp ****                 if (*handle != nullptr) asm volatile("li a0, 0");
 131:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 132:src/Riscv.cpp **** 
 133:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 134:src/Riscv.cpp **** 
 135:src/Riscv.cpp ****                 break;
GAS LISTING /tmp/ccgalkRa.s 			page 5


 136:src/Riscv.cpp ****             }
 137:src/Riscv.cpp ****             case SEM_CLOSE: {
 138:src/Riscv.cpp ****                 Semaphore* handle = nullptr;
 139:src/Riscv.cpp **** 
 140:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 141:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 142:src/Riscv.cpp **** 
 143:src/Riscv.cpp ****                 if (handle) {
 144:src/Riscv.cpp ****                     handle->close();
 145:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 146:src/Riscv.cpp ****                 }
 147:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 148:src/Riscv.cpp **** 
 149:src/Riscv.cpp ****                 break;
 150:src/Riscv.cpp ****             }
 151:src/Riscv.cpp ****             case SEM_WAIT: {
 152:src/Riscv.cpp ****                 Semaphore* handle = nullptr;
 153:src/Riscv.cpp **** 
 154:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 155:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 156:src/Riscv.cpp **** 
 157:src/Riscv.cpp ****                 if (handle) {
 158:src/Riscv.cpp ****                     handle->wait();
 159:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 160:src/Riscv.cpp ****                 }
 161:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 162:src/Riscv.cpp **** 
 163:src/Riscv.cpp ****                 break;
 164:src/Riscv.cpp ****             }
 165:src/Riscv.cpp ****             case SEM_SIGNAL: {
 166:src/Riscv.cpp ****                 Semaphore* handle = nullptr;
 167:src/Riscv.cpp **** 
 168:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 169:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 170:src/Riscv.cpp **** 
 171:src/Riscv.cpp ****                 if (handle) {
 172:src/Riscv.cpp ****                     handle->signal();
 173:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 174:src/Riscv.cpp ****                 }
 175:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 176:src/Riscv.cpp **** 
 177:src/Riscv.cpp ****                 break;
 178:src/Riscv.cpp ****             }
 179:src/Riscv.cpp ****             default:
 180:src/Riscv.cpp ****                 break;
 181:src/Riscv.cpp ****         }
 182:src/Riscv.cpp **** 
 183:src/Riscv.cpp ****         sepc += 4;
 184:src/Riscv.cpp ****         asm volatile("csrw sepc, %0" :: "r"(sepc));
 185:src/Riscv.cpp ****     }
 186:src/Riscv.cpp **** }...
  96              		.loc 1 186 1
  97 0060 83308101 		ld	ra,24(sp)
  98              		.cfi_remember_state
  99              		.cfi_restore 1
 100 0064 03340101 		ld	s0,16(sp)
 101              		.cfi_restore 8
GAS LISTING /tmp/ccgalkRa.s 			page 6


 102              		.cfi_def_cfa 2, 32
 103 0068 83348100 		ld	s1,8(sp)
 104              		.cfi_restore 9
 105              	.LVL8:
 106 006c 03390100 		ld	s2,0(sp)
 107              		.cfi_restore 18
 108 0070 13010102 		addi	sp,sp,32
 109              		.cfi_def_cfa_offset 0
 110 0074 67800000 		jr	ra
 111              	.LVL9:
 112              	.L27:
 113              		.cfi_restore_state
 114              	.LBB16:
 115              	.LBB3:
  40:src/Riscv.cpp ****         uint64 code;
 116              		.loc 1 40 9 is_stmt 1
  41:src/Riscv.cpp ****         asm volatile("mv %0, a0" : "=r"(code));
 117              		.loc 1 41 9
  41:src/Riscv.cpp ****         asm volatile("mv %0, a0" : "=r"(code));
 118              		.loc 1 41 47 is_stmt 0
 119              	#APP
 120              	# 41 "src/Riscv.cpp" 1
 121              		mv a5, a0
 122              	# 0 "" 2
 123              	.LVL10:
  43:src/Riscv.cpp ****         switch (code) {
 124              		.loc 1 43 9 is_stmt 1
 125              	#NO_APP
 126 007c 13074002 		li	a4,36
 127 0080 6364F704 		bgtu	a5,a4,.L5
 128 0084 93972700 		slli	a5,a5,2
 129              	.LVL11:
 130 0088 17070000 		lla	a4,.L7
 130      13070700 
 131 0090 B387E700 		add	a5,a5,a4
 132 0094 83A70700 		lw	a5,0(a5)
 133 0098 B387E700 		add	a5,a5,a4
 134 009c 67800700 		jr	a5
 135              		.section	.rodata
 136              		.align	2
 137              		.align	2
 138              	.L7:
 139 0000 00000000 		.word	.L5-.L7
 140 0004 00000000 		.word	.L17-.L7
 141 0008 00000000 		.word	.L16-.L7
 142 000c 00000000 		.word	.L15-.L7
 143 0010 00000000 		.word	.L14-.L7
 144 0014 00000000 		.word	.L5-.L7
 145 0018 00000000 		.word	.L5-.L7
 146 001c 00000000 		.word	.L5-.L7
 147 0020 00000000 		.word	.L5-.L7
 148 0024 00000000 		.word	.L5-.L7
 149 0028 00000000 		.word	.L5-.L7
 150 002c 00000000 		.word	.L5-.L7
 151 0030 00000000 		.word	.L5-.L7
 152 0034 00000000 		.word	.L5-.L7
 153 0038 00000000 		.word	.L5-.L7
GAS LISTING /tmp/ccgalkRa.s 			page 7


 154 003c 00000000 		.word	.L5-.L7
 155 0040 00000000 		.word	.L5-.L7
 156 0044 00000000 		.word	.L13-.L7
 157 0048 00000000 		.word	.L12-.L7
 158 004c 00000000 		.word	.L11-.L7
 159 0050 00000000 		.word	.L5-.L7
 160 0054 00000000 		.word	.L5-.L7
 161 0058 00000000 		.word	.L5-.L7
 162 005c 00000000 		.word	.L5-.L7
 163 0060 00000000 		.word	.L5-.L7
 164 0064 00000000 		.word	.L5-.L7
 165 0068 00000000 		.word	.L5-.L7
 166 006c 00000000 		.word	.L5-.L7
 167 0070 00000000 		.word	.L5-.L7
 168 0074 00000000 		.word	.L5-.L7
 169 0078 00000000 		.word	.L5-.L7
 170 007c 00000000 		.word	.L5-.L7
 171 0080 00000000 		.word	.L5-.L7
 172 0084 00000000 		.word	.L10-.L7
 173 0088 00000000 		.word	.L9-.L7
 174 008c 00000000 		.word	.L8-.L7
 175 0090 00000000 		.word	.L6-.L7
 176              		.text
 177              	.L17:
 178              	.LBB4:
  44:src/Riscv.cpp ****             case MEM_ALLOC: {
 179              		.loc 1 44 13
  44:src/Riscv.cpp ****             case MEM_ALLOC: {
 180              		.loc 1 44 29
 181              	.LBB5:
  45:src/Riscv.cpp ****                 size_t size;
 182              		.loc 1 45 17
  46:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 183              		.loc 1 46 17
  46:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 184              		.loc 1 46 69 is_stmt 0
 185 00a0 17090000 		la	s2,framePointer
 185      03390900 
 186 00a8 83370900 		ld	a5,0(s2)
 187              	#APP
 188              	# 46 "src/Riscv.cpp" 1
  47:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(size));
 189              		ld a1, 11*8(a5)
 190              	# 0 "" 2
 191              		.loc 1 47 17 is_stmt 1
  47:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(size));
 192              		.loc 1 47 55 is_stmt 0
 193              	# 47 "src/Riscv.cpp" 1
 194              		mv a0, a1
 195              	# 0 "" 2
 196              	.LVL12:
  48:src/Riscv.cpp ****                 void* ptr = MemoryAllocator::mem_alloc(size);
 197              		.loc 1 48 17 is_stmt 1
  48:src/Riscv.cpp ****                 void* ptr = MemoryAllocator::mem_alloc(size);
 198              		.loc 1 48 55 is_stmt 0
 199              	#NO_APP
 200 00b4 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
GAS LISTING /tmp/ccgalkRa.s 			page 8


 200      E7800000 
 201              	.LVL13:
  49:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(ptr));
 202              		.loc 1 49 17 is_stmt 1
  49:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(ptr));
 203              		.loc 1 49 54 is_stmt 0
 204              	#APP
 205              	# 49 "src/Riscv.cpp" 1
  50:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 206              		mv a0, a0
 207              	# 0 "" 2
 208              		.loc 1 50 17 is_stmt 1
  50:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 209              		.loc 1 50 69 is_stmt 0
 210              	#NO_APP
 211 00c0 83370900 		ld	a5,0(s2)
 212              	#APP
 213              	# 50 "src/Riscv.cpp" 1
  51:src/Riscv.cpp ****                 break;
 214              		sd a0, 10*8(a5)
 215              	# 0 "" 2
 216              		.loc 1 51 17 is_stmt 1
 217              	.LVL14:
 218              	#NO_APP
 219              	.L5:
 220              	.LBE5:
 221              	.LBE4:
 183:src/Riscv.cpp ****         sepc += 4;
 222              		.loc 1 183 9
 183:src/Riscv.cpp ****         sepc += 4;
 223              		.loc 1 183 14 is_stmt 0
 224 00c8 93844400 		addi	s1,s1,4
 225              	.LVL15:
 184:src/Riscv.cpp ****         asm volatile("csrw sepc, %0" :: "r"(sepc));
 226              		.loc 1 184 9 is_stmt 1
 184:src/Riscv.cpp ****         asm volatile("csrw sepc, %0" :: "r"(sepc));
 227              		.loc 1 184 51 is_stmt 0
 228              	#APP
 229              	# 184 "src/Riscv.cpp" 1
 230              		csrw sepc, s1
 231              	# 0 "" 2
 232              	#NO_APP
 233              	.LBE3:
 234              	.LBE16:
 235              		.loc 1 186 1
 236 00d0 6FF01FF9 		j	.L3
 237              	.L16:
 238              	.LBB17:
 239              	.LBB15:
 240              	.LBB14:
  53:src/Riscv.cpp ****             case MEM_FREE: {
 241              		.loc 1 53 13 is_stmt 1
  53:src/Riscv.cpp ****             case MEM_FREE: {
 242              		.loc 1 53 28
 243              	.LBB6:
  54:src/Riscv.cpp ****                 void* addr;
 244              		.loc 1 54 17
GAS LISTING /tmp/ccgalkRa.s 			page 9


  55:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 245              		.loc 1 55 17
  55:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 246              		.loc 1 55 69 is_stmt 0
 247 00d4 17090000 		la	s2,framePointer
 247      03390900 
 248 00dc 83370900 		ld	a5,0(s2)
 249              	#APP
 250              	# 55 "src/Riscv.cpp" 1
  56:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(addr));
 251              		ld a1, 11*8(a5)
 252              	# 0 "" 2
 253              		.loc 1 56 17 is_stmt 1
  56:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(addr));
 254              		.loc 1 56 55 is_stmt 0
 255              	# 56 "src/Riscv.cpp" 1
 256              		mv a0, a1
 257              	# 0 "" 2
 258              	.LVL16:
  57:src/Riscv.cpp ****                 int status = MemoryAllocator::mem_free(addr);
 259              		.loc 1 57 17 is_stmt 1
  57:src/Riscv.cpp ****                 int status = MemoryAllocator::mem_free(addr);
 260              		.loc 1 57 55 is_stmt 0
 261              	#NO_APP
 262 00e8 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 262      E7800000 
 263              	.LVL17:
  58:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(status));
 264              		.loc 1 58 17 is_stmt 1
  58:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(status));
 265              		.loc 1 58 57 is_stmt 0
 266              	#APP
 267              	# 58 "src/Riscv.cpp" 1
  59:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 268              		mv a0, a0
 269              	# 0 "" 2
 270              		.loc 1 59 17 is_stmt 1
  59:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 271              		.loc 1 59 69 is_stmt 0
 272              	#NO_APP
 273 00f4 83370900 		ld	a5,0(s2)
 274              	#APP
 275              	# 59 "src/Riscv.cpp" 1
  60:src/Riscv.cpp ****                 break;
 276              		sd a0, 10*8(a5)
 277              	# 0 "" 2
 278              		.loc 1 60 17 is_stmt 1
 279              	#NO_APP
 280 00fc 6FF0DFFC 		j	.L5
 281              	.LVL18:
 282              	.L15:
 283              	.LBE6:
  62:src/Riscv.cpp ****             case MEM_GET_FREE_SPACE: {
 284              		.loc 1 62 13
  62:src/Riscv.cpp ****             case MEM_GET_FREE_SPACE: {
 285              		.loc 1 62 38
 286              	.LBB7:
GAS LISTING /tmp/ccgalkRa.s 			page 10


  63:src/Riscv.cpp ****                 size_t freeSpace = MemoryAllocator::mem_get_free_space();
 287              		.loc 1 63 17
  63:src/Riscv.cpp ****                 size_t freeSpace = MemoryAllocator::mem_get_free_space();
 288              		.loc 1 63 71 is_stmt 0
 289 0100 97000000 		call	_ZN15MemoryAllocator18mem_get_free_spaceEv@plt
 289      E7800000 
 290              	.LVL19:
  64:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(freeSpace));
 291              		.loc 1 64 17 is_stmt 1
  64:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(freeSpace));
 292              		.loc 1 64 60 is_stmt 0
 293              	#APP
 294              	# 64 "src/Riscv.cpp" 1
  65:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 295              		mv a0, a0
 296              	# 0 "" 2
 297              		.loc 1 65 17 is_stmt 1
  65:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 298              		.loc 1 65 69 is_stmt 0
 299              	#NO_APP
 300 010c 97070000 		la	a5,framePointer
 300      83B70700 
 301 0114 83B70700 		ld	a5,0(a5)
 302              	#APP
 303              	# 65 "src/Riscv.cpp" 1
  66:src/Riscv.cpp ****                 break;
 304              		sd a0, 10*8(a5)
 305              	# 0 "" 2
 306              		.loc 1 66 17 is_stmt 1
 307              	#NO_APP
 308 011c 6FF0DFFA 		j	.L5
 309              	.LVL20:
 310              	.L14:
 311              	.LBE7:
  68:src/Riscv.cpp ****             case MEM_GET_LARGEST_FREE_BLOCK: {
 312              		.loc 1 68 13
  68:src/Riscv.cpp ****             case MEM_GET_LARGEST_FREE_BLOCK: {
 313              		.loc 1 68 46
 314              	.LBB8:
  69:src/Riscv.cpp ****                 size_t largest = MemoryAllocator::mem_get_largest_free_block();
 315              		.loc 1 69 17
  69:src/Riscv.cpp ****                 size_t largest = MemoryAllocator::mem_get_largest_free_block();
 316              		.loc 1 69 77 is_stmt 0
 317 0120 97000000 		call	_ZN15MemoryAllocator26mem_get_largest_free_blockEv@plt
 317      E7800000 
 318              	.LVL21:
  70:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(largest));
 319              		.loc 1 70 17 is_stmt 1
  70:src/Riscv.cpp ****                 asm volatile("mv a0, %0" :: "r"(largest));
 320              		.loc 1 70 58 is_stmt 0
 321              	#APP
 322              	# 70 "src/Riscv.cpp" 1
  71:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 323              		mv a0, a0
 324              	# 0 "" 2
 325              		.loc 1 71 17 is_stmt 1
  71:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
GAS LISTING /tmp/ccgalkRa.s 			page 11


 326              		.loc 1 71 69 is_stmt 0
 327              	#NO_APP
 328 012c 97070000 		la	a5,framePointer
 328      83B70700 
 329 0134 83B70700 		ld	a5,0(a5)
 330              	#APP
 331              	# 71 "src/Riscv.cpp" 1
  72:src/Riscv.cpp ****                 break;
 332              		sd a0, 10*8(a5)
 333              	# 0 "" 2
 334              		.loc 1 72 17 is_stmt 1
 335              	#NO_APP
 336 013c 6FF0DFF8 		j	.L5
 337              	.LVL22:
 338              	.L13:
 339              	.LBE8:
  74:src/Riscv.cpp ****             case THREAD_CREATE: {
 340              		.loc 1 74 13
  74:src/Riscv.cpp ****             case THREAD_CREATE: {
 341              		.loc 1 74 33
 342              	.LBB9:
  75:src/Riscv.cpp ****                 KThread** handle = nullptr;
 343              		.loc 1 75 17
  76:src/Riscv.cpp ****                 void (*start_routine)(void*) = nullptr;
 344              		.loc 1 76 17
  77:src/Riscv.cpp ****                 void* args = nullptr;
 345              		.loc 1 77 17
  78:src/Riscv.cpp ****                 void* stack = nullptr;
 346              		.loc 1 78 17
  80:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 347              		.loc 1 80 17
  80:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 348              		.loc 1 80 69 is_stmt 0
 349 0140 97070000 		la	a5,framePointer
 349      83B70700 
 350 0148 83B70700 		ld	a5,0(a5)
 351              	#APP
 352              	# 80 "src/Riscv.cpp" 1
  81:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 353              		ld a1, 11*8(a5)
 354              	# 0 "" 2
 355              		.loc 1 81 17 is_stmt 1
  81:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 356              		.loc 1 81 57 is_stmt 0
 357              	# 81 "src/Riscv.cpp" 1
 358              		mv s2, a1
 359              	# 0 "" 2
 360              	.LVL23:
  82:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 361              		.loc 1 82 17 is_stmt 1
  82:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 362              		.loc 1 82 69 is_stmt 0
 363              	# 82 "src/Riscv.cpp" 1
  83:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(start_routine));
 364              		ld a2, 12*8(a5)
 365              	# 0 "" 2
 366              		.loc 1 83 17 is_stmt 1
GAS LISTING /tmp/ccgalkRa.s 			page 12


  83:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(start_routine));
 367              		.loc 1 83 64 is_stmt 0
 368              	# 83 "src/Riscv.cpp" 1
 369              		mv a0, a2
 370              	# 0 "" 2
 371              	.LVL24:
  84:src/Riscv.cpp ****                 asm volatile("ld a3, 13*8(%0)" :: "r"(framePointer));
 372              		.loc 1 84 17 is_stmt 1
  84:src/Riscv.cpp ****                 asm volatile("ld a3, 13*8(%0)" :: "r"(framePointer));
 373              		.loc 1 84 69 is_stmt 0
 374              	# 84 "src/Riscv.cpp" 1
  85:src/Riscv.cpp ****                 asm volatile("mv %0, a3" : "=r"(args));
 375              		ld a3, 13*8(a5)
 376              	# 0 "" 2
 377              		.loc 1 85 17 is_stmt 1
  85:src/Riscv.cpp ****                 asm volatile("mv %0, a3" : "=r"(args));
 378              		.loc 1 85 55 is_stmt 0
 379              	# 85 "src/Riscv.cpp" 1
 380              		mv a1, a3
 381              	# 0 "" 2
 382              	.LVL25:
  86:src/Riscv.cpp ****                 asm volatile("ld a4, 14*8(%0)" :: "r"(framePointer));
 383              		.loc 1 86 17 is_stmt 1
  86:src/Riscv.cpp ****                 asm volatile("ld a4, 14*8(%0)" :: "r"(framePointer));
 384              		.loc 1 86 69 is_stmt 0
 385              	# 86 "src/Riscv.cpp" 1
  87:src/Riscv.cpp ****                 asm volatile("mv %0, a4" : "=r"(stack));
 386              		ld a4, 14*8(a5)
 387              	# 0 "" 2
 388              		.loc 1 87 17 is_stmt 1
  87:src/Riscv.cpp ****                 asm volatile("mv %0, a4" : "=r"(stack));
 389              		.loc 1 87 56 is_stmt 0
 390              	# 87 "src/Riscv.cpp" 1
 391              		mv a2, a4
 392              	# 0 "" 2
 393              	.LVL26:
  89:src/Riscv.cpp ****                 size_t stackSize = DEFAULT_STACK_SIZE;
 394              		.loc 1 89 17 is_stmt 1
  91:src/Riscv.cpp ****                 *handle = KThread::createThread(start_routine, args, stack, stackSize);
 395              		.loc 1 91 17
  91:src/Riscv.cpp ****                 *handle = KThread::createThread(start_routine, args, stack, stackSize);
 396              		.loc 1 91 48 is_stmt 0
 397              	#NO_APP
 398 016c B7160000 		li	a3,4096
 399 0170 97000000 		call	_ZN7KThread12createThreadEPFvPvES0_S0_m@plt
 399      E7800000 
 400              	.LVL27:
  91:src/Riscv.cpp ****                 *handle = KThread::createThread(start_routine, args, stack, stackSize);
 401              		.loc 1 91 25
 402 0178 2330A900 		sd	a0,0(s2)
  93:src/Riscv.cpp ****                 if (*handle != nullptr) {
 403              		.loc 1 93 17 is_stmt 1
 404 017c 63020502 		beqz	a0,.L18
  94:src/Riscv.cpp ****                     (*handle)->start();
 405              		.loc 1 94 21
  94:src/Riscv.cpp ****                     (*handle)->start();
 406              		.loc 1 94 37 is_stmt 0
GAS LISTING /tmp/ccgalkRa.s 			page 13


 407 0180 97000000 		call	_ZN7KThread5startEv@plt
 407      E7800000 
 408              	.LVL28:
  95:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 409              		.loc 1 95 21 is_stmt 1
  95:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 410              		.loc 1 95 45 is_stmt 0
 411              	#APP
 412              	# 95 "src/Riscv.cpp" 1
 413              		li a0, 0
 414              	# 0 "" 2
 415              	#NO_APP
 416              	.L19:
  99:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 417              		.loc 1 99 17 is_stmt 1
  99:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 418              		.loc 1 99 69 is_stmt 0
 419 018c 97070000 		la	a5,framePointer
 419      83B70700 
 420 0194 83B70700 		ld	a5,0(a5)
 421              	#APP
 422              	# 99 "src/Riscv.cpp" 1
 101:src/Riscv.cpp ****                 break;
 423              		sd a0, 10*8(a5)
 424              	# 0 "" 2
 425              		.loc 1 101 17 is_stmt 1
 426              	#NO_APP
 427 019c 6FF0DFF2 		j	.L5
 428              	.L18:
  97:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 429              		.loc 1 97 22
  97:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 430              		.loc 1 97 47 is_stmt 0
 431              	#APP
 432              	# 97 "src/Riscv.cpp" 1
 433              		li a0, -1
 434              	# 0 "" 2
 435              	#NO_APP
 436 01a4 6FF09FFE 		j	.L19
 437              	.LVL29:
 438              	.L12:
 439              	.LBE9:
 103:src/Riscv.cpp ****             case THREAD_EXIT: {
 440              		.loc 1 103 13 is_stmt 1
 103:src/Riscv.cpp ****             case THREAD_EXIT: {
 441              		.loc 1 103 31
 104:src/Riscv.cpp ****                 if (KThread::running) {
 442              		.loc 1 104 17
 104:src/Riscv.cpp ****                 if (KThread::running) {
 443              		.loc 1 104 37 is_stmt 0
 444 01a8 97070000 		la	a5,_ZN7KThread7runningE
 444      83B70700 
 445 01b0 03B50700 		ld	a0,0(a5)
 104:src/Riscv.cpp ****                 if (KThread::running) {
 446              		.loc 1 104 17
 447 01b4 63060500 		beqz	a0,.L20
 105:src/Riscv.cpp ****                     KThread::running->exit();
GAS LISTING /tmp/ccgalkRa.s 			page 14


 448              		.loc 1 105 21 is_stmt 1
 105:src/Riscv.cpp ****                     KThread::running->exit();
 449              		.loc 1 105 43 is_stmt 0
 450 01b8 97000000 		call	_ZN7KThread4exitEv@plt
 450      E7800000 
 451              	.LVL30:
 452              	.L20:
 108:src/Riscv.cpp ****                 KThread::dispatch();
 453              		.loc 1 108 17 is_stmt 1
 108:src/Riscv.cpp ****                 KThread::dispatch();
 454              		.loc 1 108 34 is_stmt 0
 455 01c0 97000000 		call	_ZN7KThread8dispatchEv@plt
 455      E7800000 
 456              	.LVL31:
 110:src/Riscv.cpp ****                 asm volatile("li a0, 0");
 457              		.loc 1 110 17 is_stmt 1
 110:src/Riscv.cpp ****                 asm volatile("li a0, 0");
 458              		.loc 1 110 41 is_stmt 0
 459              	#APP
 460              	# 110 "src/Riscv.cpp" 1
 112:src/Riscv.cpp ****                 break;
 461              		li a0, 0
 462              	# 0 "" 2
 463              		.loc 1 112 17 is_stmt 1
 464              	#NO_APP
 465 01cc 6FF0DFEF 		j	.L5
 466              	.L11:
 114:src/Riscv.cpp ****             case THREAD_DISPATCH: {
 467              		.loc 1 114 13
 114:src/Riscv.cpp ****             case THREAD_DISPATCH: {
 468              		.loc 1 114 35
 115:src/Riscv.cpp ****                 KThread::dispatch();
 469              		.loc 1 115 17
 115:src/Riscv.cpp ****                 KThread::dispatch();
 470              		.loc 1 115 34 is_stmt 0
 471 01d0 97000000 		call	_ZN7KThread8dispatchEv@plt
 471      E7800000 
 472              	.LVL32:
 117:src/Riscv.cpp ****                 break;
 473              		.loc 1 117 17 is_stmt 1
 474 01d8 6FF01FEF 		j	.L5
 475              	.L10:
 119:src/Riscv.cpp ****             case SEM_OPEN: {
 476              		.loc 1 119 13
 119:src/Riscv.cpp ****             case SEM_OPEN: {
 477              		.loc 1 119 28
 478              	.LBB10:
 120:src/Riscv.cpp ****                 Semaphore** handle = nullptr;
 479              		.loc 1 120 17
 480              	.LVL33:
 121:src/Riscv.cpp ****                 unsigned init;
 481              		.loc 1 121 17
 123:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 482              		.loc 1 123 17
 123:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 483              		.loc 1 123 69 is_stmt 0
 484 01dc 97070000 		la	a5,framePointer
GAS LISTING /tmp/ccgalkRa.s 			page 15


 484      83B70700 
 485 01e4 83B70700 		ld	a5,0(a5)
 486              	#APP
 487              	# 123 "src/Riscv.cpp" 1
 124:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 488              		ld a1, 11*8(a5)
 489              	# 0 "" 2
 490              		.loc 1 124 17 is_stmt 1
 124:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 491              		.loc 1 124 57 is_stmt 0
 492              	# 124 "src/Riscv.cpp" 1
 493              		mv s2, a1
 494              	# 0 "" 2
 495              	.LVL34:
 125:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 496              		.loc 1 125 17 is_stmt 1
 125:src/Riscv.cpp ****                 asm volatile("ld a2, 12*8(%0)" :: "r"(framePointer));
 497              		.loc 1 125 69 is_stmt 0
 498              	# 125 "src/Riscv.cpp" 1
 126:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(init));
 499              		ld a2, 12*8(a5)
 500              	# 0 "" 2
 501              		.loc 1 126 17 is_stmt 1
 126:src/Riscv.cpp ****                 asm volatile("mv %0, a2" : "=r"(init));
 502              		.loc 1 126 55 is_stmt 0
 503              	# 126 "src/Riscv.cpp" 1
 504              		mv a0, a2
 505              	# 0 "" 2
 506              	.LVL35:
 128:src/Riscv.cpp ****                 *handle = Semaphore::createSemaphore(init);
 507              		.loc 1 128 17 is_stmt 1
 128:src/Riscv.cpp ****                 *handle = Semaphore::createSemaphore(init);
 508              		.loc 1 128 53 is_stmt 0
 509              	#NO_APP
 510 01f8 13150502 		slli	a0,a0,32
 511              	.LVL36:
 512 01fc 13550502 		srli	a0,a0,32
 513 0200 97000000 		call	_ZN9Semaphore15createSemaphoreEm@plt
 513      E7800000 
 514              	.LVL37:
 128:src/Riscv.cpp ****                 *handle = Semaphore::createSemaphore(init);
 515              		.loc 1 128 25
 516 0208 2330A900 		sd	a0,0(s2)
 130:src/Riscv.cpp ****                 if (*handle != nullptr) asm volatile("li a0, 0");
 517              		.loc 1 130 17 is_stmt 1
 518 020c 630E0500 		beqz	a0,.L21
 130:src/Riscv.cpp ****                 if (*handle != nullptr) asm volatile("li a0, 0");
 519              		.loc 1 130 41 discriminator 1
 130:src/Riscv.cpp ****                 if (*handle != nullptr) asm volatile("li a0, 0");
 520              		.loc 1 130 65 is_stmt 0 discriminator 1
 521              	#APP
 522              	# 130 "src/Riscv.cpp" 1
 523              		li a0, 0
 524              	# 0 "" 2
 525              	#NO_APP
 526              	.L22:
 133:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
GAS LISTING /tmp/ccgalkRa.s 			page 16


 527              		.loc 1 133 17 is_stmt 1
 133:src/Riscv.cpp ****                 asm volatile("sd a0, 10*8(%0)" :: "r"(framePointer));
 528              		.loc 1 133 69 is_stmt 0
 529 0214 97070000 		la	a5,framePointer
 529      83B70700 
 530 021c 83B70700 		ld	a5,0(a5)
 531              	#APP
 532              	# 133 "src/Riscv.cpp" 1
 135:src/Riscv.cpp ****                 break;
 533              		sd a0, 10*8(a5)
 534              	# 0 "" 2
 535              		.loc 1 135 17 is_stmt 1
 536              	#NO_APP
 537 0224 6FF05FEA 		j	.L5
 538              	.L21:
 131:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 539              		.loc 1 131 22
 131:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 540              		.loc 1 131 47 is_stmt 0
 541              	#APP
 542              	# 131 "src/Riscv.cpp" 1
 543              		li a0, -1
 544              	# 0 "" 2
 545              	#NO_APP
 546 022c 6FF09FFE 		j	.L22
 547              	.LVL38:
 548              	.L9:
 549              	.LBE10:
 137:src/Riscv.cpp ****             case SEM_CLOSE: {
 550              		.loc 1 137 13 is_stmt 1
 137:src/Riscv.cpp ****             case SEM_CLOSE: {
 551              		.loc 1 137 29
 552              	.LBB11:
 138:src/Riscv.cpp ****                 Semaphore* handle = nullptr;
 553              		.loc 1 138 17
 140:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 554              		.loc 1 140 17
 140:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 555              		.loc 1 140 69 is_stmt 0
 556 0230 97070000 		la	a5,framePointer
 556      83B70700 
 557 0238 83B70700 		ld	a5,0(a5)
 558              	#APP
 559              	# 140 "src/Riscv.cpp" 1
 141:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 560              		ld a1, 11*8(a5)
 561              	# 0 "" 2
 562              		.loc 1 141 17 is_stmt 1
 141:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 563              		.loc 1 141 57 is_stmt 0
 564              	# 141 "src/Riscv.cpp" 1
 565              		mv a0, a1
 566              	# 0 "" 2
 567              	.LVL39:
 143:src/Riscv.cpp ****                 if (handle) {
 568              		.loc 1 143 17 is_stmt 1
 569              	#NO_APP
GAS LISTING /tmp/ccgalkRa.s 			page 17


 570 0244 630A0500 		beqz	a0,.L23
 144:src/Riscv.cpp ****                     handle->close();
 571              		.loc 1 144 21
 144:src/Riscv.cpp ****                     handle->close();
 572              		.loc 1 144 34 is_stmt 0
 573 0248 97000000 		call	_ZN9Semaphore5closeEv@plt
 573      E7800000 
 574              	.LVL40:
 145:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 575              		.loc 1 145 21 is_stmt 1
 145:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 576              		.loc 1 145 45 is_stmt 0
 577              	#APP
 578              	# 145 "src/Riscv.cpp" 1
 579              		li a0, 0
 580              	# 0 "" 2
 581              	#NO_APP
 582 0254 6FF05FE7 		j	.L5
 583              	.LVL41:
 584              	.L23:
 147:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 585              		.loc 1 147 22 is_stmt 1
 147:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 586              		.loc 1 147 47 is_stmt 0
 587              	#APP
 588              	# 147 "src/Riscv.cpp" 1
 589              		li a0, -1
 590              	# 0 "" 2
 591              	#NO_APP
 592 025c 6FF0DFE6 		j	.L5
 593              	.LVL42:
 594              	.L8:
 595              	.LBE11:
 151:src/Riscv.cpp ****             case SEM_WAIT: {
 596              		.loc 1 151 13 is_stmt 1
 151:src/Riscv.cpp ****             case SEM_WAIT: {
 597              		.loc 1 151 28
 598              	.LBB12:
 152:src/Riscv.cpp ****                 Semaphore* handle = nullptr;
 599              		.loc 1 152 17
 154:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 600              		.loc 1 154 17
 154:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 601              		.loc 1 154 69 is_stmt 0
 602 0260 97070000 		la	a5,framePointer
 602      83B70700 
 603 0268 83B70700 		ld	a5,0(a5)
 604              	#APP
 605              	# 154 "src/Riscv.cpp" 1
 155:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 606              		ld a1, 11*8(a5)
 607              	# 0 "" 2
 608              		.loc 1 155 17 is_stmt 1
 155:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 609              		.loc 1 155 57 is_stmt 0
 610              	# 155 "src/Riscv.cpp" 1
 611              		mv a0, a1
GAS LISTING /tmp/ccgalkRa.s 			page 18


 612              	# 0 "" 2
 613              	.LVL43:
 157:src/Riscv.cpp ****                 if (handle) {
 614              		.loc 1 157 17 is_stmt 1
 615              	#NO_APP
 616 0274 630A0500 		beqz	a0,.L24
 158:src/Riscv.cpp ****                     handle->wait();
 617              		.loc 1 158 21
 158:src/Riscv.cpp ****                     handle->wait();
 618              		.loc 1 158 33 is_stmt 0
 619 0278 97000000 		call	_ZN9Semaphore4waitEv@plt
 619      E7800000 
 620              	.LVL44:
 159:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 621              		.loc 1 159 21 is_stmt 1
 159:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 622              		.loc 1 159 45 is_stmt 0
 623              	#APP
 624              	# 159 "src/Riscv.cpp" 1
 625              		li a0, 0
 626              	# 0 "" 2
 627              	#NO_APP
 628 0284 6FF05FE4 		j	.L5
 629              	.LVL45:
 630              	.L24:
 161:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 631              		.loc 1 161 22 is_stmt 1
 161:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 632              		.loc 1 161 47 is_stmt 0
 633              	#APP
 634              	# 161 "src/Riscv.cpp" 1
 635              		li a0, -1
 636              	# 0 "" 2
 637              	#NO_APP
 638 028c 6FF0DFE3 		j	.L5
 639              	.LVL46:
 640              	.L6:
 641              	.LBE12:
 165:src/Riscv.cpp ****             case SEM_SIGNAL: {
 642              		.loc 1 165 13 is_stmt 1
 165:src/Riscv.cpp ****             case SEM_SIGNAL: {
 643              		.loc 1 165 30
 644              	.LBB13:
 166:src/Riscv.cpp ****                 Semaphore* handle = nullptr;
 645              		.loc 1 166 17
 168:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 646              		.loc 1 168 17
 168:src/Riscv.cpp ****                 asm volatile("ld a1, 11*8(%0)" :: "r"(framePointer));
 647              		.loc 1 168 69 is_stmt 0
 648 0290 97070000 		la	a5,framePointer
 648      83B70700 
 649 0298 83B70700 		ld	a5,0(a5)
 650              	#APP
 651              	# 168 "src/Riscv.cpp" 1
 169:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 652              		ld a1, 11*8(a5)
 653              	# 0 "" 2
GAS LISTING /tmp/ccgalkRa.s 			page 19


 654              		.loc 1 169 17 is_stmt 1
 169:src/Riscv.cpp ****                 asm volatile("mv %0, a1" : "=r"(handle));
 655              		.loc 1 169 57 is_stmt 0
 656              	# 169 "src/Riscv.cpp" 1
 657              		mv a0, a1
 658              	# 0 "" 2
 659              	.LVL47:
 171:src/Riscv.cpp ****                 if (handle) {
 660              		.loc 1 171 17 is_stmt 1
 661              	#NO_APP
 662 02a4 630A0500 		beqz	a0,.L25
 172:src/Riscv.cpp ****                     handle->signal();
 663              		.loc 1 172 21
 172:src/Riscv.cpp ****                     handle->signal();
 664              		.loc 1 172 35 is_stmt 0
 665 02a8 97000000 		call	_ZN9Semaphore6signalEv@plt
 665      E7800000 
 666              	.LVL48:
 173:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 667              		.loc 1 173 21 is_stmt 1
 173:src/Riscv.cpp ****                     asm volatile("li a0, 0");
 668              		.loc 1 173 45 is_stmt 0
 669              	#APP
 670              	# 173 "src/Riscv.cpp" 1
 671              		li a0, 0
 672              	# 0 "" 2
 673              	#NO_APP
 674 02b4 6FF05FE1 		j	.L5
 675              	.LVL49:
 676              	.L25:
 175:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 677              		.loc 1 175 22 is_stmt 1
 175:src/Riscv.cpp ****                 else asm volatile("li a0, -1");
 678              		.loc 1 175 47 is_stmt 0
 679              	#APP
 680              	# 175 "src/Riscv.cpp" 1
 681              		li a0, -1
 682              	# 0 "" 2
 683              	#NO_APP
 684 02bc 6FF0DFE0 		j	.L5
 685              	.LBE13:
 686              	.LBE14:
 687              	.LBE15:
 688              	.LBE17:
 689              		.cfi_endproc
 690              	.LFE14:
 692              	.Letext0:
 693              		.file 2 "src/../h/../lib/hw.h"
 694              		.file 3 "src/../h/Riscv.hpp"
 695              		.file 4 "src/../h/MemoryAllocator.hpp"
 696              		.file 5 "src/../h/KThread.hpp"
 697              		.file 6 "src/../h/Semaphore.hpp"
GAS LISTING /tmp/ccgalkRa.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccgalkRa.s:9      .text:0000000000000000 _ZN5Riscv16setupTrapHandlerEv
     /tmp/ccgalkRa.s:13     .text:0000000000000000 .L0 
     /tmp/ccgalkRa.s:14     .text:0000000000000000 .L0 
     /tmp/ccgalkRa.s:15     .text:0000000000000004 .L0 
     /tmp/ccgalkRa.s:17     .text:0000000000000008 .L0 
     /tmp/ccgalkRa.s:19     .text:000000000000000c .L0 
     /tmp/ccgalkRa.s:21     .text:000000000000000c .L0 
     /tmp/ccgalkRa.s:22     .text:000000000000000c .L0 
     /tmp/ccgalkRa.s:25     .text:0000000000000014 .L0 
       src/Riscv.cpp:28     .text:0000000000000014 .L0 
     /tmp/ccgalkRa.s:32     .text:0000000000000018 .L0 
     /tmp/ccgalkRa.s:33     .text:000000000000001c .L0 
     /tmp/ccgalkRa.s:34     .text:000000000000001c .L0 
     /tmp/ccgalkRa.s:36     .text:0000000000000020 .L0 
     /tmp/ccgalkRa.s:38     .text:0000000000000024 .L0 
     /tmp/ccgalkRa.s:44     .text:0000000000000024 _ZN5Riscv11trapHandlerEv
     /tmp/ccgalkRa.s:47     .text:0000000000000024 .L0 
     /tmp/ccgalkRa.s:48     .text:0000000000000024 .L0 
     /tmp/ccgalkRa.s:49     .text:0000000000000028 .L0 
     /tmp/ccgalkRa.s:54     .text:0000000000000038 .L0 
     /tmp/ccgalkRa.s:55     .text:0000000000000038 .L0 
     /tmp/ccgalkRa.s:56     .text:0000000000000038 .L0 
     /tmp/ccgalkRa.s:57     .text:0000000000000038 .L0 
     /tmp/ccgalkRa.s:59     .text:000000000000003c .L0 
     /tmp/ccgalkRa.s:62     .text:000000000000003c .L0 
     /tmp/ccgalkRa.s:63     .text:000000000000003c .L0 
       src/Riscv.cpp:33     .text:000000000000003c .L0 
     /tmp/ccgalkRa.s:70     .text:0000000000000040 .L0 
       src/Riscv.cpp:34     .text:0000000000000040 .L0 
     /tmp/ccgalkRa.s:76     .text:0000000000000044 .L0 
     /tmp/ccgalkRa.s:77     .text:0000000000000044 .L0 
     /tmp/ccgalkRa.s:79     .text:0000000000000044 .L0 
     /tmp/ccgalkRa.s:85     .text:0000000000000050 .L0 
     /tmp/ccgalkRa.s:87     .text:0000000000000054 .L0 
     /tmp/ccgalkRa.s:90     .text:0000000000000058 .L0 
     /tmp/ccgalkRa.s:97     .text:0000000000000060 .L0 
     /tmp/ccgalkRa.s:98     .text:0000000000000064 .L0 
     /tmp/ccgalkRa.s:99     .text:0000000000000064 .L0 
     /tmp/ccgalkRa.s:101    .text:0000000000000068 .L0 
     /tmp/ccgalkRa.s:102    .text:0000000000000068 .L0 
     /tmp/ccgalkRa.s:104    .text:000000000000006c .L0 
     /tmp/ccgalkRa.s:107    .text:0000000000000070 .L0 
     /tmp/ccgalkRa.s:109    .text:0000000000000074 .L0 
     /tmp/ccgalkRa.s:113    .text:0000000000000078 .L0 
     /tmp/ccgalkRa.s:117    .text:0000000000000078 .L0 
     /tmp/ccgalkRa.s:118    .text:0000000000000078 .L0 
       src/Riscv.cpp:41     .text:0000000000000078 .L0 
     /tmp/ccgalkRa.s:126    .text:000000000000007c .L0 
     /tmp/ccgalkRa.s:180    .text:00000000000000a0 .L0 
     /tmp/ccgalkRa.s:182    .text:00000000000000a0 .L0 
     /tmp/ccgalkRa.s:183    .text:00000000000000a0 .L0 
     /tmp/ccgalkRa.s:184    .text:00000000000000a0 .L0 
     /tmp/ccgalkRa.s:185    .text:00000000000000a0 .L0 
     /tmp/ccgalkRa.s:192    .text:00000000000000b0 .L0 
       src/Riscv.cpp:47     .text:00000000000000b0 .L0 
GAS LISTING /tmp/ccgalkRa.s 			page 21


     /tmp/ccgalkRa.s:198    .text:00000000000000b4 .L0 
     /tmp/ccgalkRa.s:200    .text:00000000000000b4 .L0 
     /tmp/ccgalkRa.s:203    .text:00000000000000bc .L0 
       src/Riscv.cpp:49     .text:00000000000000bc .L0 
     /tmp/ccgalkRa.s:209    .text:00000000000000c0 .L0 
     /tmp/ccgalkRa.s:211    .text:00000000000000c0 .L0 
     /tmp/ccgalkRa.s:222    .text:00000000000000c8 .L0 
     /tmp/ccgalkRa.s:223    .text:00000000000000c8 .L0 
     /tmp/ccgalkRa.s:224    .text:00000000000000c8 .L0 
     /tmp/ccgalkRa.s:227    .text:00000000000000cc .L0 
       src/Riscv.cpp:184    .text:00000000000000cc .L0 
     /tmp/ccgalkRa.s:236    .text:00000000000000d0 .L0 
     /tmp/ccgalkRa.s:242    .text:00000000000000d4 .L0 
     /tmp/ccgalkRa.s:244    .text:00000000000000d4 .L0 
     /tmp/ccgalkRa.s:245    .text:00000000000000d4 .L0 
     /tmp/ccgalkRa.s:246    .text:00000000000000d4 .L0 
     /tmp/ccgalkRa.s:247    .text:00000000000000d4 .L0 
     /tmp/ccgalkRa.s:254    .text:00000000000000e4 .L0 
       src/Riscv.cpp:56     .text:00000000000000e4 .L0 
     /tmp/ccgalkRa.s:260    .text:00000000000000e8 .L0 
     /tmp/ccgalkRa.s:262    .text:00000000000000e8 .L0 
     /tmp/ccgalkRa.s:265    .text:00000000000000f0 .L0 
       src/Riscv.cpp:58     .text:00000000000000f0 .L0 
     /tmp/ccgalkRa.s:271    .text:00000000000000f4 .L0 
     /tmp/ccgalkRa.s:273    .text:00000000000000f4 .L0 
     /tmp/ccgalkRa.s:280    .text:00000000000000fc .L0 
     /tmp/ccgalkRa.s:285    .text:0000000000000100 .L0 
     /tmp/ccgalkRa.s:287    .text:0000000000000100 .L0 
     /tmp/ccgalkRa.s:288    .text:0000000000000100 .L0 
     /tmp/ccgalkRa.s:289    .text:0000000000000100 .L0 
     /tmp/ccgalkRa.s:292    .text:0000000000000108 .L0 
       src/Riscv.cpp:64     .text:0000000000000108 .L0 
     /tmp/ccgalkRa.s:298    .text:000000000000010c .L0 
     /tmp/ccgalkRa.s:300    .text:000000000000010c .L0 
     /tmp/ccgalkRa.s:308    .text:000000000000011c .L0 
     /tmp/ccgalkRa.s:313    .text:0000000000000120 .L0 
     /tmp/ccgalkRa.s:315    .text:0000000000000120 .L0 
     /tmp/ccgalkRa.s:316    .text:0000000000000120 .L0 
     /tmp/ccgalkRa.s:317    .text:0000000000000120 .L0 
     /tmp/ccgalkRa.s:320    .text:0000000000000128 .L0 
       src/Riscv.cpp:70     .text:0000000000000128 .L0 
     /tmp/ccgalkRa.s:326    .text:000000000000012c .L0 
     /tmp/ccgalkRa.s:328    .text:000000000000012c .L0 
     /tmp/ccgalkRa.s:336    .text:000000000000013c .L0 
     /tmp/ccgalkRa.s:341    .text:0000000000000140 .L0 
     /tmp/ccgalkRa.s:343    .text:0000000000000140 .L0 
     /tmp/ccgalkRa.s:344    .text:0000000000000140 .L0 
     /tmp/ccgalkRa.s:345    .text:0000000000000140 .L0 
     /tmp/ccgalkRa.s:346    .text:0000000000000140 .L0 
     /tmp/ccgalkRa.s:347    .text:0000000000000140 .L0 
     /tmp/ccgalkRa.s:348    .text:0000000000000140 .L0 
     /tmp/ccgalkRa.s:349    .text:0000000000000140 .L0 
     /tmp/ccgalkRa.s:356    .text:0000000000000150 .L0 
       src/Riscv.cpp:81     .text:0000000000000150 .L0 
     /tmp/ccgalkRa.s:362    .text:0000000000000154 .L0 
       src/Riscv.cpp:82     .text:0000000000000154 .L0 
     /tmp/ccgalkRa.s:367    .text:0000000000000158 .L0 
GAS LISTING /tmp/ccgalkRa.s 			page 22


       src/Riscv.cpp:83     .text:0000000000000158 .L0 
     /tmp/ccgalkRa.s:373    .text:000000000000015c .L0 
       src/Riscv.cpp:84     .text:000000000000015c .L0 
     /tmp/ccgalkRa.s:378    .text:0000000000000160 .L0 
       src/Riscv.cpp:85     .text:0000000000000160 .L0 
     /tmp/ccgalkRa.s:384    .text:0000000000000164 .L0 
       src/Riscv.cpp:86     .text:0000000000000164 .L0 
     /tmp/ccgalkRa.s:389    .text:0000000000000168 .L0 
       src/Riscv.cpp:87     .text:0000000000000168 .L0 
     /tmp/ccgalkRa.s:395    .text:000000000000016c .L0 
     /tmp/ccgalkRa.s:396    .text:000000000000016c .L0 
     /tmp/ccgalkRa.s:398    .text:000000000000016c .L0 
     /tmp/ccgalkRa.s:402    .text:0000000000000178 .L0 
     /tmp/ccgalkRa.s:404    .text:000000000000017c .L0 
     /tmp/ccgalkRa.s:406    .text:0000000000000180 .L0 
     /tmp/ccgalkRa.s:407    .text:0000000000000180 .L0 
     /tmp/ccgalkRa.s:410    .text:0000000000000188 .L0 
       src/Riscv.cpp:95     .text:0000000000000188 .L0 
     /tmp/ccgalkRa.s:418    .text:000000000000018c .L0 
     /tmp/ccgalkRa.s:419    .text:000000000000018c .L0 
     /tmp/ccgalkRa.s:427    .text:000000000000019c .L0 
     /tmp/ccgalkRa.s:430    .text:00000000000001a0 .L0 
       src/Riscv.cpp:97     .text:00000000000001a0 .L0 
     /tmp/ccgalkRa.s:441    .text:00000000000001a8 .L0 
     /tmp/ccgalkRa.s:442    .text:00000000000001a8 .L0 
     /tmp/ccgalkRa.s:443    .text:00000000000001a8 .L0 
     /tmp/ccgalkRa.s:444    .text:00000000000001a8 .L0 
     /tmp/ccgalkRa.s:447    .text:00000000000001b4 .L0 
     /tmp/ccgalkRa.s:449    .text:00000000000001b8 .L0 
     /tmp/ccgalkRa.s:450    .text:00000000000001b8 .L0 
     /tmp/ccgalkRa.s:454    .text:00000000000001c0 .L0 
     /tmp/ccgalkRa.s:455    .text:00000000000001c0 .L0 
     /tmp/ccgalkRa.s:458    .text:00000000000001c8 .L0 
       src/Riscv.cpp:110    .text:00000000000001c8 .L0 
     /tmp/ccgalkRa.s:465    .text:00000000000001cc .L0 
     /tmp/ccgalkRa.s:468    .text:00000000000001d0 .L0 
     /tmp/ccgalkRa.s:469    .text:00000000000001d0 .L0 
     /tmp/ccgalkRa.s:470    .text:00000000000001d0 .L0 
     /tmp/ccgalkRa.s:471    .text:00000000000001d0 .L0 
     /tmp/ccgalkRa.s:474    .text:00000000000001d8 .L0 
     /tmp/ccgalkRa.s:477    .text:00000000000001dc .L0 
     /tmp/ccgalkRa.s:479    .text:00000000000001dc .L0 
     /tmp/ccgalkRa.s:481    .text:00000000000001dc .L0 
     /tmp/ccgalkRa.s:482    .text:00000000000001dc .L0 
     /tmp/ccgalkRa.s:483    .text:00000000000001dc .L0 
     /tmp/ccgalkRa.s:484    .text:00000000000001dc .L0 
     /tmp/ccgalkRa.s:491    .text:00000000000001ec .L0 
       src/Riscv.cpp:124    .text:00000000000001ec .L0 
     /tmp/ccgalkRa.s:497    .text:00000000000001f0 .L0 
       src/Riscv.cpp:125    .text:00000000000001f0 .L0 
     /tmp/ccgalkRa.s:502    .text:00000000000001f4 .L0 
       src/Riscv.cpp:126    .text:00000000000001f4 .L0 
     /tmp/ccgalkRa.s:508    .text:00000000000001f8 .L0 
     /tmp/ccgalkRa.s:510    .text:00000000000001f8 .L0 
     /tmp/ccgalkRa.s:516    .text:0000000000000208 .L0 
     /tmp/ccgalkRa.s:518    .text:000000000000020c .L0 
     /tmp/ccgalkRa.s:520    .text:0000000000000210 .L0 
GAS LISTING /tmp/ccgalkRa.s 			page 23


       src/Riscv.cpp:130    .text:0000000000000210 .L0 
     /tmp/ccgalkRa.s:528    .text:0000000000000214 .L0 
     /tmp/ccgalkRa.s:529    .text:0000000000000214 .L0 
     /tmp/ccgalkRa.s:537    .text:0000000000000224 .L0 
     /tmp/ccgalkRa.s:540    .text:0000000000000228 .L0 
       src/Riscv.cpp:131    .text:0000000000000228 .L0 
     /tmp/ccgalkRa.s:551    .text:0000000000000230 .L0 
     /tmp/ccgalkRa.s:553    .text:0000000000000230 .L0 
     /tmp/ccgalkRa.s:554    .text:0000000000000230 .L0 
     /tmp/ccgalkRa.s:555    .text:0000000000000230 .L0 
     /tmp/ccgalkRa.s:556    .text:0000000000000230 .L0 
     /tmp/ccgalkRa.s:563    .text:0000000000000240 .L0 
       src/Riscv.cpp:141    .text:0000000000000240 .L0 
     /tmp/ccgalkRa.s:570    .text:0000000000000244 .L0 
     /tmp/ccgalkRa.s:572    .text:0000000000000248 .L0 
     /tmp/ccgalkRa.s:573    .text:0000000000000248 .L0 
     /tmp/ccgalkRa.s:576    .text:0000000000000250 .L0 
       src/Riscv.cpp:145    .text:0000000000000250 .L0 
     /tmp/ccgalkRa.s:586    .text:0000000000000258 .L0 
       src/Riscv.cpp:147    .text:0000000000000258 .L0 
     /tmp/ccgalkRa.s:597    .text:0000000000000260 .L0 
     /tmp/ccgalkRa.s:599    .text:0000000000000260 .L0 
     /tmp/ccgalkRa.s:600    .text:0000000000000260 .L0 
     /tmp/ccgalkRa.s:601    .text:0000000000000260 .L0 
     /tmp/ccgalkRa.s:602    .text:0000000000000260 .L0 
     /tmp/ccgalkRa.s:609    .text:0000000000000270 .L0 
       src/Riscv.cpp:155    .text:0000000000000270 .L0 
     /tmp/ccgalkRa.s:616    .text:0000000000000274 .L0 
     /tmp/ccgalkRa.s:618    .text:0000000000000278 .L0 
     /tmp/ccgalkRa.s:619    .text:0000000000000278 .L0 
     /tmp/ccgalkRa.s:622    .text:0000000000000280 .L0 
       src/Riscv.cpp:159    .text:0000000000000280 .L0 
     /tmp/ccgalkRa.s:632    .text:0000000000000288 .L0 
       src/Riscv.cpp:161    .text:0000000000000288 .L0 
     /tmp/ccgalkRa.s:643    .text:0000000000000290 .L0 
     /tmp/ccgalkRa.s:645    .text:0000000000000290 .L0 
     /tmp/ccgalkRa.s:646    .text:0000000000000290 .L0 
     /tmp/ccgalkRa.s:647    .text:0000000000000290 .L0 
     /tmp/ccgalkRa.s:648    .text:0000000000000290 .L0 
     /tmp/ccgalkRa.s:655    .text:00000000000002a0 .L0 
       src/Riscv.cpp:169    .text:00000000000002a0 .L0 
     /tmp/ccgalkRa.s:662    .text:00000000000002a4 .L0 
     /tmp/ccgalkRa.s:664    .text:00000000000002a8 .L0 
     /tmp/ccgalkRa.s:665    .text:00000000000002a8 .L0 
     /tmp/ccgalkRa.s:668    .text:00000000000002b0 .L0 
       src/Riscv.cpp:173    .text:00000000000002b0 .L0 
     /tmp/ccgalkRa.s:678    .text:00000000000002b8 .L0 
       src/Riscv.cpp:175    .text:00000000000002b8 .L0 
     /tmp/ccgalkRa.s:689    .text:00000000000002c0 .L0 
     /tmp/ccgalkRa.s:698    .text:00000000000002c0 .L0 
     /tmp/ccgalkRa.s:22     .text:000000000000000c .L0 
     /tmp/ccgalkRa.s:138    .rodata:0000000000000000 .L7
     /tmp/ccgalkRa.s:130    .text:0000000000000088 .L0 
     /tmp/ccgalkRa.s:185    .text:00000000000000a0 .L0 
     /tmp/ccgalkRa.s:247    .text:00000000000000d4 .L0 
     /tmp/ccgalkRa.s:300    .text:000000000000010c .L0 
     /tmp/ccgalkRa.s:328    .text:000000000000012c .L0 
GAS LISTING /tmp/ccgalkRa.s 			page 24


     /tmp/ccgalkRa.s:349    .text:0000000000000140 .L0 
     /tmp/ccgalkRa.s:419    .text:000000000000018c .L0 
     /tmp/ccgalkRa.s:444    .text:00000000000001a8 .L0 
     /tmp/ccgalkRa.s:484    .text:00000000000001dc .L0 
     /tmp/ccgalkRa.s:529    .text:0000000000000214 .L0 
     /tmp/ccgalkRa.s:556    .text:0000000000000230 .L0 
     /tmp/ccgalkRa.s:602    .text:0000000000000260 .L0 
     /tmp/ccgalkRa.s:648    .text:0000000000000290 .L0 
     /tmp/ccgalkRa.s:94     .text:0000000000000060 .L3
     /tmp/ccgalkRa.s:112    .text:0000000000000078 .L27
     /tmp/ccgalkRa.s:219    .text:00000000000000c8 .L5
     /tmp/ccgalkRa.s:428    .text:00000000000001a0 .L18
     /tmp/ccgalkRa.s:416    .text:000000000000018c .L19
     /tmp/ccgalkRa.s:452    .text:00000000000001c0 .L20
     /tmp/ccgalkRa.s:538    .text:0000000000000228 .L21
     /tmp/ccgalkRa.s:526    .text:0000000000000214 .L22
     /tmp/ccgalkRa.s:584    .text:0000000000000258 .L23
     /tmp/ccgalkRa.s:630    .text:0000000000000288 .L24
     /tmp/ccgalkRa.s:676    .text:00000000000002b8 .L25
     /tmp/ccgalkRa.s:177    .text:00000000000000a0 .L17
     /tmp/ccgalkRa.s:237    .text:00000000000000d4 .L16
     /tmp/ccgalkRa.s:282    .text:0000000000000100 .L15
     /tmp/ccgalkRa.s:310    .text:0000000000000120 .L14
     /tmp/ccgalkRa.s:338    .text:0000000000000140 .L13
     /tmp/ccgalkRa.s:438    .text:00000000000001a8 .L12
     /tmp/ccgalkRa.s:466    .text:00000000000001d0 .L11
     /tmp/ccgalkRa.s:475    .text:00000000000001dc .L10
     /tmp/ccgalkRa.s:548    .text:0000000000000230 .L9
     /tmp/ccgalkRa.s:594    .text:0000000000000260 .L8
     /tmp/ccgalkRa.s:640    .text:0000000000000290 .L6
     /tmp/ccgalkRa.s:1879   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccgalkRa.s:3132   .debug_str:00000000000006ee .LASF126
     /tmp/ccgalkRa.s:3032   .debug_str:00000000000003e9 .LASF127
     /tmp/ccgalkRa.s:2972   .debug_str:000000000000020e .LASF128
     /tmp/ccgalkRa.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccgalkRa.s:692    .text:00000000000002c0 .Letext0
     /tmp/ccgalkRa.s:2902   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccgalkRa.s:3052   .debug_str:000000000000047d .LASF0
     /tmp/ccgalkRa.s:3070   .debug_str:00000000000004dd .LASF1
     /tmp/ccgalkRa.s:3034   .debug_str:00000000000003f7 .LASF2
     /tmp/ccgalkRa.s:3004   .debug_str:000000000000032a .LASF4
     /tmp/ccgalkRa.s:3108   .debug_str:000000000000062e .LASF3
     /tmp/ccgalkRa.s:2922   .debug_str:0000000000000084 .LASF5
     /tmp/ccgalkRa.s:3074   .debug_str:0000000000000510 .LASF6
     /tmp/ccgalkRa.s:3050   .debug_str:000000000000046a .LASF7
     /tmp/ccgalkRa.s:3150   .debug_str:000000000000084b .LASF8
     /tmp/ccgalkRa.s:2988   .debug_str:000000000000029b .LASF9
     /tmp/ccgalkRa.s:3084   .debug_str:0000000000000559 .LASF10
     /tmp/ccgalkRa.s:3136   .debug_str:00000000000007c3 .LASF11
     /tmp/ccgalkRa.s:2924   .debug_str:000000000000008b .LASF12
     /tmp/ccgalkRa.s:2912   .debug_str:0000000000000053 .LASF13
     /tmp/ccgalkRa.s:2936   .debug_str:0000000000000106 .LASF14
     /tmp/ccgalkRa.s:3104   .debug_str:0000000000000612 .LASF15
     /tmp/ccgalkRa.s:2946   .debug_str:0000000000000167 .LASF16
     /tmp/ccgalkRa.s:2980   .debug_str:000000000000024d .LASF17
     /tmp/ccgalkRa.s:3066   .debug_str:00000000000004d1 .LASF25
     /tmp/ccgalkRa.s:3134   .debug_str:00000000000007b2 .LASF18
GAS LISTING /tmp/ccgalkRa.s 			page 25


     /tmp/ccgalkRa.s:2952   .debug_str:000000000000018b .LASF20
     /tmp/ccgalkRa.s:3044   .debug_str:0000000000000445 .LASF19
     /tmp/ccgalkRa.s:3020   .debug_str:000000000000037d .LASF21
     /tmp/ccgalkRa.s:2926   .debug_str:000000000000009b .LASF24
     /tmp/ccgalkRa.s:3172   .debug_str:00000000000008f8 .LASF22
     /tmp/ccgalkRa.s:3122   .debug_str:00000000000006a0 .LASF23
     /tmp/ccgalkRa.s:3030   .debug_str:00000000000003d9 .LASF26
     /tmp/ccgalkRa.s:2948   .debug_str:000000000000017d .LASF27
     /tmp/ccgalkRa.s:3072   .debug_str:00000000000004f0 .LASF28
     /tmp/ccgalkRa.s:3110   .debug_str:0000000000000640 .LASF29
     /tmp/ccgalkRa.s:3118   .debug_str:0000000000000678 .LASF31
     /tmp/ccgalkRa.s:3088   .debug_str:000000000000056d .LASF30
     /tmp/ccgalkRa.s:2986   .debug_str:000000000000027a .LASF32
     /tmp/ccgalkRa.s:3160   .debug_str:00000000000008a5 .LASF33
     /tmp/ccgalkRa.s:2940   .debug_str:000000000000011f .LASF35
     /tmp/ccgalkRa.s:3154   .debug_str:0000000000000872 .LASF34
     /tmp/ccgalkRa.s:3002   .debug_str:00000000000002f7 .LASF36
     /tmp/ccgalkRa.s:2938   .debug_str:0000000000000112 .LASF129
     /tmp/ccgalkRa.s:2964   .debug_str:00000000000001ec .LASF82
     /tmp/ccgalkRa.s:3140   .debug_str:00000000000007e7 .LASF84
     /tmp/ccgalkRa.s:2998   .debug_str:00000000000002e5 .LASF130
     /tmp/ccgalkRa.s:3082   .debug_str:0000000000000553 .LASF37
     /tmp/ccgalkRa.s:3078   .debug_str:000000000000052a .LASF38
     /tmp/ccgalkRa.s:3006   .debug_str:0000000000000331 .LASF39
     /tmp/ccgalkRa.s:3114   .debug_str:000000000000065c .LASF40
     /tmp/ccgalkRa.s:2956   .debug_str:00000000000001bf .LASF41
     /tmp/ccgalkRa.s:2914   .debug_str:0000000000000063 .LASF42
     /tmp/ccgalkRa.s:2962   .debug_str:00000000000001e3 .LASF43
     /tmp/ccgalkRa.s:3162   .debug_str:00000000000008b8 .LASF44
     /tmp/ccgalkRa.s:3094   .debug_str:00000000000005c0 .LASF45
     /tmp/ccgalkRa.s:2976   .debug_str:000000000000023a .LASF131
     /tmp/ccgalkRa.s:2908   .debug_str:0000000000000014 .LASF46
     /tmp/ccgalkRa.s:3102   .debug_str:0000000000000609 .LASF47
     /tmp/ccgalkRa.s:3098   .debug_str:00000000000005e2 .LASF48
     /tmp/ccgalkRa.s:3016   .debug_str:0000000000000362 .LASF49
     /tmp/ccgalkRa.s:3022   .debug_str:0000000000000396 .LASF50
     /tmp/ccgalkRa.s:3056   .debug_str:0000000000000493 .LASF51
     /tmp/ccgalkRa.s:3068   .debug_str:00000000000004d7 .LASF52
     /tmp/ccgalkRa.s:3174   .debug_str:00000000000008fd .LASF53
     /tmp/ccgalkRa.s:3024   .debug_str:00000000000003bb .LASF54
     /tmp/ccgalkRa.s:3116   .debug_str:0000000000000665 .LASF55
     /tmp/ccgalkRa.s:3176   .debug_str:0000000000000911 .LASF56
     /tmp/ccgalkRa.s:2934   .debug_str:00000000000000f0 .LASF57
     /tmp/ccgalkRa.s:3014   .debug_str:0000000000000359 .LASF132
     /tmp/ccgalkRa.s:3130   .debug_str:00000000000006d6 .LASF133
     /tmp/ccgalkRa.s:3042   .debug_str:000000000000043c .LASF58
     /tmp/ccgalkRa.s:2910   .debug_str:0000000000000030 .LASF59
     /tmp/ccgalkRa.s:3106   .debug_str:0000000000000628 .LASF60
     /tmp/ccgalkRa.s:2996   .debug_str:00000000000002d1 .LASF61
     /tmp/ccgalkRa.s:3054   .debug_str:000000000000048a .LASF62
     /tmp/ccgalkRa.s:3152   .debug_str:000000000000085b .LASF63
     /tmp/ccgalkRa.s:2932   .debug_str:00000000000000e3 .LASF64
     /tmp/ccgalkRa.s:3128   .debug_str:00000000000006c6 .LASF65
     /tmp/ccgalkRa.s:2958   .debug_str:00000000000001c7 .LASF68
     /tmp/ccgalkRa.s:3146   .debug_str:0000000000000831 .LASF70
     /tmp/ccgalkRa.s:2982   .debug_str:000000000000025a .LASF66
     /tmp/ccgalkRa.s:2994   .debug_str:00000000000002c1 .LASF67
GAS LISTING /tmp/ccgalkRa.s 			page 26


     /tmp/ccgalkRa.s:3008   .debug_str:0000000000000339 .LASF69
     /tmp/ccgalkRa.s:3168   .debug_str:00000000000008e0 .LASF71
     /tmp/ccgalkRa.s:3000   .debug_str:00000000000002f1 .LASF72
     /tmp/ccgalkRa.s:3158   .debug_str:000000000000089b .LASF73
     /tmp/ccgalkRa.s:3012   .debug_str:0000000000000351 .LASF74
     /tmp/ccgalkRa.s:3010   .debug_str:000000000000034c .LASF75
     /tmp/ccgalkRa.s:3058   .debug_str:00000000000004bb .LASF76
     /tmp/ccgalkRa.s:2918   .debug_str:0000000000000076 .LASF77
     /tmp/ccgalkRa.s:3166   .debug_str:00000000000008d2 .LASF78
     /tmp/ccgalkRa.s:3040   .debug_str:000000000000042e .LASF79
     /tmp/ccgalkRa.s:2974   .debug_str:000000000000022c .LASF80
     /tmp/ccgalkRa.s:3038   .debug_str:0000000000000411 .LASF81
     /tmp/ccgalkRa.s:3156   .debug_str:000000000000088d .LASF102
     /tmp/ccgalkRa.s:2930   .debug_str:00000000000000b7 .LASF134
     /tmp/ccgalkRa.s:3036   .debug_str:0000000000000405 .LASF83
     /tmp/ccgalkRa.s:3090   .debug_str:0000000000000576 .LASF85
     /tmp/ccgalkRa.s:2906   .debug_str:000000000000000a .LASF86
     /tmp/ccgalkRa.s:2928   .debug_str:00000000000000a7 .LASF87
     /tmp/ccgalkRa.s:3080   .debug_str:0000000000000532 .LASF88
     /tmp/ccgalkRa.s:2968   .debug_str:00000000000001ff .LASF89
     /tmp/ccgalkRa.s:3138   .debug_str:00000000000007d2 .LASF90
     /tmp/ccgalkRa.s:3076   .debug_str:0000000000000523 .LASF91
     /tmp/ccgalkRa.s:3100   .debug_str:00000000000005f2 .LASF92
     /tmp/ccgalkRa.s:3124   .debug_str:00000000000006a5 .LASF93
     /tmp/ccgalkRa.s:2954   .debug_str:00000000000001a9 .LASF94
     /tmp/ccgalkRa.s:3112   .debug_str:000000000000064a .LASF95
     /tmp/ccgalkRa.s:2942   .debug_str:000000000000014a .LASF96
     /tmp/ccgalkRa.s:3164   .debug_str:00000000000008c0 .LASF97
     /tmp/ccgalkRa.s:2990   .debug_str:00000000000002a9 .LASF98
     /tmp/ccgalkRa.s:3142   .debug_str:0000000000000815 .LASF99
     /tmp/ccgalkRa.s:2950   .debug_str:0000000000000186 .LASF100
     /tmp/ccgalkRa.s:3046   .debug_str:0000000000000451 .LASF101
     /tmp/ccgalkRa.s:3048   .debug_str:0000000000000456 .LASF135
     /tmp/ccgalkRa.s:3092   .debug_str:00000000000005a4 .LASF136
     /tmp/ccgalkRa.s:2944   .debug_str:000000000000015d .LASF103
     /tmp/ccgalkRa.s:3096   .debug_str:00000000000005d9 .LASF104
     /tmp/ccgalkRa.s:3026   .debug_str:00000000000003c0 .LASF105
     /tmp/ccgalkRa.s:3126   .debug_str:00000000000006ab .LASF106
     /tmp/ccgalkRa.s:3018   .debug_str:000000000000036f .LASF107
     /tmp/ccgalkRa.s:2960   .debug_str:00000000000001d7 .LASF108
     /tmp/ccgalkRa.s:2984   .debug_str:000000000000026a .LASF109
     /tmp/ccgalkRa.s:3148   .debug_str:0000000000000842 .LASF110
     /tmp/ccgalkRa.s:2904   .debug_str:0000000000000000 .LASF111
     /tmp/ccgalkRa.s:2966   .debug_str:00000000000001f6 .LASF112
     /tmp/ccgalkRa.s:2916   .debug_str:000000000000006b .LASF113
     /tmp/ccgalkRa.s:45     .text:0000000000000024 .LFB14
     /tmp/ccgalkRa.s:690    .text:00000000000002c0 .LFE14
     /tmp/ccgalkRa.s:3170   .debug_str:00000000000008f1 .LASF114
     /tmp/ccgalkRa.s:2649   .debug_loc:0000000000000000 .LLST0
     /tmp/ccgalkRa.s:3062   .debug_str:00000000000004c5 .LASF115
     /tmp/ccgalkRa.s:2661   .debug_loc:0000000000000037 .LLST1
     /tmp/ccgalkRa.s:2970   .debug_str:0000000000000204 .LASF116
     /tmp/ccgalkRa.s:2677   .debug_loc:0000000000000081 .LLST2
     /tmp/ccgalkRa.s:3028   .debug_str:00000000000003d3 .LASF117
     /tmp/ccgalkRa.s:2689   .debug_loc:00000000000000a9 .LLST3
     /tmp/ccgalkRa.s:2894   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccgalkRa.s:3060   .debug_str:00000000000004c0 .LASF118
GAS LISTING /tmp/ccgalkRa.s 			page 27


     /tmp/ccgalkRa.s:2708   .debug_loc:00000000000000f6 .LLST4
     /tmp/ccgalkRa.s:181    .text:00000000000000a0 .LBB5
     /tmp/ccgalkRa.s:220    .text:00000000000000c8 .LBE5
     /tmp/ccgalkRa.s:2715   .debug_loc:0000000000000119 .LLST5
     /tmp/ccgalkRa.s:2722   .debug_loc:000000000000013c .LLST6
     /tmp/ccgalkRa.s:201    .text:00000000000000bc .LVL13
     /tmp/ccgalkRa.s:243    .text:00000000000000d4 .LBB6
     /tmp/ccgalkRa.s:283    .text:0000000000000100 .LBE6
     /tmp/ccgalkRa.s:3086   .debug_str:0000000000000568 .LASF119
     /tmp/ccgalkRa.s:2729   .debug_loc:000000000000015f .LLST7
     /tmp/ccgalkRa.s:3064   .debug_str:00000000000004ca .LASF120
     /tmp/ccgalkRa.s:2736   .debug_loc:0000000000000182 .LLST8
     /tmp/ccgalkRa.s:263    .text:00000000000000f0 .LVL17
     /tmp/ccgalkRa.s:286    .text:0000000000000100 .LBB7
     /tmp/ccgalkRa.s:311    .text:0000000000000120 .LBE7
     /tmp/ccgalkRa.s:3144   .debug_str:0000000000000827 .LASF121
     /tmp/ccgalkRa.s:2743   .debug_loc:00000000000001a5 .LLST9
     /tmp/ccgalkRa.s:290    .text:0000000000000108 .LVL19
     /tmp/ccgalkRa.s:314    .text:0000000000000120 .LBB8
     /tmp/ccgalkRa.s:339    .text:0000000000000140 .LBE8
     /tmp/ccgalkRa.s:2920   .debug_str:000000000000007c .LASF122
     /tmp/ccgalkRa.s:2750   .debug_loc:00000000000001c8 .LLST10
     /tmp/ccgalkRa.s:318    .text:0000000000000128 .LVL21
     /tmp/ccgalkRa.s:342    .text:0000000000000140 .LBB9
     /tmp/ccgalkRa.s:439    .text:00000000000001a8 .LBE9
     /tmp/ccgalkRa.s:3120   .debug_str:0000000000000699 .LASF123
     /tmp/ccgalkRa.s:2757   .debug_loc:00000000000001eb .LLST11
     /tmp/ccgalkRa.s:2978   .debug_str:000000000000023f .LASF124
     /tmp/ccgalkRa.s:2769   .debug_loc:0000000000000222 .LLST12
     /tmp/ccgalkRa.s:2781   .debug_loc:0000000000000259 .LLST13
     /tmp/ccgalkRa.s:2793   .debug_loc:0000000000000290 .LLST14
     /tmp/ccgalkRa.s:2805   .debug_loc:00000000000002c7 .LLST15
     /tmp/ccgalkRa.s:400    .text:0000000000000178 .LVL27
     /tmp/ccgalkRa.s:408    .text:0000000000000188 .LVL28
     /tmp/ccgalkRa.s:478    .text:00000000000001dc .LBB10
     /tmp/ccgalkRa.s:549    .text:0000000000000230 .LBE10
     /tmp/ccgalkRa.s:2814   .debug_loc:00000000000002ed .LLST16
     /tmp/ccgalkRa.s:2992   .debug_str:00000000000002bc .LASF125
     /tmp/ccgalkRa.s:2826   .debug_loc:0000000000000324 .LLST17
     /tmp/ccgalkRa.s:514    .text:0000000000000208 .LVL37
     /tmp/ccgalkRa.s:552    .text:0000000000000230 .LBB11
     /tmp/ccgalkRa.s:595    .text:0000000000000260 .LBE11
     /tmp/ccgalkRa.s:2833   .debug_loc:0000000000000347 .LLST18
     /tmp/ccgalkRa.s:574    .text:0000000000000250 .LVL40
     /tmp/ccgalkRa.s:598    .text:0000000000000260 .LBB12
     /tmp/ccgalkRa.s:641    .text:0000000000000290 .LBE12
     /tmp/ccgalkRa.s:2849   .debug_loc:0000000000000391 .LLST19
     /tmp/ccgalkRa.s:620    .text:0000000000000280 .LVL44
     /tmp/ccgalkRa.s:644    .text:0000000000000290 .LBB13
     /tmp/ccgalkRa.s:685    .text:00000000000002c0 .LBE13
     /tmp/ccgalkRa.s:2865   .debug_loc:00000000000003db .LLST20
     /tmp/ccgalkRa.s:666    .text:00000000000002b0 .LVL48
     /tmp/ccgalkRa.s:451    .text:00000000000001c0 .LVL30
     /tmp/ccgalkRa.s:456    .text:00000000000001c8 .LVL31
     /tmp/ccgalkRa.s:472    .text:00000000000001d8 .LVL32
     /tmp/ccgalkRa.s:10     .text:0000000000000000 .LFB13
     /tmp/ccgalkRa.s:39     .text:0000000000000024 .LFE13
GAS LISTING /tmp/ccgalkRa.s 			page 28


     /tmp/ccgalkRa.s:61     .text:000000000000003c .LVL1
     /tmp/ccgalkRa.s:68     .text:0000000000000040 .LVL2
     /tmp/ccgalkRa.s:91     .text:000000000000005c .LVL6
     /tmp/ccgalkRa.s:74     .text:0000000000000044 .LVL3
     /tmp/ccgalkRa.s:105    .text:000000000000006c .LVL8
     /tmp/ccgalkRa.s:111    .text:0000000000000078 .LVL9
     /tmp/ccgalkRa.s:82     .text:0000000000000050 .LVL4
     /tmp/ccgalkRa.s:88     .text:0000000000000058 .LVL5
     /tmp/ccgalkRa.s:93     .text:0000000000000060 .LVL7
     /tmp/ccgalkRa.s:123    .text:000000000000007c .LVL10
     /tmp/ccgalkRa.s:129    .text:0000000000000088 .LVL11
     /tmp/ccgalkRa.s:196    .text:00000000000000b4 .LVL12
     /tmp/ccgalkRa.s:217    .text:00000000000000c8 .LVL14
     /tmp/ccgalkRa.s:258    .text:00000000000000e8 .LVL16
     /tmp/ccgalkRa.s:281    .text:0000000000000100 .LVL18
     /tmp/ccgalkRa.s:309    .text:0000000000000120 .LVL20
     /tmp/ccgalkRa.s:337    .text:0000000000000140 .LVL22
     /tmp/ccgalkRa.s:360    .text:0000000000000154 .LVL23
     /tmp/ccgalkRa.s:437    .text:00000000000001a8 .LVL29
     /tmp/ccgalkRa.s:371    .text:000000000000015c .LVL24
     /tmp/ccgalkRa.s:382    .text:0000000000000164 .LVL25
     /tmp/ccgalkRa.s:393    .text:000000000000016c .LVL26
     /tmp/ccgalkRa.s:480    .text:00000000000001dc .LVL33
     /tmp/ccgalkRa.s:495    .text:00000000000001f0 .LVL34
     /tmp/ccgalkRa.s:547    .text:0000000000000230 .LVL38
     /tmp/ccgalkRa.s:506    .text:00000000000001f8 .LVL35
     /tmp/ccgalkRa.s:511    .text:00000000000001fc .LVL36
     /tmp/ccgalkRa.s:567    .text:0000000000000244 .LVL39
     /tmp/ccgalkRa.s:583    .text:0000000000000258 .LVL41
     /tmp/ccgalkRa.s:593    .text:0000000000000260 .LVL42
     /tmp/ccgalkRa.s:613    .text:0000000000000274 .LVL43
     /tmp/ccgalkRa.s:629    .text:0000000000000288 .LVL45
     /tmp/ccgalkRa.s:639    .text:0000000000000290 .LVL46
     /tmp/ccgalkRa.s:659    .text:00000000000002a4 .LVL47
     /tmp/ccgalkRa.s:675    .text:00000000000002b8 .LVL49
     /tmp/ccgalkRa.s:699    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccgalkRa.s:115    .text:0000000000000078 .LBB3
     /tmp/ccgalkRa.s:233    .text:00000000000000d0 .LBE3
     /tmp/ccgalkRa.s:239    .text:00000000000000d4 .LBB15
     /tmp/ccgalkRa.s:687    .text:00000000000002c0 .LBE15

UNDEFINED SYMBOLS
trap_handler
framePointer
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN15MemoryAllocator18mem_get_free_spaceEv
_ZN15MemoryAllocator26mem_get_largest_free_blockEv
_ZN7KThread12createThreadEPFvPvES0_S0_m
_ZN7KThread5startEv
_ZN7KThread7runningE
_ZN7KThread4exitEv
_ZN7KThread8dispatchEv
_ZN9Semaphore15createSemaphoreEm
_ZN9Semaphore5closeEv
_ZN9Semaphore4waitEv
_ZN9Semaphore6signalEv
GAS LISTING /tmp/ccgalkRa.s 			page 29


